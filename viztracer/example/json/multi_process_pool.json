{"traceEvents":[{"ph":"M","pid":15869,"tid":15869,"name":"process_name","args":{"name":"ForkPoolWorker-1"}},{"ph":"M","pid":15869,"tid":15865,"name":"thread_name","args":{"name":"MainThread"}},{"pid":15869,"tid":15865,"ts":14607665478.189,"dur":2.2,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665477.489,"dur":3.0,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665480.889,"dur":0.02,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665480.689,"dur":0.3,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665481.189,"dur":0.1,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665481.089,"dur":0.22,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665481.489,"dur":0.1,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665481.389,"dur":0.22,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665212.889,"dur":269.2,"name":"_run_after_forkers (/usr/lib/python3.6/multiprocessing/util.py:127)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665491.989,"dur":0.3,"name":"info (/usr/lib/python3.6/multiprocessing/util.py:52)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665502.189,"dur":0.5,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665518.789,"dur":1.2,"name":"posix.close","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665518.089,"dur":2.1,"name":"_close (/usr/lib/python3.6/multiprocessing/connection.py:360)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665512.689,"dur":8.0,"name":"close (/usr/lib/python3.6/multiprocessing/connection.py:173)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665523.789,"dur":0.6,"name":"posix.close","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665523.689,"dur":0.72,"name":"_close (/usr/lib/python3.6/multiprocessing/connection.py:360)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665523.289,"dur":1.3,"name":"close (/usr/lib/python3.6/multiprocessing/connection.py:173)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665554.689,"dur":3.1,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665553.789,"dur":4.2,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665565.589,"dur":0.5,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665568.789,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665605.489,"dur":3594.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669201.289,"dur":0.6,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669208.489,"dur":0.8,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665588.089,"dur":3622.0,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669243.089,"dur":0.4,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669243.589,"dur":24.4,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669291.689,"dur":2.3,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669294.089,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669294.389,"dur":0.3,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669271.789,"dur":23.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665585.189,"dur":3709.9,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669295.789,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665561.889,"dur":3734.1,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669316.089,"dur":50.7,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669314.589,"dur":52.4,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669374.389,"dur":87.1,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665524.989,"dur":3938.5,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669475.289,"dur":0.6,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669467.489,"dur":11.3,"name":"mapstar (/usr/lib/python3.6/multiprocessing/pool.py:43)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669557.489,"dur":24.3,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669582.989,"dur":30.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669488.389,"dur":125.2,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669614.789,"dur":4.5,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669620.489,"dur":14.2,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669484.189,"dur":150.6,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669639.789,"dur":3.2,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669639.189,"dur":3.9,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669664.689,"dur":0.4,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669665.989,"dur":0.2,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669685.489,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669687.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669688.489,"dur":0.8,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669712.589,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669713.089,"dur":20.2,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669711.989,"dur":22.2,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669687.589,"dur":47.1,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669663.689,"dur":71.5,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669737.189,"dur":0.4,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669736.489,"dur":1.2,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669479.989,"dur":258.0,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669740.489,"dur":394.1,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669740.289,"dur":394.9,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670138.089,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670138.689,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670141.189,"dur":2.6,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670144.089,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670144.589,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670139.689,"dur":5.5,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670145.789,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670145.989,"dur":0.6,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670147.389,"dur":0.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670147.989,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670148.189,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670146.989,"dur":1.5,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670139.289,"dur":9.4,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670148.989,"dur":0.02,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670137.389,"dur":11.7,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670150.189,"dur":15.5,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670149.789,"dur":16.1,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670167.189,"dur":5.7,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607669739.689,"dur":433.3,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670176.189,"dur":0.6,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670173.989,"dur":3.2,"name":"mapstar (/usr/lib/python3.6/multiprocessing/pool.py:43)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670182.589,"dur":0.4,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670183.789,"dur":0.9,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670179.489,"dur":5.3,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670185.289,"dur":1.6,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670187.589,"dur":0.4,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670178.089,"dur":10.0,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670188.989,"dur":0.8,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670188.789,"dur":1.1,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670190.689,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670191.389,"dur":0.3,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670192.489,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670193.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670194.089,"dur":0.6,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670195.389,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670195.589,"dur":1.8,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670195.289,"dur":2.4,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670193.589,"dur":4.3,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670190.489,"dur":7.6,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670198.789,"dur":0.1,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670198.589,"dur":0.4,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670177.589,"dur":21.5,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670200.589,"dur":0.3,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670200.489,"dur":0.5,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670201.389,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670201.589,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670202.689,"dur":0.9,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670203.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670203.989,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670202.089,"dur":2.2,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670204.589,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670204.809,"dur":0.38,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670205.589,"dur":0.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670206.089,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670206.289,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670205.389,"dur":1.2,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670201.889,"dur":4.72,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670206.889,"dur":0.02,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670201.289,"dur":5.7,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670207.389,"dur":14.2,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670207.289,"dur":14.5,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670222.589,"dur":3.8,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670200.189,"dur":26.3,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670228.589,"dur":0.5,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670227.289,"dur":2.1,"name":"mapstar (/usr/lib/python3.6/multiprocessing/pool.py:43)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670232.989,"dur":0.3,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670233.689,"dur":0.5,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670231.089,"dur":3.2,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670234.489,"dur":1.4,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670236.289,"dur":0.3,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670230.089,"dur":6.6,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670237.289,"dur":0.8,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670237.189,"dur":0.92,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670238.689,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670238.989,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670239.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670240.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670241.089,"dur":0.5,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670242.089,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670242.289,"dur":3.1,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670241.989,"dur":3.8,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670240.589,"dur":5.3,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670238.489,"dur":7.6,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670246.689,"dur":1.4,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670246.589,"dur":1.52,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670229.789,"dur":18.5,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670249.689,"dur":0.4,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670249.589,"dur":0.52,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670250.489,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670250.689,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670251.589,"dur":471.9,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670724.189,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670725.089,"dur":0.4,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670250.989,"dur":475.0,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670727.089,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670727.289,"dur":0.7,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670730.089,"dur":1.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670731.589,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670731.789,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670728.889,"dur":3.2,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670250.889,"dur":481.3,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670732.589,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670250.389,"dur":482.32,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670734.189,"dur":14.9,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670733.689,"dur":15.7,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670750.489,"dur":4.0,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670249.389,"dur":505.2,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670755.689,"dur":0.3,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670760.889,"dur":0.5,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670761.889,"dur":0.8,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670758.189,"dur":4.6,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670763.089,"dur":1.5,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670765.189,"dur":0.4,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670756.789,"dur":8.9,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670766.789,"dur":0.9,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670766.589,"dur":1.12,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670768.589,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670769.089,"dur":0.2,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670794.589,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670795.889,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670796.189,"dur":0.7,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670797.489,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670797.689,"dur":3.0,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670797.389,"dur":3.8,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670795.789,"dur":5.7,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670768.289,"dur":33.4,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670802.489,"dur":0.1,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670802.189,"dur":0.42,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670756.389,"dur":46.4,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670804.089,"dur":1507.4,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670803.989,"dur":1508.3,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672315.989,"dur":0.8,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672317.089,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672320.389,"dur":399.7,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672721.089,"dur":0.5,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672722.789,"dur":0.6,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672318.189,"dur":405.7,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672725.489,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672725.689,"dur":1.2,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672729.989,"dur":1.6,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672731.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672731.809,"dur":0.18,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672728.089,"dur":4.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672317.789,"dur":414.5,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672732.689,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672315.289,"dur":417.52,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672735.289,"dur":15.1,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672734.389,"dur":16.3,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672752.189,"dur":11.9,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607670803.689,"dur":1960.6,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672765.289,"dur":0.8,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672775.389,"dur":0.7,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672776.889,"dur":1.0,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672770.589,"dur":7.5,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672778.589,"dur":1.7,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672781.089,"dur":0.8,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672768.389,"dur":13.6,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672783.589,"dur":1.3,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672783.289,"dur":1.7,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672786.689,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672787.389,"dur":0.3,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672788.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672790.289,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672790.889,"dur":0.8,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672792.589,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672792.889,"dur":17.1,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672792.489,"dur":18.1,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672790.089,"dur":20.9,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672786.089,"dur":25.2,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672812.589,"dur":0.2,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672812.189,"dur":0.7,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672767.089,"dur":46.0,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672815.089,"dur":79.4,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672814.889,"dur":80.2,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672896.789,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672897.189,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672898.789,"dur":96193.3,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769095.789,"dur":1.6,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769101.389,"dur":1.3,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672897.889,"dur":96206.6,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769110.089,"dur":0.6,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769110.889,"dur":3.9,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769124.989,"dur":5.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769130.789,"dur":0.3,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769131.289,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769119.089,"dur":12.8,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672897.689,"dur":96234.7,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769133.989,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672896.489,"dur":96237.8,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769141.589,"dur":68.2,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769139.189,"dur":71.5,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769215.489,"dur":6.1,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607672814.389,"dur":96408.1,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769234.389,"dur":1.5,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769241.289,"dur":0.1,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665497.489,"dur":103744.4,"name":"worker (/usr/lib/python3.6/multiprocessing/pool.py:93)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607665492.989,"dur":103750.9,"name":"run (/usr/lib/python3.6/multiprocessing/process.py:88)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769261.989,"dur":0.8,"name":"info (/usr/lib/python3.6/multiprocessing/util.py:52)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769273.289,"dur":0.4,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769305.389,"dur":1.7,"name":"<lambda> (/usr/lib/python3.6/multiprocessing/util.py:246)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769304.289,"dur":3.5,"name":"<listcomp> (/usr/lib/python3.6/multiprocessing/util.py:253)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769309.889,"dur":5.1,"name":"list.sort","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769316.389,"dur":0.9,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769322.889,"dur":1.0,"name":"sub_debug (/usr/lib/python3.6/multiprocessing/util.py:44)","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769336.489,"dur":2.3,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15869,"tid":15865,"ts":14607769341.789,"dur":0.3,"name":"sub_debug (/usr/lib/python3.6/multiprocessing/util.py:44)","ph":"X","cat":"FEE"},{"ph":"M","pid":15871,"tid":15871,"name":"process_name","args":{"name":"ForkPoolWorker-3"}},{"ph":"M","pid":15871,"tid":15865,"name":"thread_name","args":{"name":"MainThread"}},{"pid":15871,"tid":15865,"ts":14607667116.889,"dur":1.8,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667115.689,"dur":3.1,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667121.589,"dur":0.1,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667121.289,"dur":0.5,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667122.189,"dur":0.02,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667121.989,"dur":0.3,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667122.489,"dur":0.02,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667122.389,"dur":0.2,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607666820.389,"dur":302.6,"name":"_run_after_forkers (/usr/lib/python3.6/multiprocessing/util.py:127)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667133.589,"dur":0.3,"name":"info (/usr/lib/python3.6/multiprocessing/util.py:52)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667145.789,"dur":2.2,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667164.589,"dur":1.3,"name":"posix.close","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667163.889,"dur":2.1,"name":"_close (/usr/lib/python3.6/multiprocessing/connection.py:360)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667158.689,"dur":9.8,"name":"close (/usr/lib/python3.6/multiprocessing/connection.py:173)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667172.689,"dur":0.5,"name":"posix.close","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667172.589,"dur":0.62,"name":"_close (/usr/lib/python3.6/multiprocessing/connection.py:360)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667172.189,"dur":1.2,"name":"close (/usr/lib/python3.6/multiprocessing/connection.py:173)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667184.189,"dur":2531.5,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667183.289,"dur":2533.3,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669729.189,"dur":0.8,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669744.289,"dur":0.7,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669767.489,"dur":2.8,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669770.789,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669775.689,"dur":0.5,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669750.189,"dur":26.6,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669789.989,"dur":0.3,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669790.309,"dur":8.18,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669802.489,"dur":1.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669804.089,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669804.389,"dur":0.3,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669801.389,"dur":3.6,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669746.389,"dur":58.7,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669805.489,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669724.989,"dur":80.7,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669809.389,"dur":15.8,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669808.289,"dur":17.1,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669832.689,"dur":30.8,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667174.189,"dur":2691.3,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669877.289,"dur":0.6,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669869.689,"dur":10.9,"name":"mapstar (/usr/lib/python3.6/multiprocessing/pool.py:43)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669913.589,"dur":6.0,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669920.889,"dur":10.9,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669889.389,"dur":42.7,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669933.089,"dur":4.1,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669938.289,"dur":1.1,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669885.589,"dur":53.9,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669944.189,"dur":2.8,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669943.689,"dur":3.6,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669951.189,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669951.889,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669978.189,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669980.089,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669980.789,"dur":0.9,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670004.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670004.689,"dur":18.0,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670004.089,"dur":19.5,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669979.989,"dur":44.0,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669950.389,"dur":74.1,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670026.389,"dur":0.2,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670025.689,"dur":1.0,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607669881.489,"dur":145.5,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670029.189,"dur":196.0,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670029.089,"dur":196.7,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670228.589,"dur":0.4,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670229.189,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670231.889,"dur":2.3,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670234.589,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670234.989,"dur":0.3,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670230.189,"dur":5.5,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670236.389,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670236.689,"dur":0.7,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670237.989,"dur":0.8,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670238.889,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670239.089,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670237.689,"dur":1.6,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670229.889,"dur":9.6,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670239.789,"dur":0.02,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670228.189,"dur":11.7,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670240.989,"dur":14.9,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670240.589,"dur":15.5,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670257.189,"dur":5.2,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670028.489,"dur":234.0,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670265.089,"dur":0.6,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670263.489,"dur":2.6,"name":"mapstar (/usr/lib/python3.6/multiprocessing/pool.py:43)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670270.889,"dur":0.5,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670271.789,"dur":0.8,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670268.289,"dur":4.4,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670272.989,"dur":21.0,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670294.589,"dur":0.5,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670267.089,"dur":28.02,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670296.089,"dur":24.1,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670295.889,"dur":24.4,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670321.489,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670321.889,"dur":0.2,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670322.989,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670324.289,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670324.589,"dur":0.7,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670326.089,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670326.289,"dur":1.7,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670325.989,"dur":2.3,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670324.189,"dur":4.3,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670321.189,"dur":7.5,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670329.389,"dur":0.2,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670329.189,"dur":0.42,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670266.589,"dur":63.2,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670331.289,"dur":1487.8,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670331.189,"dur":1488.7,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607671823.589,"dur":0.4,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607671824.189,"dur":0.3,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607671827.489,"dur":400.2,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672228.689,"dur":0.4,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672229.989,"dur":0.4,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607671825.289,"dur":405.7,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672232.589,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672232.889,"dur":0.9,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672236.189,"dur":1.6,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672237.889,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672238.089,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672234.789,"dur":3.6,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607671824.889,"dur":413.7,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672238.889,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607671822.889,"dur":416.12,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672240.789,"dur":15.5,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672240.189,"dur":16.5,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672257.889,"dur":13.0,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607670330.889,"dur":1940.3,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672272.189,"dur":0.9,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672281.389,"dur":0.7,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672282.889,"dur":1.3,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672277.389,"dur":6.9,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672284.689,"dur":1.8,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672287.089,"dur":0.9,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672275.189,"dur":12.82,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672289.489,"dur":1.1,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672289.189,"dur":1.42,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672292.089,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672292.789,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672294.289,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672295.789,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672296.289,"dur":0.8,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672298.089,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672298.389,"dur":15.9,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672297.989,"dur":17.0,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672295.689,"dur":19.6,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672291.689,"dur":23.9,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672317.189,"dur":0.2,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672316.789,"dur":0.7,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672273.889,"dur":43.8,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672319.489,"dur":554.7,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672319.389,"dur":555.7,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672877.989,"dur":0.4,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672878.589,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672881.489,"dur":1.9,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672883.589,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672884.189,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672879.589,"dur":5.2,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672885.589,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672885.809,"dur":0.68,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672887.189,"dur":0.7,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672887.989,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672888.089,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672886.889,"dur":1.6,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672879.189,"dur":9.4,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672888.789,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672877.389,"dur":11.52,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672889.889,"dur":11.0,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672889.589,"dur":11.4,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672901.989,"dur":5.2,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672318.989,"dur":588.3,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672907.889,"dur":0.6,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672913.589,"dur":0.5,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672914.689,"dur":0.8,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672910.889,"dur":4.7,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672915.889,"dur":1.2,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672917.789,"dur":0.9,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672909.489,"dur":9.22,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672919.689,"dur":0.8,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672919.489,"dur":1.1,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672921.289,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672921.689,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672922.589,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672923.909,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672924.189,"dur":0.6,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672925.689,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672925.789,"dur":1.5,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672925.589,"dur":2.0,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672923.889,"dur":3.9,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672921.089,"dur":6.9,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672928.589,"dur":0.7,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672928.489,"dur":0.82,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672908.989,"dur":20.5,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672930.889,"dur":96905.6,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672930.789,"dur":96913.3,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607769892.789,"dur":4.8,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607769900.089,"dur":1.4,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607769959.889,"dur":14.1,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607769976.389,"dur":2.6,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607769982.289,"dur":2.8,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607769937.289,"dur":49.8,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607769998.489,"dur":1.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607769999.889,"dur":4.8,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770007.389,"dur":1.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770009.089,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770009.689,"dur":0.3,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770006.089,"dur":4.2,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607769932.289,"dur":78.3,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770011.789,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607769886.889,"dur":125.3,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770023.989,"dur":53.9,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770016.889,"dur":62.3,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770087.189,"dur":13.5,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607672930.489,"dur":97171.2,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770139.689,"dur":2.9,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770151.389,"dur":0.2,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667139.889,"dur":103013.0,"name":"worker (/usr/lib/python3.6/multiprocessing/pool.py:93)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607667134.889,"dur":103023.2,"name":"run (/usr/lib/python3.6/multiprocessing/process.py:88)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770185.089,"dur":0.7,"name":"info (/usr/lib/python3.6/multiprocessing/util.py:52)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770195.389,"dur":0.5,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770256.689,"dur":3.0,"name":"<lambda> (/usr/lib/python3.6/multiprocessing/util.py:246)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770255.189,"dur":5.2,"name":"<listcomp> (/usr/lib/python3.6/multiprocessing/util.py:253)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770264.489,"dur":6.4,"name":"list.sort","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770272.689,"dur":0.9,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770284.089,"dur":2.3,"name":"sub_debug (/usr/lib/python3.6/multiprocessing/util.py:44)","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770307.889,"dur":2.1,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15871,"tid":15865,"ts":14607770313.389,"dur":0.2,"name":"sub_debug (/usr/lib/python3.6/multiprocessing/util.py:44)","ph":"X","cat":"FEE"},{"ph":"M","pid":15870,"tid":15870,"name":"process_name","args":{"name":"ForkPoolWorker-2"}},{"ph":"M","pid":15870,"tid":15865,"name":"thread_name","args":{"name":"MainThread"}},{"pid":15870,"tid":15865,"ts":14607666454.589,"dur":1.9,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666453.389,"dur":3.2,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666459.389,"dur":0.1,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666459.089,"dur":0.5,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666459.889,"dur":0.02,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666459.789,"dur":0.2,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666460.189,"dur":0.1,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666460.089,"dur":0.22,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666031.689,"dur":429.0,"name":"_run_after_forkers (/usr/lib/python3.6/multiprocessing/util.py:127)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666470.389,"dur":0.3,"name":"info (/usr/lib/python3.6/multiprocessing/util.py:52)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666483.489,"dur":2.2,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666502.889,"dur":1.5,"name":"posix.close","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666502.189,"dur":2.4,"name":"_close (/usr/lib/python3.6/multiprocessing/connection.py:360)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666496.789,"dur":10.5,"name":"close (/usr/lib/python3.6/multiprocessing/connection.py:173)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666510.789,"dur":0.6,"name":"posix.close","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666510.689,"dur":0.72,"name":"_close (/usr/lib/python3.6/multiprocessing/connection.py:360)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666510.289,"dur":1.3,"name":"close (/usr/lib/python3.6/multiprocessing/connection.py:173)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666519.889,"dur":2913.3,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666519.389,"dur":2914.7,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669462.589,"dur":0.7,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669467.989,"dur":0.3,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669490.689,"dur":2.8,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669493.989,"dur":0.4,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669524.889,"dur":0.7,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669472.389,"dur":54.0,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669556.689,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669556.989,"dur":26.8,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669588.289,"dur":2.2,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669590.689,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669591.189,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669586.789,"dur":4.8,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669469.389,"dur":122.4,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669592.189,"dur":0.02,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669457.989,"dur":134.3,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669612.889,"dur":31.3,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669611.989,"dur":48.6,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669667.589,"dur":73.3,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666512.289,"dur":3230.9,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669755.889,"dur":0.7,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669748.389,"dur":10.9,"name":"mapstar (/usr/lib/python3.6/multiprocessing/pool.py:43)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669792.689,"dur":6.7,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669800.689,"dur":11.3,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669768.089,"dur":44.2,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669813.289,"dur":4.2,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669818.589,"dur":0.8,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669764.089,"dur":55.4,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669823.989,"dur":2.8,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669823.489,"dur":3.5,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669830.089,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669830.789,"dur":0.2,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669835.989,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669838.189,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669838.889,"dur":0.9,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669845.489,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669845.989,"dur":18.5,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669845.289,"dur":20.1,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669838.089,"dur":27.7,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669829.289,"dur":36.9,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669868.289,"dur":0.2,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669867.489,"dur":1.2,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669760.489,"dur":108.4,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669871.289,"dur":1014.0,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669871.089,"dur":1015.0,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670889.689,"dur":0.4,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670890.389,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670893.489,"dur":2.3,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670896.089,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670896.789,"dur":0.3,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670891.589,"dur":5.9,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670898.289,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670898.509,"dur":14.88,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670914.089,"dur":0.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670914.689,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670914.889,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670913.689,"dur":1.4,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670891.189,"dur":24.0,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670915.489,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670888.789,"dur":26.82,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670916.989,"dur":34.1,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670916.489,"dur":34.9,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670952.689,"dur":5.0,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607669870.589,"dur":1087.2,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670958.989,"dur":0.4,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670965.889,"dur":0.5,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670966.989,"dur":1.0,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670962.189,"dur":5.9,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670968.389,"dur":1.6,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670970.489,"dur":0.6,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670960.689,"dur":10.5,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670972.389,"dur":0.9,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670972.189,"dur":1.12,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670974.189,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670974.789,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670975.889,"dur":0.3,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670977.389,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670977.689,"dur":0.6,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670979.389,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670979.589,"dur":1.8,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670979.289,"dur":2.4,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670977.289,"dur":4.6,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670973.989,"dur":8.1,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670982.789,"dur":14.2,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670982.589,"dur":14.6,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670959.989,"dur":37.7,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670999.989,"dur":141.3,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670999.789,"dur":142.0,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671144.589,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671145.089,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671147.689,"dur":2.3,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671150.189,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671150.689,"dur":0.3,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671145.989,"dur":5.4,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671151.989,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671152.289,"dur":0.6,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671153.489,"dur":0.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671153.989,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671154.189,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671153.189,"dur":1.2,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671145.689,"dur":8.8,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671154.689,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671143.989,"dur":10.9,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671155.889,"dur":14.5,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671155.489,"dur":15.1,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671171.689,"dur":4.6,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607670999.289,"dur":177.1,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671177.389,"dur":0.6,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671183.489,"dur":0.4,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671184.389,"dur":0.7,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671180.289,"dur":4.9,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671185.489,"dur":1.5,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671187.589,"dur":0.4,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671178.989,"dur":9.1,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671189.189,"dur":1.0,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671188.989,"dur":1.22,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671190.989,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671191.389,"dur":0.2,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671192.389,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671193.789,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671194.089,"dur":0.7,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671195.489,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671195.789,"dur":1.8,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671195.389,"dur":2.5,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671193.689,"dur":4.3,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671190.689,"dur":7.5,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671198.889,"dur":0.7,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671198.689,"dur":0.92,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671178.489,"dur":21.3,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671201.189,"dur":0.3,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671201.089,"dur":0.5,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671201.989,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671202.189,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671203.289,"dur":579.7,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671783.789,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671784.889,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671202.689,"dur":582.9,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671787.089,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671787.289,"dur":0.7,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671790.089,"dur":1.6,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671791.789,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671791.989,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671788.989,"dur":3.2,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671202.489,"dur":589.8,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671792.689,"dur":0.02,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671201.889,"dur":590.9,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671794.689,"dur":14.3,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671794.189,"dur":15.0,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671810.289,"dur":5.0,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671200.789,"dur":614.6,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671816.589,"dur":1.1,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671823.989,"dur":0.7,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671825.289,"dur":0.8,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671820.689,"dur":5.5,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671826.489,"dur":2.5,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671829.689,"dur":0.5,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671819.289,"dur":11.0,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671831.689,"dur":1.0,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671831.489,"dur":1.22,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671833.589,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671834.089,"dur":0.2,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671835.189,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671836.509,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671836.789,"dur":0.6,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671838.189,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671838.389,"dur":27.5,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671838.089,"dur":28.3,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671836.489,"dur":30.2,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671833.389,"dur":33.7,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671868.289,"dur":0.1,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671867.889,"dur":0.7,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671818.489,"dur":50.2,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671870.289,"dur":97420.9,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671870.189,"dur":97423.7,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769305.389,"dur":1.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769307.589,"dur":0.9,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769318.289,"dur":7.1,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769326.589,"dur":0.7,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769328.889,"dur":0.7,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769311.189,"dur":19.6,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769333.889,"dur":0.5,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769334.589,"dur":2.5,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769338.789,"dur":1.0,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769339.989,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769340.589,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769337.889,"dur":3.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769309.889,"dur":31.4,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769342.189,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769303.289,"dur":39.2,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769346.389,"dur":54.1,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769344.589,"dur":56.6,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769412.589,"dur":13.6,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607671869.889,"dur":97557.9,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769467.989,"dur":2.8,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769480.589,"dur":0.1,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666476.489,"dur":103004.7,"name":"worker (/usr/lib/python3.6/multiprocessing/pool.py:93)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607666471.489,"dur":103018.0,"name":"run (/usr/lib/python3.6/multiprocessing/process.py:88)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769517.089,"dur":0.6,"name":"info (/usr/lib/python3.6/multiprocessing/util.py:52)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769528.289,"dur":0.3,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769587.189,"dur":2.5,"name":"<lambda> (/usr/lib/python3.6/multiprocessing/util.py:246)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769584.889,"dur":5.3,"name":"<listcomp> (/usr/lib/python3.6/multiprocessing/util.py:253)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769594.889,"dur":6.0,"name":"list.sort","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769602.389,"dur":0.6,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769614.189,"dur":1.0,"name":"sub_debug (/usr/lib/python3.6/multiprocessing/util.py:44)","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769641.789,"dur":3.2,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15870,"tid":15865,"ts":14607769651.289,"dur":0.2,"name":"sub_debug (/usr/lib/python3.6/multiprocessing/util.py:44)","ph":"X","cat":"FEE"},{"ph":"M","pid":15865,"tid":15865,"name":"process_name","args":{"name":"MainProcess"}},{"ph":"M","pid":15865,"tid":15876,"name":"thread_name","args":{"name":"Thread-3"}},{"ph":"M","pid":15865,"tid":15875,"name":"thread_name","args":{"name":"Thread-2"}},{"ph":"M","pid":15865,"tid":15874,"name":"thread_name","args":{"name":"Thread-1"}},{"ph":"M","pid":15865,"tid":15865,"name":"thread_name","args":{"name":"MainThread"}},{"pid":15865,"tid":15865,"ts":14607662234.889,"dur":0.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662235.289,"dur":0.1,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662235.589,"dur":0.2,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662234.789,"dur":1.1,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662238.989,"dur":0.3,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662238.689,"dur":0.7,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662240.889,"dur":0.3,"name":"__init__ (<frozen importlib._bootstrap>:143)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662241.789,"dur":0.2,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662243.289,"dur":0.1,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662243.589,"dur":0.1,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662243.089,"dur":0.9,"name":"__init__ (<frozen importlib._bootstrap>:58)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662244.689,"dur":0.1,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662241.589,"dur":3.3,"name":"_get_module_lock (<frozen importlib._bootstrap>:157)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662245.389,"dur":0.1,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662245.289,"dur":1.6,"name":"acquire (<frozen importlib._bootstrap>:78)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662241.489,"dur":5.5,"name":"__enter__ (<frozen importlib._bootstrap>:147)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662247.389,"dur":0.2,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662247.989,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662249.989,"dur":0.1,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662249.889,"dur":0.22,"name":"__enter__ (<frozen importlib._bootstrap>:843)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662250.489,"dur":0.1,"name":"find_spec (<frozen importlib._bootstrap>:707)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662250.889,"dur":0.1,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662250.789,"dur":0.22,"name":"__exit__ (<frozen importlib._bootstrap>:847)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662251.409,"dur":0.08,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662251.389,"dur":0.2,"name":"__enter__ (<frozen importlib._bootstrap>:843)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662251.889,"dur":0.2,"name":"_imp.is_frozen","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662251.789,"dur":0.4,"name":"find_spec (<frozen importlib._bootstrap>:780)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662252.409,"dur":0.08,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662252.389,"dur":0.12,"name":"__exit__ (<frozen importlib._bootstrap>:847)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662252.889,"dur":0.02,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662252.789,"dur":0.2,"name":"__enter__ (<frozen importlib._bootstrap>:843)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662253.789,"dur":0.1,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662254.089,"dur":0.3,"name":"_path_importer_cache (<frozen importlib._bootstrap_external>:1080)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662254.689,"dur":0.2,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662255.289,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662255.989,"dur":2.1,"name":"posix.stat","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662255.689,"dur":2.5,"name":"_path_stat (<frozen importlib._bootstrap_external>:75)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662259.089,"dur":0.1,"name":"_relax_case (<frozen importlib._bootstrap_external>:41)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662260.689,"dur":0.2,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662260.989,"dur":0.2,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662260.389,"dur":0.9,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662261.389,"dur":0.2,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662259.989,"dur":1.8,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662262.189,"dur":0.3,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662263.389,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662263.589,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662263.189,"dur":0.6,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662265.489,"dur":0.2,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662262.989,"dur":2.8,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662266.189,"dur":0.1,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662267.089,"dur":0.02,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662267.289,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662266.889,"dur":0.52,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662267.489,"dur":0.1,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662266.789,"dur":0.9,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662267.889,"dur":0.1,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662268.489,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662268.689,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662268.389,"dur":0.5,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662268.909,"dur":0.18,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662268.289,"dur":0.82,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662269.289,"dur":0.1,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662270.189,"dur":1.9,"name":"posix.stat","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662269.989,"dur":2.2,"name":"_path_stat (<frozen importlib._bootstrap_external>:75)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662269.889,"dur":2.7,"name":"_path_is_mode_type (<frozen importlib._bootstrap_external>:85)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662269.789,"dur":3.0,"name":"_path_isfile (<frozen importlib._bootstrap_external>:94)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662273.389,"dur":0.3,"name":"__init__ (<frozen importlib._bootstrap_external>:800)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662274.189,"dur":0.1,"name":"posix.fspath","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662274.889,"dur":0.5,"name":"__init__ (<frozen importlib._bootstrap>:369)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662273.989,"dur":2.0,"name":"spec_from_file_location (<frozen importlib._bootstrap_external>:524)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662273.089,"dur":3.0,"name":"_get_spec (<frozen importlib._bootstrap_external>:1228)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662255.089,"dur":21.2,"name":"find_spec (<frozen importlib._bootstrap_external>:1233)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662253.389,"dur":23.2,"name":"_get_spec (<frozen importlib._bootstrap_external>:1117)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662253.189,"dur":23.7,"name":"find_spec (<frozen importlib._bootstrap_external>:1149)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662277.289,"dur":0.2,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662277.189,"dur":0.32,"name":"__exit__ (<frozen importlib._bootstrap>:847)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662249.089,"dur":28.9,"name":"_find_spec (<frozen importlib._bootstrap>:870)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662278.489,"dur":0.2,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662278.989,"dur":0.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662279.289,"dur":0.1,"name":"create_module (<frozen importlib._bootstrap_external>:669)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662279.589,"dur":0.7,"name":"_new_module (<frozen importlib._bootstrap>:35)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662280.689,"dur":0.1,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662280.989,"dur":0.1,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662281.389,"dur":0.1,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662281.889,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662281.689,"dur":0.5,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662282.489,"dur":0.8,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662283.489,"dur":0.1,"name":"has_location (<frozen importlib._bootstrap>:424)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662283.689,"dur":0.4,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662284.389,"dur":0.4,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662285.789,"dur":0.2,"name":"str.endswith","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662286.489,"dur":0.02,"name":"posix.fspath","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662286.889,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662287.089,"dur":1.3,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662286.689,"dur":1.9,"name":"_path_split (<frozen importlib._bootstrap_external>:63)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662288.689,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662289.389,"dur":0.2,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662290.989,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662291.289,"dur":0.02,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662291.489,"dur":0.02,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662290.789,"dur":0.8,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662291.689,"dur":0.1,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662290.589,"dur":1.3,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662286.289,"dur":5.7,"name":"cache_from_source (<frozen importlib._bootstrap_external>:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662285.289,"dur":7.0,"name":"_get_cached (<frozen importlib._bootstrap_external>:361)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662284.889,"dur":7.6,"name":"cached (<frozen importlib._bootstrap>:403)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662292.789,"dur":0.2,"name":"cached (<frozen importlib._bootstrap>:403)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662280.489,"dur":12.6,"name":"_init_module_attrs (<frozen importlib._bootstrap>:504)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662278.789,"dur":14.5,"name":"module_from_spec (<frozen importlib._bootstrap>:564)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662293.589,"dur":0.2,"name":"__init__ (<frozen importlib._bootstrap>:307)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662294.089,"dur":0.5,"name":"__enter__ (<frozen importlib._bootstrap>:311)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662295.889,"dur":0.1,"name":"get_filename (<frozen importlib._bootstrap_external>:825)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662295.389,"dur":0.7,"name":"_check_name_wrapper (<frozen importlib._bootstrap_external>:393)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662296.489,"dur":0.02,"name":"posix.fspath","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662296.789,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662296.989,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662296.689,"dur":0.6,"name":"_path_split (<frozen importlib._bootstrap_external>:63)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662297.389,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662297.789,"dur":0.1,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662298.689,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662298.889,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662299.089,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662298.589,"dur":0.62,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662299.289,"dur":0.2,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662298.389,"dur":1.12,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662296.389,"dur":3.2,"name":"cache_from_source (<frozen importlib._bootstrap_external>:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662300.189,"dur":1.6,"name":"posix.stat","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662300.089,"dur":1.8,"name":"_path_stat (<frozen importlib._bootstrap_external>:75)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662299.989,"dur":2.2,"name":"path_stats (<frozen importlib._bootstrap_external>:840)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662306.889,"dur":10.6,"name":"_io.FileIO.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662302.989,"dur":17.2,"name":"get_data (<frozen importlib._bootstrap_external>:830)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662321.889,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662322.089,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662322.889,"dur":0.4,"name":"type.from_bytes","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662322.689,"dur":0.7,"name":"_r_long (<frozen importlib._bootstrap_external>:52)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662323.789,"dur":0.1,"name":"type.from_bytes","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662323.689,"dur":0.22,"name":"_r_long (<frozen importlib._bootstrap_external>:52)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662320.989,"dur":6.4,"name":"_validate_bytecode_header (<frozen importlib._bootstrap_external>:430)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662328.789,"dur":0.4,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662329.589,"dur":140.2,"name":"marshal.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662470.889,"dur":0.2,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662471.589,"dur":0.3,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662472.189,"dur":0.4,"name":"_imp._fix_co_filename","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662329.389,"dur":143.3,"name":"_compile_bytecode (<frozen importlib._bootstrap_external>:485)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662295.089,"dur":177.7,"name":"get_code (<frozen importlib._bootstrap_external>:743)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662478.989,"dur":0.3,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662478.589,"dur":0.9,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662480.389,"dur":0.2,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662480.889,"dur":0.1,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662481.089,"dur":0.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662480.289,"dur":1.1,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662481.889,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662481.789,"dur":0.3,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662482.489,"dur":0.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662482.689,"dur":0.02,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662482.789,"dur":0.4,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662483.289,"dur":0.1,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662483.409,"dur":1.28,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662482.389,"dur":2.32,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662487.689,"dur":0.3,"name":"RemoteTraceback (/usr/lib/python3.6/multiprocessing/pool.py:53)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662487.089,"dur":13.2,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662500.989,"dur":0.2,"name":"ExceptionWithTraceback (/usr/lib/python3.6/multiprocessing/pool.py:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662500.589,"dur":8.4,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662510.989,"dur":0.6,"name":"MaybeEncodingError (/usr/lib/python3.6/multiprocessing/pool.py:76)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662509.389,"dur":12.8,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662524.789,"dur":13.6,"name":"Pool (/usr/lib/python3.6/multiprocessing/pool.py:144)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662524.489,"dur":37.8,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662563.489,"dur":1.0,"name":"ApplyResult (/usr/lib/python3.6/multiprocessing/pool.py:617)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662562.889,"dur":10.4,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662573.989,"dur":23.4,"name":"MapResult (/usr/lib/python3.6/multiprocessing/pool.py:661)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662573.689,"dur":46.9,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662621.289,"dur":0.6,"name":"IMapIterator (/usr/lib/python3.6/multiprocessing/pool.py:702)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662620.889,"dur":7.2,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662628.489,"dur":0.2,"name":"IMapUnorderedIterator (/usr/lib/python3.6/multiprocessing/pool.py:766)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662628.289,"dur":23.3,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662651.989,"dur":1.1,"name":"ThreadPool (/usr/lib/python3.6/multiprocessing/pool.py:780)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662651.789,"dur":9.9,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662474.489,"dur":187.4,"name":"<module> (/usr/lib/python3.6/multiprocessing/pool.py:10)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662474.089,"dur":187.9,"name":"builtins.exec","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662473.989,"dur":188.2,"name":"_call_with_frames_removed (<frozen importlib._bootstrap>:211)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662294.889,"dur":381.3,"name":"exec_module (<frozen importlib._bootstrap_external>:672)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662679.489,"dur":0.3,"name":"<genexpr> (<frozen importlib._bootstrap>:321)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662679.809,"dur":0.18,"name":"<genexpr> (<frozen importlib._bootstrap>:321)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662680.089,"dur":0.02,"name":"<genexpr> (<frozen importlib._bootstrap>:321)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662680.189,"dur":0.1,"name":"<genexpr> (<frozen importlib._bootstrap>:321)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662679.289,"dur":1.3,"name":"builtins.any","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662681.089,"dur":1.4,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662678.489,"dur":4.3,"name":"__exit__ (<frozen importlib._bootstrap>:318)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662278.289,"dur":405.3,"name":"_load_unlocked (<frozen importlib._bootstrap>:651)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662684.289,"dur":0.2,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662684.689,"dur":0.5,"name":"builtins.setattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662247.789,"dur":437.5,"name":"_find_and_load_unlocked (<frozen importlib._bootstrap>:936)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662686.689,"dur":0.2,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662686.389,"dur":2.1,"name":"release (<frozen importlib._bootstrap>:103)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662685.889,"dur":2.7,"name":"__exit__ (<frozen importlib._bootstrap>:151)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662689.089,"dur":0.1,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662689.389,"dur":0.3,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662689.989,"dur":0.1,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662688.889,"dur":1.3,"name":"cb (<frozen importlib._bootstrap>:176)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662240.389,"dur":450.3,"name":"_find_and_load (<frozen importlib._bootstrap>:966)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662691.289,"dur":1.4,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662691.089,"dur":1.62,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662694.189,"dur":1.9,"name":"get_context (/usr/lib/python3.6/multiprocessing/context.py:232)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662699.789,"dur":0.2,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662699.489,"dur":0.7,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662701.489,"dur":0.2,"name":"__init__ (<frozen importlib._bootstrap>:143)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662702.289,"dur":0.1,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662703.689,"dur":0.2,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662703.989,"dur":0.1,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662703.589,"dur":0.7,"name":"__init__ (<frozen importlib._bootstrap>:58)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662704.989,"dur":0.1,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662702.189,"dur":3.0,"name":"_get_module_lock (<frozen importlib._bootstrap>:157)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662705.589,"dur":0.1,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662705.489,"dur":1.5,"name":"acquire (<frozen importlib._bootstrap>:78)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662702.089,"dur":5.0,"name":"__enter__ (<frozen importlib._bootstrap>:147)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662707.489,"dur":0.1,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662707.889,"dur":0.2,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662709.989,"dur":0.02,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662709.889,"dur":0.2,"name":"__enter__ (<frozen importlib._bootstrap>:843)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662710.389,"dur":0.1,"name":"find_spec (<frozen importlib._bootstrap>:707)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662710.789,"dur":0.1,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662710.689,"dur":0.22,"name":"__exit__ (<frozen importlib._bootstrap>:847)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662711.389,"dur":0.02,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662711.289,"dur":0.2,"name":"__enter__ (<frozen importlib._bootstrap>:843)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662711.789,"dur":0.2,"name":"_imp.is_frozen","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662711.589,"dur":0.5,"name":"find_spec (<frozen importlib._bootstrap>:780)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662712.289,"dur":0.02,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662712.189,"dur":0.2,"name":"__exit__ (<frozen importlib._bootstrap>:847)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662712.609,"dur":0.08,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662712.589,"dur":0.2,"name":"__enter__ (<frozen importlib._bootstrap>:843)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662713.789,"dur":0.1,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662714.089,"dur":0.4,"name":"_path_importer_cache (<frozen importlib._bootstrap_external>:1080)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662714.689,"dur":0.3,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662716.389,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662716.989,"dur":3.9,"name":"posix.stat","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662716.789,"dur":4.2,"name":"_path_stat (<frozen importlib._bootstrap_external>:75)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662721.789,"dur":0.1,"name":"_relax_case (<frozen importlib._bootstrap_external>:41)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662723.689,"dur":0.2,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662724.089,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662723.189,"dur":1.1,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662724.489,"dur":0.2,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662722.789,"dur":2.0,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662725.389,"dur":0.3,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662726.489,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662726.689,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662726.389,"dur":0.42,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662726.889,"dur":0.2,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662726.189,"dur":0.92,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662727.389,"dur":0.1,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662728.089,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662728.289,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662727.989,"dur":0.42,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662728.489,"dur":0.1,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662727.889,"dur":0.72,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662728.789,"dur":0.1,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662729.389,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662729.509,"dur":0.18,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662729.289,"dur":0.42,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662729.789,"dur":0.1,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662729.189,"dur":0.72,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662730.089,"dur":0.1,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662730.989,"dur":1.8,"name":"posix.stat","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662730.789,"dur":2.1,"name":"_path_stat (<frozen importlib._bootstrap_external>:75)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662730.689,"dur":2.5,"name":"_path_is_mode_type (<frozen importlib._bootstrap_external>:85)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662730.489,"dur":3.0,"name":"_path_isfile (<frozen importlib._bootstrap_external>:94)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662734.289,"dur":0.2,"name":"__init__ (<frozen importlib._bootstrap_external>:800)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662735.089,"dur":0.2,"name":"posix.fspath","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662735.989,"dur":0.6,"name":"__init__ (<frozen importlib._bootstrap>:369)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662734.889,"dur":2.4,"name":"spec_from_file_location (<frozen importlib._bootstrap_external>:524)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662733.889,"dur":3.5,"name":"_get_spec (<frozen importlib._bootstrap_external>:1228)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662716.189,"dur":21.5,"name":"find_spec (<frozen importlib._bootstrap_external>:1233)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662713.289,"dur":24.7,"name":"_get_spec (<frozen importlib._bootstrap_external>:1117)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662713.089,"dur":25.2,"name":"find_spec (<frozen importlib._bootstrap_external>:1149)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662738.689,"dur":0.02,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662738.489,"dur":0.3,"name":"__exit__ (<frozen importlib._bootstrap>:847)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662708.989,"dur":30.3,"name":"_find_spec (<frozen importlib._bootstrap>:870)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662739.789,"dur":0.2,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662740.289,"dur":0.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662740.589,"dur":0.1,"name":"create_module (<frozen importlib._bootstrap_external>:669)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662740.789,"dur":1.9,"name":"_new_module (<frozen importlib._bootstrap>:35)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662743.089,"dur":0.2,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662743.389,"dur":0.1,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662743.789,"dur":0.1,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662744.289,"dur":0.2,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662744.089,"dur":0.6,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662744.989,"dur":0.9,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662746.189,"dur":0.1,"name":"has_location (<frozen importlib._bootstrap>:424)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662746.389,"dur":0.4,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662747.189,"dur":0.3,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662748.489,"dur":0.3,"name":"str.endswith","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662749.289,"dur":0.1,"name":"posix.fspath","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662749.689,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662749.889,"dur":0.2,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662749.489,"dur":0.8,"name":"_path_split (<frozen importlib._bootstrap_external>:63)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662750.389,"dur":0.2,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662751.089,"dur":0.2,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662752.689,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662752.889,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662753.089,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662752.489,"dur":0.72,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662753.289,"dur":0.1,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662752.289,"dur":1.2,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662749.089,"dur":4.5,"name":"cache_from_source (<frozen importlib._bootstrap_external>:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662747.989,"dur":5.9,"name":"_get_cached (<frozen importlib._bootstrap_external>:361)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662747.589,"dur":6.6,"name":"cached (<frozen importlib._bootstrap>:403)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662754.389,"dur":0.2,"name":"cached (<frozen importlib._bootstrap>:403)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662742.889,"dur":11.8,"name":"_init_module_attrs (<frozen importlib._bootstrap>:504)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662740.089,"dur":14.8,"name":"module_from_spec (<frozen importlib._bootstrap>:564)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662755.189,"dur":0.3,"name":"__init__ (<frozen importlib._bootstrap>:307)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662755.689,"dur":0.5,"name":"__enter__ (<frozen importlib._bootstrap>:311)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662757.589,"dur":0.1,"name":"get_filename (<frozen importlib._bootstrap_external>:825)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662756.989,"dur":0.8,"name":"_check_name_wrapper (<frozen importlib._bootstrap_external>:393)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662758.189,"dur":0.1,"name":"posix.fspath","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662758.489,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662758.689,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662758.389,"dur":0.5,"name":"_path_split (<frozen importlib._bootstrap_external>:63)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662758.989,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662759.489,"dur":0.1,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662760.389,"dur":0.02,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662760.589,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662760.789,"dur":0.02,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662760.289,"dur":0.6,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662760.989,"dur":0.2,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662760.089,"dur":1.12,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662758.089,"dur":3.2,"name":"cache_from_source (<frozen importlib._bootstrap_external>:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662761.989,"dur":1.8,"name":"posix.stat","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662761.889,"dur":3.0,"name":"_path_stat (<frozen importlib._bootstrap_external>:75)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662761.789,"dur":3.4,"name":"path_stats (<frozen importlib._bootstrap_external>:840)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662771.089,"dur":3.8,"name":"_io.FileIO.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662766.189,"dur":11.4,"name":"get_data (<frozen importlib._bootstrap_external>:830)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662779.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662779.589,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662780.389,"dur":0.4,"name":"type.from_bytes","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662780.189,"dur":0.7,"name":"_r_long (<frozen importlib._bootstrap_external>:52)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662781.289,"dur":0.1,"name":"type.from_bytes","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662781.189,"dur":0.3,"name":"_r_long (<frozen importlib._bootstrap_external>:52)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662778.189,"dur":3.8,"name":"_validate_bytecode_header (<frozen importlib._bootstrap_external>:430)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662782.589,"dur":0.2,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662783.189,"dur":47.1,"name":"marshal.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662830.489,"dur":0.2,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662831.089,"dur":0.3,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662831.589,"dur":0.3,"name":"_imp._fix_co_filename","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662783.089,"dur":48.9,"name":"_compile_bytecode (<frozen importlib._bootstrap_external>:485)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662756.689,"dur":75.5,"name":"get_code (<frozen importlib._bootstrap_external>:743)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662837.289,"dur":0.6,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662837.089,"dur":0.9,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662840.889,"dur":0.2,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662840.589,"dur":0.7,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662841.989,"dur":0.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662842.389,"dur":0.02,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662842.589,"dur":0.3,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662841.889,"dur":1.1,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662843.389,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662843.289,"dur":0.3,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662843.889,"dur":0.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662844.009,"dur":0.08,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662844.189,"dur":0.2,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662843.789,"dur":0.7,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662846.489,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662846.389,"dur":0.3,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662847.489,"dur":0.5,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662847.389,"dur":0.7,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662850.989,"dur":3.0,"name":"Queue (/usr/lib/python3.6/multiprocessing/queues.py:34)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662850.589,"dur":13.6,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662865.189,"dur":0.5,"name":"JoinableQueue (/usr/lib/python3.6/multiprocessing/queues.py:269)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662864.789,"dur":10.3,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662875.689,"dur":0.4,"name":"SimpleQueue (/usr/lib/python3.6/multiprocessing/queues.py:311)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662875.389,"dur":7.6,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662833.489,"dur":49.6,"name":"<module> (/usr/lib/python3.6/multiprocessing/queues.py:10)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662833.189,"dur":50.1,"name":"builtins.exec","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662832.989,"dur":50.32,"name":"_call_with_frames_removed (<frozen importlib._bootstrap>:211)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662756.489,"dur":127.1,"name":"exec_module (<frozen importlib._bootstrap_external>:672)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662885.589,"dur":0.2,"name":"<genexpr> (<frozen importlib._bootstrap>:321)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662886.889,"dur":0.2,"name":"<genexpr> (<frozen importlib._bootstrap>:321)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662887.109,"dur":0.08,"name":"<genexpr> (<frozen importlib._bootstrap>:321)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662887.209,"dur":0.08,"name":"<genexpr> (<frozen importlib._bootstrap>:321)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662885.489,"dur":2.0,"name":"builtins.any","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662887.889,"dur":0.4,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662884.789,"dur":3.8,"name":"__exit__ (<frozen importlib._bootstrap>:318)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662739.489,"dur":149.8,"name":"_load_unlocked (<frozen importlib._bootstrap>:651)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662889.689,"dur":0.2,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662890.089,"dur":0.4,"name":"builtins.setattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662707.789,"dur":182.8,"name":"_find_and_load_unlocked (<frozen importlib._bootstrap>:936)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662891.589,"dur":0.3,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662891.489,"dur":1.8,"name":"release (<frozen importlib._bootstrap>:103)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662890.989,"dur":2.4,"name":"__exit__ (<frozen importlib._bootstrap>:151)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662893.889,"dur":0.1,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662894.189,"dur":0.1,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662894.589,"dur":0.1,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662893.689,"dur":1.1,"name":"cb (<frozen importlib._bootstrap>:176)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662701.189,"dur":194.1,"name":"_find_and_load (<frozen importlib._bootstrap>:966)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662895.789,"dur":0.7,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662895.689,"dur":0.9,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662897.889,"dur":0.2,"name":"get_context (/usr/lib/python3.6/multiprocessing/context.py:186)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662902.689,"dur":5.0,"name":"posix.pipe","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662911.289,"dur":2.6,"name":"__init__ (/usr/lib/python3.6/multiprocessing/connection.py:117)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662915.089,"dur":0.5,"name":"__init__ (/usr/lib/python3.6/multiprocessing/connection.py:117)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662902.089,"dur":13.7,"name":"Pipe (/usr/lib/python3.6/multiprocessing/connection.py:501)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662917.289,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662916.989,"dur":0.6,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662918.489,"dur":0.3,"name":"__init__ (<frozen importlib._bootstrap>:143)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662919.489,"dur":0.1,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662920.789,"dur":0.2,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662921.189,"dur":0.1,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662920.689,"dur":0.8,"name":"__init__ (<frozen importlib._bootstrap>:58)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662922.289,"dur":0.02,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662919.289,"dur":3.1,"name":"_get_module_lock (<frozen importlib._bootstrap>:157)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662922.989,"dur":0.1,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662922.789,"dur":1.7,"name":"acquire (<frozen importlib._bootstrap>:78)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662919.089,"dur":5.5,"name":"__enter__ (<frozen importlib._bootstrap>:147)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662924.989,"dur":0.1,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662925.489,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662927.589,"dur":0.02,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662927.389,"dur":0.3,"name":"__enter__ (<frozen importlib._bootstrap>:843)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662927.989,"dur":0.1,"name":"find_spec (<frozen importlib._bootstrap>:707)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662928.389,"dur":0.1,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662928.289,"dur":0.22,"name":"__exit__ (<frozen importlib._bootstrap>:847)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662929.009,"dur":0.08,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662928.989,"dur":0.12,"name":"__enter__ (<frozen importlib._bootstrap>:843)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662930.589,"dur":0.3,"name":"_imp.is_frozen","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662930.489,"dur":0.42,"name":"find_spec (<frozen importlib._bootstrap>:780)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662931.189,"dur":0.02,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662931.089,"dur":0.2,"name":"__exit__ (<frozen importlib._bootstrap>:847)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662931.689,"dur":0.02,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662931.589,"dur":0.2,"name":"__enter__ (<frozen importlib._bootstrap>:843)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662932.689,"dur":0.1,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662932.989,"dur":0.4,"name":"_path_importer_cache (<frozen importlib._bootstrap_external>:1080)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662933.589,"dur":0.2,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662934.189,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662934.789,"dur":2.7,"name":"posix.stat","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662934.589,"dur":3.0,"name":"_path_stat (<frozen importlib._bootstrap_external>:75)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662938.489,"dur":0.1,"name":"_relax_case (<frozen importlib._bootstrap_external>:41)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662939.889,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662940.189,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662939.589,"dur":0.8,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662940.589,"dur":0.2,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662939.189,"dur":1.7,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662941.289,"dur":0.3,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662942.389,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662942.589,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662942.289,"dur":0.42,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662942.789,"dur":0.1,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662942.089,"dur":0.9,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662943.189,"dur":0.1,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662943.889,"dur":0.02,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662944.089,"dur":0.02,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662943.789,"dur":0.4,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662944.289,"dur":0.1,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662943.689,"dur":0.8,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662944.589,"dur":0.1,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662945.289,"dur":0.02,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662945.389,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662945.189,"dur":0.4,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662945.609,"dur":0.08,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662944.989,"dur":0.8,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662945.889,"dur":0.1,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662946.789,"dur":1.6,"name":"posix.stat","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662946.489,"dur":2.0,"name":"_path_stat (<frozen importlib._bootstrap_external>:75)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662946.389,"dur":2.4,"name":"_path_is_mode_type (<frozen importlib._bootstrap_external>:85)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662946.289,"dur":2.8,"name":"_path_isfile (<frozen importlib._bootstrap_external>:94)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662949.889,"dur":0.2,"name":"__init__ (<frozen importlib._bootstrap_external>:800)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662950.689,"dur":0.2,"name":"posix.fspath","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662951.489,"dur":0.6,"name":"__init__ (<frozen importlib._bootstrap>:369)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662950.489,"dur":2.2,"name":"spec_from_file_location (<frozen importlib._bootstrap_external>:524)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662949.389,"dur":3.4,"name":"_get_spec (<frozen importlib._bootstrap_external>:1228)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662933.989,"dur":19.0,"name":"find_spec (<frozen importlib._bootstrap_external>:1233)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662932.289,"dur":22.9,"name":"_get_spec (<frozen importlib._bootstrap_external>:1117)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662931.989,"dur":23.4,"name":"find_spec (<frozen importlib._bootstrap_external>:1149)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662955.889,"dur":0.02,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662955.689,"dur":0.3,"name":"__exit__ (<frozen importlib._bootstrap>:847)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662926.389,"dur":29.9,"name":"_find_spec (<frozen importlib._bootstrap>:870)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662956.789,"dur":0.3,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662957.389,"dur":0.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662957.689,"dur":0.02,"name":"create_module (<frozen importlib._bootstrap_external>:669)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662957.989,"dur":0.7,"name":"_new_module (<frozen importlib._bootstrap>:35)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662959.089,"dur":0.2,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662959.489,"dur":0.1,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662959.889,"dur":0.02,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662960.289,"dur":0.2,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662960.189,"dur":0.4,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662960.889,"dur":0.7,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662961.789,"dur":0.1,"name":"has_location (<frozen importlib._bootstrap>:424)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662961.989,"dur":0.4,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662962.789,"dur":0.3,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662964.189,"dur":0.2,"name":"str.endswith","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662964.889,"dur":0.02,"name":"posix.fspath","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662965.189,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662965.489,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662965.089,"dur":0.7,"name":"_path_split (<frozen importlib._bootstrap_external>:63)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662965.889,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662966.489,"dur":0.2,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662968.089,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662968.289,"dur":0.02,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662968.489,"dur":0.02,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662967.889,"dur":0.7,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662968.689,"dur":0.1,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662967.689,"dur":1.2,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662964.689,"dur":4.3,"name":"cache_from_source (<frozen importlib._bootstrap_external>:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662963.589,"dur":5.6,"name":"_get_cached (<frozen importlib._bootstrap_external>:361)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662963.189,"dur":6.2,"name":"cached (<frozen importlib._bootstrap>:403)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662969.689,"dur":0.1,"name":"cached (<frozen importlib._bootstrap>:403)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662958.889,"dur":11.0,"name":"_init_module_attrs (<frozen importlib._bootstrap>:504)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662957.189,"dur":12.9,"name":"module_from_spec (<frozen importlib._bootstrap>:564)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662970.389,"dur":0.3,"name":"__init__ (<frozen importlib._bootstrap>:307)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662970.889,"dur":0.5,"name":"__enter__ (<frozen importlib._bootstrap>:311)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662972.789,"dur":0.1,"name":"get_filename (<frozen importlib._bootstrap_external>:825)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662972.289,"dur":0.7,"name":"_check_name_wrapper (<frozen importlib._bootstrap_external>:393)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662973.389,"dur":0.1,"name":"posix.fspath","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662973.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662973.889,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662973.589,"dur":0.5,"name":"_path_split (<frozen importlib._bootstrap_external>:63)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662974.289,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662975.589,"dur":0.1,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662976.589,"dur":0.02,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662976.689,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662976.889,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662976.389,"dur":0.7,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662977.109,"dur":0.18,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662976.189,"dur":1.12,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662973.289,"dur":4.2,"name":"cache_from_source (<frozen importlib._bootstrap_external>:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662978.089,"dur":1.5,"name":"posix.stat","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662977.989,"dur":1.7,"name":"_path_stat (<frozen importlib._bootstrap_external>:75)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662977.889,"dur":2.2,"name":"path_stats (<frozen importlib._bootstrap_external>:840)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662984.689,"dur":3.8,"name":"_io.FileIO.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662980.789,"dur":10.5,"name":"get_data (<frozen importlib._bootstrap_external>:830)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662992.889,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662993.089,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662993.889,"dur":0.4,"name":"type.from_bytes","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662993.689,"dur":0.7,"name":"_r_long (<frozen importlib._bootstrap_external>:52)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662994.889,"dur":0.1,"name":"type.from_bytes","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662994.789,"dur":0.22,"name":"_r_long (<frozen importlib._bootstrap_external>:52)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662991.889,"dur":4.0,"name":"_validate_bytecode_header (<frozen importlib._bootstrap_external>:430)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662996.489,"dur":0.2,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662997.089,"dur":54.1,"name":"marshal.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663051.489,"dur":0.2,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663052.089,"dur":0.3,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663052.689,"dur":0.3,"name":"_imp._fix_co_filename","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662996.889,"dur":56.2,"name":"_compile_bytecode (<frozen importlib._bootstrap_external>:485)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662971.989,"dur":81.2,"name":"get_code (<frozen importlib._bootstrap_external>:743)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663059.589,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663059.289,"dur":0.6,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663060.689,"dur":0.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663061.089,"dur":0.1,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663061.289,"dur":0.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663060.489,"dur":1.1,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663061.989,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663061.889,"dur":0.3,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663062.489,"dur":0.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663062.689,"dur":0.02,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663062.889,"dur":0.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663062.389,"dur":0.7,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663063.389,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663063.289,"dur":0.22,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663063.809,"dur":0.18,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663064.089,"dur":0.02,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663064.189,"dur":0.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663063.789,"dur":0.52,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663064.709,"dur":0.58,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663064.689,"dur":0.62,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663071.789,"dur":3.5,"name":"SemLock (/usr/lib/python3.6/multiprocessing/synchronize.py:46)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663071.389,"dur":14.4,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663086.389,"dur":0.4,"name":"Semaphore (/usr/lib/python3.6/multiprocessing/synchronize.py:123)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663086.189,"dur":9.3,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663096.889,"dur":0.3,"name":"BoundedSemaphore (/usr/lib/python3.6/multiprocessing/synchronize.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663095.789,"dur":11.4,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663107.689,"dur":0.3,"name":"Lock (/usr/lib/python3.6/multiprocessing/synchronize.py:159)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663107.489,"dur":8.0,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663116.789,"dur":0.1,"name":"RLock (/usr/lib/python3.6/multiprocessing/synchronize.py:184)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663115.689,"dur":6.7,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663122.789,"dur":0.9,"name":"Condition (/usr/lib/python3.6/multiprocessing/synchronize.py:210)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663122.589,"dur":8.8,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663131.689,"dur":2.2,"name":"Event (/usr/lib/python3.6/multiprocessing/synchronize.py:332)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663131.589,"dur":9.5,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663143.689,"dur":1.0,"name":"property.setter","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663145.189,"dur":0.2,"name":"property.setter","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663142.489,"dur":2.92,"name":"Barrier (/usr/lib/python3.6/multiprocessing/synchronize.py:371)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663142.289,"dur":11.4,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663055.489,"dur":98.3,"name":"<module> (/usr/lib/python3.6/multiprocessing/synchronize.py:11)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663054.389,"dur":99.6,"name":"builtins.exec","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663054.189,"dur":99.82,"name":"_call_with_frames_removed (<frozen importlib._bootstrap>:211)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662971.789,"dur":182.6,"name":"exec_module (<frozen importlib._bootstrap_external>:672)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663157.089,"dur":0.1,"name":"<genexpr> (<frozen importlib._bootstrap>:321)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663157.289,"dur":0.1,"name":"<genexpr> (<frozen importlib._bootstrap>:321)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663157.489,"dur":0.02,"name":"<genexpr> (<frozen importlib._bootstrap>:321)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663157.589,"dur":0.1,"name":"<genexpr> (<frozen importlib._bootstrap>:321)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663156.889,"dur":1.0,"name":"builtins.any","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663158.389,"dur":0.3,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663156.189,"dur":2.9,"name":"__exit__ (<frozen importlib._bootstrap>:318)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662956.589,"dur":203.0,"name":"_load_unlocked (<frozen importlib._bootstrap>:651)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663160.189,"dur":0.2,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663160.489,"dur":0.4,"name":"builtins.setattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662925.289,"dur":235.7,"name":"_find_and_load_unlocked (<frozen importlib._bootstrap>:936)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663162.089,"dur":0.2,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663161.889,"dur":1.6,"name":"release (<frozen importlib._bootstrap>:103)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663161.489,"dur":2.1,"name":"__exit__ (<frozen importlib._bootstrap>:151)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663164.089,"dur":0.1,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663164.389,"dur":0.2,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663164.889,"dur":0.1,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663163.989,"dur":1.02,"name":"cb (<frozen importlib._bootstrap>:176)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662918.289,"dur":247.2,"name":"_find_and_load (<frozen importlib._bootstrap>:966)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663165.989,"dur":0.6,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663165.889,"dur":0.8,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663167.189,"dur":0.2,"name":"get_context (/usr/lib/python3.6/multiprocessing/context.py:186)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663168.989,"dur":0.3,"name":"get_start_method (/usr/lib/python3.6/multiprocessing/context.py:196)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663171.489,"dur":0.3,"name":"current_process (/usr/lib/python3.6/multiprocessing/process.py:35)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663176.889,"dur":1.2,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663178.289,"dur":0.7,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663233.889,"dur":0.5,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663235.289,"dur":47.2,"name":"Random.seed","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663233.089,"dur":50.7,"name":"seed (/usr/lib/python3.6/random.py:96)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663231.689,"dur":52.3,"name":"__init__ (/usr/lib/python3.6/random.py:87)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663176.389,"dur":108.9,"name":"rng (/usr/lib/python3.6/tempfile.py:285)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663289.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663290.689,"dur":0.2,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663290.989,"dur":0.9,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663289.689,"dur":2.4,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663288.289,"dur":4.1,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663292.789,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663293.289,"dur":0.02,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663293.389,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663293.689,"dur":0.02,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663292.989,"dur":0.9,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663292.689,"dur":1.3,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663294.189,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663294.489,"dur":0.1,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663294.689,"dur":0.02,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663294.309,"dur":0.48,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663294.089,"dur":0.9,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663295.189,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663295.489,"dur":0.02,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663295.529,"dur":0.06,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663295.289,"dur":0.4,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663295.089,"dur":0.7,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663295.989,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663296.189,"dur":0.1,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663296.309,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663296.089,"dur":0.32,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663295.889,"dur":0.7,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663296.809,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663297.089,"dur":0.1,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663297.209,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663297.309,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663297.489,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663297.609,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663297.789,"dur":0.02,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663297.889,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663298.009,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663298.109,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663296.989,"dur":1.3,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663296.789,"dur":1.6,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663298.509,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663298.789,"dur":0.02,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663299.689,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663298.609,"dur":1.28,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663298.489,"dur":1.5,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663300.189,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663300.389,"dur":0.1,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663300.509,"dur":0.02,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663300.589,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663300.709,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663300.289,"dur":0.6,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663300.089,"dur":0.9,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663287.689,"dur":13.4,"name":"<listcomp> (/usr/lib/python3.6/tempfile.py:299)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663301.389,"dur":0.3,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663175.089,"dur":126.7,"name":"__next__ (/usr/lib/python3.6/tempfile.py:296)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663172.789,"dur":129.4,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663170.689,"dur":132.1,"name":"_make_name (/usr/lib/python3.6/multiprocessing/synchronize.py:114)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663338.789,"dur":0.4,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663340.289,"dur":0.7,"name":"_make_methods (/usr/lib/python3.6/multiprocessing/synchronize.py:90)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663342.089,"dur":0.3,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663342.489,"dur":0.1,"name":"builtins.id","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663345.489,"dur":0.3,"name":"type.__new__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663345.189,"dur":1.0,"name":"__new__ (/usr/lib/python3.6/weakref.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663346.489,"dur":0.9,"name":"__init__ (/usr/lib/python3.6/weakref.py:339)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663343.789,"dur":4.2,"name":"__setitem__ (/usr/lib/python3.6/weakref.py:165)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663341.789,"dur":6.3,"name":"register_after_fork (/usr/lib/python3.6/multiprocessing/util.py:136)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663168.589,"dur":180.0,"name":"__init__ (/usr/lib/python3.6/multiprocessing/synchronize.py:50)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663168.089,"dur":180.7,"name":"__init__ (/usr/lib/python3.6/multiprocessing/synchronize.py:161)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662916.589,"dur":432.6,"name":"Lock (/usr/lib/python3.6/multiprocessing/context.py:64)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663351.089,"dur":0.3,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663350.789,"dur":0.8,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663352.789,"dur":0.7,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663352.689,"dur":0.9,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663353.889,"dur":0.1,"name":"get_context (/usr/lib/python3.6/multiprocessing/context.py:186)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663354.989,"dur":0.2,"name":"get_start_method (/usr/lib/python3.6/multiprocessing/context.py:196)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663356.389,"dur":0.1,"name":"current_process (/usr/lib/python3.6/multiprocessing/process.py:35)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663357.689,"dur":0.4,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663358.189,"dur":0.2,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663357.489,"dur":1.1,"name":"rng (/usr/lib/python3.6/tempfile.py:285)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663359.589,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663360.189,"dur":0.1,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663360.309,"dur":0.18,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663360.589,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663360.709,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663359.789,"dur":1.1,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663359.389,"dur":1.6,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663361.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663361.589,"dur":0.02,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663361.689,"dur":1.4,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663361.409,"dur":1.78,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663361.189,"dur":2.1,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663363.489,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663363.789,"dur":0.02,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663363.889,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663364.009,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663363.609,"dur":0.58,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663363.389,"dur":0.9,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663364.409,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663364.689,"dur":0.1,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663364.809,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663364.589,"dur":0.32,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663364.389,"dur":0.6,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663365.189,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663365.489,"dur":0.02,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663365.529,"dur":0.06,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663365.289,"dur":0.4,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663365.089,"dur":0.7,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663365.989,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663366.189,"dur":0.1,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663366.309,"dur":0.02,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663366.089,"dur":0.3,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663365.889,"dur":0.6,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663366.609,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663366.889,"dur":0.1,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663367.009,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663367.109,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663366.789,"dur":0.42,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663366.589,"dur":0.8,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663367.589,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663367.789,"dur":0.1,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663367.909,"dur":0.02,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663367.689,"dur":0.3,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663367.489,"dur":0.6,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663359.189,"dur":9.0,"name":"<listcomp> (/usr/lib/python3.6/tempfile.py:299)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663368.489,"dur":0.2,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663357.289,"dur":11.42,"name":"__next__ (/usr/lib/python3.6/tempfile.py:296)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663356.889,"dur":12.2,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663356.089,"dur":13.4,"name":"_make_name (/usr/lib/python3.6/multiprocessing/synchronize.py:114)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663453.489,"dur":0.3,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663454.089,"dur":0.5,"name":"_make_methods (/usr/lib/python3.6/multiprocessing/synchronize.py:90)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663455.489,"dur":0.3,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663455.889,"dur":0.1,"name":"builtins.id","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663457.589,"dur":0.4,"name":"type.__new__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663457.389,"dur":0.9,"name":"__new__ (/usr/lib/python3.6/weakref.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663458.589,"dur":0.9,"name":"__init__ (/usr/lib/python3.6/weakref.py:339)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663456.789,"dur":4.3,"name":"__setitem__ (/usr/lib/python3.6/weakref.py:165)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663455.289,"dur":5.9,"name":"register_after_fork (/usr/lib/python3.6/multiprocessing/util.py:136)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663354.789,"dur":106.8,"name":"__init__ (/usr/lib/python3.6/multiprocessing/synchronize.py:50)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663354.489,"dur":107.3,"name":"__init__ (/usr/lib/python3.6/multiprocessing/synchronize.py:161)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663350.289,"dur":111.8,"name":"Lock (/usr/lib/python3.6/multiprocessing/context.py:64)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662899.689,"dur":562.7,"name":"__init__ (/usr/lib/python3.6/multiprocessing/queues.py:313)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662698.989,"dur":763.7,"name":"SimpleQueue (/usr/lib/python3.6/multiprocessing/context.py:109)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663464.189,"dur":0.3,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663463.889,"dur":0.9,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663466.189,"dur":0.9,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663466.089,"dur":1.1,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663467.589,"dur":0.1,"name":"get_context (/usr/lib/python3.6/multiprocessing/context.py:186)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663468.989,"dur":2.7,"name":"posix.pipe","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663472.489,"dur":0.9,"name":"__init__ (/usr/lib/python3.6/multiprocessing/connection.py:117)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663473.789,"dur":0.4,"name":"__init__ (/usr/lib/python3.6/multiprocessing/connection.py:117)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663468.689,"dur":5.7,"name":"Pipe (/usr/lib/python3.6/multiprocessing/connection.py:501)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663475.289,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663475.089,"dur":0.5,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663476.289,"dur":0.5,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663476.189,"dur":0.7,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663477.089,"dur":0.1,"name":"get_context (/usr/lib/python3.6/multiprocessing/context.py:186)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663477.989,"dur":0.1,"name":"get_start_method (/usr/lib/python3.6/multiprocessing/context.py:196)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663479.689,"dur":0.1,"name":"current_process (/usr/lib/python3.6/multiprocessing/process.py:35)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663480.989,"dur":0.4,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663481.589,"dur":0.1,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663480.889,"dur":1.0,"name":"rng (/usr/lib/python3.6/tempfile.py:285)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663482.989,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663483.789,"dur":0.1,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663483.989,"dur":0.3,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663483.289,"dur":1.2,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663482.889,"dur":1.8,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663485.089,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663485.489,"dur":0.1,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663485.609,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663485.789,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663485.189,"dur":0.8,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663484.889,"dur":1.2,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663486.389,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663486.689,"dur":0.02,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663486.789,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663486.989,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663487.109,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663486.489,"dur":0.8,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663486.289,"dur":1.1,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663487.589,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663487.889,"dur":0.02,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663487.989,"dur":1.2,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663489.289,"dur":0.02,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663487.689,"dur":1.7,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663487.489,"dur":2.1,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663489.789,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663490.089,"dur":0.02,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663490.129,"dur":0.06,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663489.889,"dur":0.4,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663489.689,"dur":0.7,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663490.689,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663490.989,"dur":0.02,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663491.029,"dur":0.06,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663491.189,"dur":0.02,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663491.289,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663491.409,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663490.789,"dur":0.72,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663490.589,"dur":1.0,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663491.789,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663492.089,"dur":0.02,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663492.129,"dur":0.06,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663491.889,"dur":0.4,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663491.689,"dur":0.7,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663492.589,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663492.789,"dur":0.02,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663492.889,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663492.689,"dur":0.32,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663492.489,"dur":0.7,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663482.489,"dur":10.72,"name":"<listcomp> (/usr/lib/python3.6/tempfile.py:299)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663493.489,"dur":0.3,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663480.589,"dur":13.22,"name":"__next__ (/usr/lib/python3.6/tempfile.py:296)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663480.089,"dur":14.1,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663479.389,"dur":15.3,"name":"_make_name (/usr/lib/python3.6/multiprocessing/synchronize.py:114)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663507.889,"dur":0.2,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663508.389,"dur":0.3,"name":"_make_methods (/usr/lib/python3.6/multiprocessing/synchronize.py:90)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663509.389,"dur":0.2,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663509.689,"dur":0.02,"name":"builtins.id","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663510.889,"dur":0.2,"name":"type.__new__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663510.689,"dur":0.6,"name":"__new__ (/usr/lib/python3.6/weakref.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663511.489,"dur":0.6,"name":"__init__ (/usr/lib/python3.6/weakref.py:339)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663510.289,"dur":2.2,"name":"__setitem__ (/usr/lib/python3.6/weakref.py:165)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663509.189,"dur":3.5,"name":"register_after_fork (/usr/lib/python3.6/multiprocessing/util.py:136)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663477.789,"dur":35.1,"name":"__init__ (/usr/lib/python3.6/multiprocessing/synchronize.py:50)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663477.489,"dur":35.6,"name":"__init__ (/usr/lib/python3.6/multiprocessing/synchronize.py:161)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663474.789,"dur":38.5,"name":"Lock (/usr/lib/python3.6/multiprocessing/context.py:64)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663514.589,"dur":0.2,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663514.389,"dur":0.6,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663515.689,"dur":0.5,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663515.589,"dur":1.6,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663517.489,"dur":0.1,"name":"get_context (/usr/lib/python3.6/multiprocessing/context.py:186)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663518.489,"dur":0.1,"name":"get_start_method (/usr/lib/python3.6/multiprocessing/context.py:196)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663519.689,"dur":0.1,"name":"current_process (/usr/lib/python3.6/multiprocessing/process.py:35)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663520.689,"dur":0.3,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663521.089,"dur":0.1,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663520.589,"dur":0.7,"name":"rng (/usr/lib/python3.6/tempfile.py:285)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663522.089,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663522.689,"dur":0.02,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663522.789,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663522.289,"dur":0.7,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663521.989,"dur":1.2,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663523.389,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663523.589,"dur":0.02,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663523.689,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663523.809,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663523.489,"dur":0.5,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663523.289,"dur":0.72,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663524.289,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663524.489,"dur":0.1,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663524.609,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663524.389,"dur":0.32,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663524.189,"dur":0.7,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663525.089,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663525.289,"dur":0.1,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663525.409,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663525.189,"dur":0.32,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663524.989,"dur":0.6,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663534.589,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663535.589,"dur":0.1,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663535.789,"dur":0.3,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663535.089,"dur":1.3,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663533.989,"dur":2.7,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663537.189,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663537.589,"dur":0.1,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663537.789,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663537.989,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663537.389,"dur":0.8,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663537.089,"dur":1.2,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663538.589,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663538.989,"dur":0.1,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663539.109,"dur":0.08,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663539.289,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663539.489,"dur":0.02,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663539.689,"dur":0.02,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663539.789,"dur":0.02,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663538.789,"dur":1.1,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663538.489,"dur":3.1,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663541.889,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663542.289,"dur":0.02,"name":"int.bit_length","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663542.389,"dur":0.1,"name":"Random.getrandbits","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663541.989,"dur":0.6,"name":"_randbelow (/usr/lib/python3.6/random.py:223)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663541.789,"dur":0.9,"name":"choice (/usr/lib/python3.6/random.py:255)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663521.789,"dur":21.0,"name":"<listcomp> (/usr/lib/python3.6/tempfile.py:299)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663543.089,"dur":0.3,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663520.389,"dur":23.02,"name":"__next__ (/usr/lib/python3.6/tempfile.py:296)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663520.089,"dur":23.7,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663519.489,"dur":24.9,"name":"_make_name (/usr/lib/python3.6/multiprocessing/synchronize.py:114)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663560.189,"dur":0.2,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663560.689,"dur":0.4,"name":"_make_methods (/usr/lib/python3.6/multiprocessing/synchronize.py:90)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663561.789,"dur":0.2,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663562.009,"dur":0.08,"name":"builtins.id","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663563.389,"dur":0.3,"name":"type.__new__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663563.189,"dur":0.7,"name":"__new__ (/usr/lib/python3.6/weakref.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663564.089,"dur":0.7,"name":"__init__ (/usr/lib/python3.6/weakref.py:339)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663562.789,"dur":2.5,"name":"__setitem__ (/usr/lib/python3.6/weakref.py:165)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663561.589,"dur":3.8,"name":"register_after_fork (/usr/lib/python3.6/multiprocessing/util.py:136)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663518.289,"dur":47.4,"name":"__init__ (/usr/lib/python3.6/multiprocessing/synchronize.py:50)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663517.989,"dur":47.9,"name":"__init__ (/usr/lib/python3.6/multiprocessing/synchronize.py:161)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663513.989,"dur":52.1,"name":"Lock (/usr/lib/python3.6/multiprocessing/context.py:64)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663468.289,"dur":98.1,"name":"__init__ (/usr/lib/python3.6/multiprocessing/queues.py:313)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663463.389,"dur":103.1,"name":"SimpleQueue (/usr/lib/python3.6/multiprocessing/context.py:109)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662698.289,"dur":869.5,"name":"_setup_queues (/usr/lib/python3.6/multiprocessing/pool.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663572.689,"dur":0.9,"name":"_init (/usr/lib/python3.6/queue.py:199)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663573.889,"dur":0.2,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663576.789,"dur":4.0,"name":"__init__ (/usr/lib/python3.6/threading.py:215)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663581.289,"dur":1.5,"name":"__init__ (/usr/lib/python3.6/threading.py:215)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663583.289,"dur":1.5,"name":"__init__ (/usr/lib/python3.6/threading.py:215)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663571.389,"dur":15.0,"name":"__init__ (/usr/lib/python3.6/queue.py:27)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663588.689,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663593.889,"dur":0.1,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663595.489,"dur":1.0,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663596.889,"dur":0.3,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663600.889,"dur":0.6,"name":"<genexpr> (/usr/lib/python3.6/multiprocessing/process.py:83)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663601.589,"dur":0.1,"name":"<genexpr> (/usr/lib/python3.6/multiprocessing/process.py:83)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663600.289,"dur":1.8,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663604.689,"dur":0.2,"name":"set.add","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663603.589,"dur":1.4,"name":"add (/usr/lib/python3.6/_weakrefset.py:81)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663592.789,"dur":12.6,"name":"__init__ (/usr/lib/python3.6/multiprocessing/process.py:71)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663590.689,"dur":15.0,"name":"Process (/usr/lib/python3.6/multiprocessing/pool.py:150)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663606.189,"dur":0.02,"name":"list.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663606.889,"dur":0.2,"name":"name (/usr/lib/python3.6/multiprocessing/process.py:146)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663607.189,"dur":0.7,"name":"str.replace","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663609.689,"dur":0.1,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663609.489,"dur":0.6,"name":"name (/usr/lib/python3.6/multiprocessing/process.py:150)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663610.689,"dur":0.3,"name":"daemon (/usr/lib/python3.6/multiprocessing/process.py:162)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663612.689,"dur":0.1,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663613.089,"dur":0.2,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663613.589,"dur":1.0,"name":"_cleanup (/usr/lib/python3.6/multiprocessing/process.py:52)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663615.689,"dur":0.3,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663615.489,"dur":0.7,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663617.389,"dur":0.4,"name":"__init__ (<frozen importlib._bootstrap>:143)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663618.489,"dur":0.2,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663619.889,"dur":0.1,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663620.189,"dur":0.2,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663619.689,"dur":1.0,"name":"__init__ (<frozen importlib._bootstrap>:58)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663621.389,"dur":0.1,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663618.289,"dur":3.3,"name":"_get_module_lock (<frozen importlib._bootstrap>:157)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663622.089,"dur":0.2,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663621.989,"dur":1.8,"name":"acquire (<frozen importlib._bootstrap>:78)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663618.089,"dur":5.8,"name":"__enter__ (<frozen importlib._bootstrap>:147)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663624.289,"dur":0.1,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663624.789,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663626.989,"dur":0.1,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663626.889,"dur":0.22,"name":"__enter__ (<frozen importlib._bootstrap>:843)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663627.489,"dur":0.1,"name":"find_spec (<frozen importlib._bootstrap>:707)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663627.889,"dur":0.02,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663627.789,"dur":0.2,"name":"__exit__ (<frozen importlib._bootstrap>:847)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663628.509,"dur":0.08,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663628.489,"dur":0.2,"name":"__enter__ (<frozen importlib._bootstrap>:843)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663628.989,"dur":0.3,"name":"_imp.is_frozen","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663628.889,"dur":0.5,"name":"find_spec (<frozen importlib._bootstrap>:780)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663629.589,"dur":0.1,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663629.489,"dur":0.22,"name":"__exit__ (<frozen importlib._bootstrap>:847)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663629.989,"dur":0.02,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663629.889,"dur":0.2,"name":"__enter__ (<frozen importlib._bootstrap>:843)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663631.389,"dur":0.1,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663631.689,"dur":0.3,"name":"_path_importer_cache (<frozen importlib._bootstrap_external>:1080)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663632.289,"dur":0.2,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663632.889,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663633.589,"dur":3.5,"name":"posix.stat","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663633.289,"dur":3.9,"name":"_path_stat (<frozen importlib._bootstrap_external>:75)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663638.089,"dur":0.1,"name":"_relax_case (<frozen importlib._bootstrap_external>:41)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663639.589,"dur":0.2,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663639.989,"dur":0.2,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663639.389,"dur":0.9,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663640.389,"dur":0.2,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663638.989,"dur":1.7,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663641.289,"dur":0.2,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663642.489,"dur":0.02,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663643.589,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663642.289,"dur":1.5,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663643.809,"dur":0.18,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663642.089,"dur":2.0,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663644.389,"dur":0.2,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663645.209,"dur":0.18,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663645.489,"dur":0.02,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663645.189,"dur":0.4,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663645.689,"dur":0.1,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663644.989,"dur":0.82,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663646.089,"dur":0.1,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663646.789,"dur":0.02,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663646.889,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663646.689,"dur":0.4,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663647.109,"dur":0.08,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663646.489,"dur":0.8,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663647.489,"dur":0.1,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663648.189,"dur":2.0,"name":"posix.stat","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663648.089,"dur":2.2,"name":"_path_stat (<frozen importlib._bootstrap_external>:75)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663647.989,"dur":2.7,"name":"_path_is_mode_type (<frozen importlib._bootstrap_external>:85)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663647.789,"dur":3.2,"name":"_path_isfile (<frozen importlib._bootstrap_external>:94)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663651.889,"dur":0.3,"name":"__init__ (<frozen importlib._bootstrap_external>:800)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663652.789,"dur":0.2,"name":"posix.fspath","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663653.589,"dur":0.6,"name":"__init__ (<frozen importlib._bootstrap>:369)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663652.489,"dur":2.3,"name":"spec_from_file_location (<frozen importlib._bootstrap_external>:524)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663651.389,"dur":3.5,"name":"_get_spec (<frozen importlib._bootstrap_external>:1228)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663632.689,"dur":22.4,"name":"find_spec (<frozen importlib._bootstrap_external>:1233)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663630.889,"dur":24.6,"name":"_get_spec (<frozen importlib._bootstrap_external>:1117)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663630.489,"dur":25.3,"name":"find_spec (<frozen importlib._bootstrap_external>:1149)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663656.189,"dur":0.1,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663655.989,"dur":0.32,"name":"__exit__ (<frozen importlib._bootstrap>:847)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663625.989,"dur":30.7,"name":"_find_spec (<frozen importlib._bootstrap>:870)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663657.189,"dur":0.2,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663657.789,"dur":0.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663658.089,"dur":0.02,"name":"create_module (<frozen importlib._bootstrap_external>:669)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663658.389,"dur":0.7,"name":"_new_module (<frozen importlib._bootstrap>:35)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663659.489,"dur":0.2,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663659.789,"dur":0.1,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663660.189,"dur":0.2,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663660.689,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663660.589,"dur":0.4,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663661.289,"dur":0.7,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663662.189,"dur":0.1,"name":"has_location (<frozen importlib._bootstrap>:424)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663662.389,"dur":0.4,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663663.289,"dur":0.3,"name":"builtins.getattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663664.689,"dur":0.2,"name":"str.endswith","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663667.589,"dur":0.1,"name":"posix.fspath","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663667.989,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663668.289,"dur":0.2,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663667.889,"dur":0.7,"name":"_path_split (<frozen importlib._bootstrap_external>:63)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663668.789,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663669.389,"dur":0.2,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663670.989,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663671.189,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663671.389,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663670.889,"dur":0.62,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663671.689,"dur":0.1,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663670.589,"dur":1.3,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663667.389,"dur":4.6,"name":"cache_from_source (<frozen importlib._bootstrap_external>:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663664.189,"dur":8.0,"name":"_get_cached (<frozen importlib._bootstrap_external>:361)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663663.689,"dur":8.8,"name":"cached (<frozen importlib._bootstrap>:403)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663672.689,"dur":0.2,"name":"cached (<frozen importlib._bootstrap>:403)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663659.289,"dur":13.7,"name":"_init_module_attrs (<frozen importlib._bootstrap>:504)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663657.589,"dur":15.5,"name":"module_from_spec (<frozen importlib._bootstrap>:564)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663673.389,"dur":0.3,"name":"__init__ (<frozen importlib._bootstrap>:307)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663673.889,"dur":0.5,"name":"__enter__ (<frozen importlib._bootstrap>:311)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663675.889,"dur":0.02,"name":"get_filename (<frozen importlib._bootstrap_external>:825)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663675.289,"dur":0.7,"name":"_check_name_wrapper (<frozen importlib._bootstrap_external>:393)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663676.489,"dur":0.1,"name":"posix.fspath","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663676.789,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663676.989,"dur":0.1,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663676.609,"dur":0.58,"name":"_path_split (<frozen importlib._bootstrap_external>:63)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663677.389,"dur":0.02,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663677.789,"dur":0.02,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663678.689,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663678.889,"dur":0.02,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663678.989,"dur":0.1,"name":"str.rstrip","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663678.589,"dur":0.6,"name":"<listcomp> (<frozen importlib._bootstrap_external>:59)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663679.209,"dur":0.08,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663678.389,"dur":1.0,"name":"_path_join (<frozen importlib._bootstrap_external>:57)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663676.289,"dur":3.2,"name":"cache_from_source (<frozen importlib._bootstrap_external>:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663679.989,"dur":1.6,"name":"posix.stat","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663679.889,"dur":1.8,"name":"_path_stat (<frozen importlib._bootstrap_external>:75)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663679.789,"dur":2.3,"name":"path_stats (<frozen importlib._bootstrap_external>:840)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663687.489,"dur":2.6,"name":"_io.FileIO.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663683.089,"dur":9.6,"name":"get_data (<frozen importlib._bootstrap_external>:830)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663694.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663694.589,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663695.489,"dur":0.3,"name":"type.from_bytes","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663695.189,"dur":0.7,"name":"_r_long (<frozen importlib._bootstrap_external>:52)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663696.489,"dur":0.1,"name":"type.from_bytes","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663696.389,"dur":0.22,"name":"_r_long (<frozen importlib._bootstrap_external>:52)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663693.389,"dur":3.7,"name":"_validate_bytecode_header (<frozen importlib._bootstrap_external>:430)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663698.689,"dur":0.3,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663699.389,"dur":15.4,"name":"marshal.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663715.089,"dur":0.1,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663715.589,"dur":0.2,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663716.089,"dur":0.2,"name":"_imp._fix_co_filename","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663699.289,"dur":17.1,"name":"_compile_bytecode (<frozen importlib._bootstrap_external>:485)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663674.889,"dur":41.7,"name":"get_code (<frozen importlib._bootstrap_external>:743)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663720.389,"dur":0.2,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663720.089,"dur":0.7,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663721.589,"dur":0.2,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663721.989,"dur":0.1,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663722.289,"dur":0.2,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663721.489,"dur":1.1,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663723.689,"dur":1.1,"name":"Popen (/usr/lib/python3.6/multiprocessing/popen_fork.py:13)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663723.289,"dur":11.8,"name":"builtins.__build_class__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663717.989,"dur":17.2,"name":"<module> (/usr/lib/python3.6/multiprocessing/popen_fork.py:1)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663717.589,"dur":17.8,"name":"builtins.exec","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663717.389,"dur":18.02,"name":"_call_with_frames_removed (<frozen importlib._bootstrap>:211)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663674.689,"dur":60.9,"name":"exec_module (<frozen importlib._bootstrap_external>:672)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663737.189,"dur":0.2,"name":"<genexpr> (<frozen importlib._bootstrap>:321)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663737.489,"dur":0.1,"name":"<genexpr> (<frozen importlib._bootstrap>:321)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663737.609,"dur":0.08,"name":"<genexpr> (<frozen importlib._bootstrap>:321)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663737.789,"dur":0.1,"name":"<genexpr> (<frozen importlib._bootstrap>:321)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663737.089,"dur":0.9,"name":"builtins.any","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663738.489,"dur":0.2,"name":"_verbose_message (<frozen importlib._bootstrap>:222)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663736.489,"dur":2.4,"name":"__exit__ (<frozen importlib._bootstrap>:318)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663656.989,"dur":82.4,"name":"_load_unlocked (<frozen importlib._bootstrap>:651)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663739.889,"dur":0.2,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663740.189,"dur":0.4,"name":"builtins.setattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663624.689,"dur":116.0,"name":"_find_and_load_unlocked (<frozen importlib._bootstrap>:936)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663741.589,"dur":0.2,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663741.489,"dur":1.6,"name":"release (<frozen importlib._bootstrap>:103)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663741.089,"dur":2.1,"name":"__exit__ (<frozen importlib._bootstrap>:151)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663743.689,"dur":0.02,"name":"_imp.acquire_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663743.889,"dur":0.2,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663744.389,"dur":0.1,"name":"_imp.release_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663743.489,"dur":1.02,"name":"cb (<frozen importlib._bootstrap>:176)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663617.089,"dur":127.9,"name":"_find_and_load (<frozen importlib._bootstrap>:966)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663745.489,"dur":0.6,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663745.389,"dur":0.8,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663748.889,"dur":1.9,"name":"_io.TextIOWrapper.flush","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663751.089,"dur":0.2,"name":"_io.TextIOWrapper.flush","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663748.189,"dur":3.2,"name":"_flush_std_streams (/usr/lib/python3.6/multiprocessing/util.py:395)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663752.389,"dur":2.3,"name":"posix.pipe","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663754.989,"dur":518.8,"name":"posix.fork","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664314.289,"dur":8.4,"name":"posix.close","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664384.389,"dur":1.7,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664390.189,"dur":0.5,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664353.989,"dur":44.2,"name":"__init__ (/usr/lib/python3.6/multiprocessing/util.py:151)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663752.089,"dur":652.3,"name":"_launch (/usr/lib/python3.6/multiprocessing/popen_fork.py:63)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663746.689,"dur":663.9,"name":"__init__ (/usr/lib/python3.6/multiprocessing/popen_fork.py:16)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663614.889,"dur":799.7,"name":"_Popen (/usr/lib/python3.6/multiprocessing/context.py:274)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664455.889,"dur":0.2,"name":"set.add","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663612.189,"dur":844.1,"name":"start (/usr/lib/python3.6/multiprocessing/process.py:95)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664470.089,"dur":0.4,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664685.789,"dur":0.6,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664690.389,"dur":3.7,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664694.689,"dur":0.5,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664711.389,"dur":1.0,"name":"<genexpr> (/usr/lib/python3.6/multiprocessing/process.py:83)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664712.589,"dur":0.1,"name":"<genexpr> (/usr/lib/python3.6/multiprocessing/process.py:83)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664710.789,"dur":3.2,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664730.089,"dur":0.3,"name":"set.add","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664723.589,"dur":6.9,"name":"add (/usr/lib/python3.6/_weakrefset.py:81)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664683.189,"dur":49.7,"name":"__init__ (/usr/lib/python3.6/multiprocessing/process.py:71)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664488.989,"dur":244.5,"name":"Process (/usr/lib/python3.6/multiprocessing/pool.py:150)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664734.289,"dur":0.1,"name":"list.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664740.489,"dur":0.4,"name":"name (/usr/lib/python3.6/multiprocessing/process.py:146)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664741.189,"dur":1.0,"name":"str.replace","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664742.889,"dur":0.2,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664742.589,"dur":0.7,"name":"name (/usr/lib/python3.6/multiprocessing/process.py:150)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664747.089,"dur":0.6,"name":"daemon (/usr/lib/python3.6/multiprocessing/process.py:162)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664748.589,"dur":0.4,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664749.589,"dur":0.2,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664760.189,"dur":2.9,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664757.489,"dur":6.0,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664749.989,"dur":13.9,"name":"_cleanup (/usr/lib/python3.6/multiprocessing/process.py:52)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664776.689,"dur":0.5,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664773.789,"dur":3.8,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664786.489,"dur":6.8,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664784.589,"dur":8.9,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664808.789,"dur":8.1,"name":"_io.TextIOWrapper.flush","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664817.589,"dur":2.2,"name":"_io.TextIOWrapper.flush","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664798.689,"dur":21.3,"name":"_flush_std_streams (/usr/lib/python3.6/multiprocessing/util.py:395)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664821.289,"dur":3.6,"name":"posix.pipe","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664825.189,"dur":434.1,"name":"posix.fork","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665287.689,"dur":5.6,"name":"posix.close","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665335.389,"dur":0.6,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665339.889,"dur":0.5,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665310.289,"dur":32.5,"name":"__init__ (/usr/lib/python3.6/multiprocessing/util.py:151)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664820.889,"dur":527.6,"name":"_launch (/usr/lib/python3.6/multiprocessing/popen_fork.py:63)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664794.589,"dur":562.2,"name":"__init__ (/usr/lib/python3.6/multiprocessing/popen_fork.py:16)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664764.389,"dur":596.5,"name":"_Popen (/usr/lib/python3.6/multiprocessing/context.py:274)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665392.489,"dur":0.3,"name":"set.add","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607664748.089,"dur":645.9,"name":"start (/usr/lib/python3.6/multiprocessing/process.py:95)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665408.689,"dur":0.4,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665439.689,"dur":0.3,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665448.289,"dur":2.1,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665450.989,"dur":0.3,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665470.489,"dur":1.0,"name":"<genexpr> (/usr/lib/python3.6/multiprocessing/process.py:83)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665471.589,"dur":0.1,"name":"<genexpr> (/usr/lib/python3.6/multiprocessing/process.py:83)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665468.289,"dur":4.7,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665490.089,"dur":0.3,"name":"set.add","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665483.289,"dur":7.2,"name":"add (/usr/lib/python3.6/_weakrefset.py:81)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665437.589,"dur":54.9,"name":"__init__ (/usr/lib/python3.6/multiprocessing/process.py:71)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665427.689,"dur":65.3,"name":"Process (/usr/lib/python3.6/multiprocessing/pool.py:150)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665493.589,"dur":0.1,"name":"list.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665499.089,"dur":0.3,"name":"name (/usr/lib/python3.6/multiprocessing/process.py:146)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665499.689,"dur":0.9,"name":"str.replace","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665501.189,"dur":0.2,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665500.989,"dur":0.5,"name":"name (/usr/lib/python3.6/multiprocessing/process.py:150)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665505.189,"dur":0.5,"name":"daemon (/usr/lib/python3.6/multiprocessing/process.py:162)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665506.589,"dur":0.4,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665507.489,"dur":0.2,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665514.889,"dur":2.1,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665512.389,"dur":5.1,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665518.189,"dur":0.4,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665517.989,"dur":0.7,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665507.989,"dur":11.0,"name":"_cleanup (/usr/lib/python3.6/multiprocessing/process.py:52)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665556.989,"dur":0.6,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665553.089,"dur":5.1,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665585.489,"dur":8.2,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665567.789,"dur":26.1,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665609.189,"dur":5.6,"name":"_io.TextIOWrapper.flush","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665615.389,"dur":2.0,"name":"_io.TextIOWrapper.flush","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665599.389,"dur":18.2,"name":"_flush_std_streams (/usr/lib/python3.6/multiprocessing/util.py:395)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665621.089,"dur":4.1,"name":"posix.pipe","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665625.489,"dur":338.2,"name":"posix.fork","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665994.789,"dur":5.5,"name":"posix.close","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666041.789,"dur":0.5,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666046.889,"dur":0.4,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666017.689,"dur":31.9,"name":"__init__ (/usr/lib/python3.6/multiprocessing/util.py:151)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665620.589,"dur":434.9,"name":"_launch (/usr/lib/python3.6/multiprocessing/popen_fork.py:63)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665595.289,"dur":466.8,"name":"__init__ (/usr/lib/python3.6/multiprocessing/popen_fork.py:16)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665519.389,"dur":546.7,"name":"_Popen (/usr/lib/python3.6/multiprocessing/context.py:274)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666096.789,"dur":0.2,"name":"set.add","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607665506.189,"dur":590.9,"name":"start (/usr/lib/python3.6/multiprocessing/process.py:95)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666114.789,"dur":0.4,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666145.589,"dur":0.4,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666151.789,"dur":2.0,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666154.389,"dur":1.5,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666173.789,"dur":1.1,"name":"<genexpr> (/usr/lib/python3.6/multiprocessing/process.py:83)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666174.989,"dur":0.1,"name":"<genexpr> (/usr/lib/python3.6/multiprocessing/process.py:83)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666173.289,"dur":3.0,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666190.589,"dur":0.3,"name":"set.add","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666184.289,"dur":6.7,"name":"add (/usr/lib/python3.6/_weakrefset.py:81)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666143.689,"dur":50.0,"name":"__init__ (/usr/lib/python3.6/multiprocessing/process.py:71)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666133.989,"dur":60.2,"name":"Process (/usr/lib/python3.6/multiprocessing/pool.py:150)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666194.889,"dur":0.1,"name":"list.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666200.689,"dur":0.3,"name":"name (/usr/lib/python3.6/multiprocessing/process.py:146)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666201.289,"dur":0.8,"name":"str.replace","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666202.789,"dur":0.1,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666202.489,"dur":0.6,"name":"name (/usr/lib/python3.6/multiprocessing/process.py:150)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666206.789,"dur":0.5,"name":"daemon (/usr/lib/python3.6/multiprocessing/process.py:162)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666208.089,"dur":0.4,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666208.989,"dur":0.2,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666216.289,"dur":2.0,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666213.789,"dur":4.9,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666219.389,"dur":0.5,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666219.289,"dur":0.7,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666220.289,"dur":0.4,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666220.189,"dur":0.6,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666209.389,"dur":11.6,"name":"_cleanup (/usr/lib/python3.6/multiprocessing/process.py:52)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666233.189,"dur":0.4,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666230.389,"dur":3.6,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666245.589,"dur":11.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666243.589,"dur":13.3,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666271.089,"dur":6.5,"name":"_io.TextIOWrapper.flush","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666278.089,"dur":2.2,"name":"_io.TextIOWrapper.flush","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666262.089,"dur":18.4,"name":"_flush_std_streams (/usr/lib/python3.6/multiprocessing/util.py:395)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666283.589,"dur":3.1,"name":"posix.pipe","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666286.989,"dur":473.7,"name":"posix.fork","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666790.689,"dur":5.4,"name":"posix.close","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666842.289,"dur":0.5,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666847.089,"dur":0.4,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666812.789,"dur":38.1,"name":"__init__ (/usr/lib/python3.6/multiprocessing/util.py:151)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666283.189,"dur":573.5,"name":"_launch (/usr/lib/python3.6/multiprocessing/popen_fork.py:63)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666258.089,"dur":605.1,"name":"__init__ (/usr/lib/python3.6/multiprocessing/popen_fork.py:16)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666221.489,"dur":645.9,"name":"_Popen (/usr/lib/python3.6/multiprocessing/context.py:274)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666896.089,"dur":0.3,"name":"set.add","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666207.689,"dur":688.9,"name":"start (/usr/lib/python3.6/multiprocessing/process.py:95)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666912.289,"dur":0.4,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666943.489,"dur":0.4,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666948.889,"dur":3.7,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666953.189,"dur":0.4,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666973.789,"dur":1.1,"name":"<genexpr> (/usr/lib/python3.6/multiprocessing/process.py:83)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666974.909,"dur":0.18,"name":"<genexpr> (/usr/lib/python3.6/multiprocessing/process.py:83)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666973.189,"dur":4.0,"name":"str.join","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666990.589,"dur":3.2,"name":"set.add","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666984.589,"dur":9.4,"name":"add (/usr/lib/python3.6/_weakrefset.py:81)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666941.589,"dur":54.4,"name":"__init__ (/usr/lib/python3.6/multiprocessing/process.py:71)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666931.189,"dur":65.3,"name":"Process (/usr/lib/python3.6/multiprocessing/pool.py:150)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607666997.189,"dur":0.3,"name":"list.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667003.589,"dur":0.3,"name":"name (/usr/lib/python3.6/multiprocessing/process.py:146)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667004.189,"dur":0.8,"name":"str.replace","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667005.789,"dur":0.1,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667005.489,"dur":0.6,"name":"name (/usr/lib/python3.6/multiprocessing/process.py:150)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667009.789,"dur":0.5,"name":"daemon (/usr/lib/python3.6/multiprocessing/process.py:162)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667011.089,"dur":0.4,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667012.089,"dur":0.2,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667019.289,"dur":1.9,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667016.889,"dur":4.8,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667022.389,"dur":0.4,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667022.189,"dur":0.7,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667023.189,"dur":0.3,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667023.089,"dur":0.5,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667023.789,"dur":0.6,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667023.689,"dur":0.72,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667012.389,"dur":12.3,"name":"_cleanup (/usr/lib/python3.6/multiprocessing/process.py:52)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667036.789,"dur":0.5,"name":"str.rpartition","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667033.989,"dur":3.7,"name":"parent (<frozen importlib._bootstrap>:416)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667049.289,"dur":8.5,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667047.289,"dur":10.7,"name":"_handle_fromlist (<frozen importlib._bootstrap>:997)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667071.589,"dur":6.4,"name":"_io.TextIOWrapper.flush","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667078.489,"dur":2.0,"name":"_io.TextIOWrapper.flush","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667062.989,"dur":17.6,"name":"_flush_std_streams (/usr/lib/python3.6/multiprocessing/util.py:395)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667083.589,"dur":3.2,"name":"posix.pipe","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667086.989,"dur":345.7,"name":"posix.fork","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667464.689,"dur":5.4,"name":"posix.close","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667580.689,"dur":0.7,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667584.489,"dur":0.5,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667525.889,"dur":61.8,"name":"__init__ (/usr/lib/python3.6/multiprocessing/util.py:151)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667083.289,"dur":509.4,"name":"_launch (/usr/lib/python3.6/multiprocessing/popen_fork.py:63)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667058.989,"dur":542.7,"name":"__init__ (/usr/lib/python3.6/multiprocessing/popen_fork.py:16)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667025.189,"dur":594.4,"name":"_Popen (/usr/lib/python3.6/multiprocessing/context.py:274)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667650.989,"dur":2.3,"name":"set.add","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667010.789,"dur":642.8,"name":"start (/usr/lib/python3.6/multiprocessing/process.py:95)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667669.389,"dur":0.4,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607663588.389,"dur":4083.5,"name":"_repopulate_pool (/usr/lib/python3.6/multiprocessing/pool.py:225)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667725.689,"dur":6.0,"name":"_newname (/usr/lib/python3.6/threading.py:727)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667743.489,"dur":0.4,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667742.589,"dur":3.3,"name":"current_thread (/usr/lib/python3.6/threading.py:1230)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667751.389,"dur":0.6,"name":"daemon (/usr/lib/python3.6/threading.py:1120)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667771.489,"dur":2.7,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667778.689,"dur":17.0,"name":"__init__ (/usr/lib/python3.6/threading.py:215)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667769.189,"dur":30.6,"name":"__init__ (/usr/lib/python3.6/threading.py:498)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667815.989,"dur":0.2,"name":"set.add","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667811.989,"dur":4.4,"name":"add (/usr/lib/python3.6/_weakrefset.py:81)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667713.189,"dur":104.0,"name":"__init__ (/usr/lib/python3.6/threading.py:757)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667829.189,"dur":0.2,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667822.689,"dur":7.2,"name":"daemon (/usr/lib/python3.6/threading.py:1136)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667836.889,"dur":0.2,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667842.189,"dur":83.4,"name":"_thread.start_new_thread","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667934.689,"dur":0.5,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667933.889,"dur":1.5,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667943.889,"dur":1.0,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667943.489,"dur":1.6,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667945.689,"dur":0.8,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667946.689,"dur":0.02,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667952.489,"dur":0.3,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667955.789,"dur":0.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667955.389,"dur":0.6,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668070.589,"dur":0.3,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668070.389,"dur":0.8,"name":"current_thread (/usr/lib/python3.6/threading.py:1230)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668080.389,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668092.989,"dur":15.2,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668090.189,"dur":18.9,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668087.589,"dur":21.8,"name":"exitcode (/usr/lib/python3.6/multiprocessing/process.py:181)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668111.589,"dur":0.8,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668111.189,"dur":1.4,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668110.689,"dur":1.92,"name":"exitcode (/usr/lib/python3.6/multiprocessing/process.py:181)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668113.189,"dur":0.4,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668112.989,"dur":0.7,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668112.789,"dur":1.0,"name":"exitcode (/usr/lib/python3.6/multiprocessing/process.py:181)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668114.289,"dur":0.3,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668114.089,"dur":0.6,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668113.989,"dur":0.8,"name":"exitcode (/usr/lib/python3.6/multiprocessing/process.py:181)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668115.289,"dur":0.4,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668115.189,"dur":0.6,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668114.989,"dur":0.82,"name":"exitcode (/usr/lib/python3.6/multiprocessing/process.py:181)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668077.089,"dur":39.0,"name":"_join_exited_workers (/usr/lib/python3.6/multiprocessing/pool.py:210)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668074.589,"dur":41.6,"name":"_maintain_pool (/usr/lib/python3.6/multiprocessing/pool.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667956.289,"dur":189.3,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668148.189,"dur":0.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668147.689,"dur":1.0,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667941.589,"dur":207.4,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668150.489,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668150.289,"dur":0.4,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667928.489,"dur":222.4,"name":"wait (/usr/lib/python3.6/threading.py:533)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607667836.389,"dur":314.8,"name":"start (/usr/lib/python3.6/threading.py:828)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668164.489,"dur":1.4,"name":"_newname (/usr/lib/python3.6/threading.py:727)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668167.189,"dur":0.2,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668166.889,"dur":1.1,"name":"current_thread (/usr/lib/python3.6/threading.py:1230)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668168.289,"dur":0.4,"name":"daemon (/usr/lib/python3.6/threading.py:1120)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668169.389,"dur":0.3,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668169.889,"dur":3.7,"name":"__init__ (/usr/lib/python3.6/threading.py:215)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668169.189,"dur":4.6,"name":"__init__ (/usr/lib/python3.6/threading.py:498)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668175.789,"dur":0.2,"name":"set.add","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668174.989,"dur":1.1,"name":"add (/usr/lib/python3.6/_weakrefset.py:81)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668163.189,"dur":13.0,"name":"__init__ (/usr/lib/python3.6/threading.py:757)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668177.589,"dur":0.1,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668177.289,"dur":0.5,"name":"daemon (/usr/lib/python3.6/threading.py:1136)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668178.489,"dur":0.02,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668179.789,"dur":40.4,"name":"_thread.start_new_thread","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668222.989,"dur":0.4,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668222.589,"dur":0.9,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668224.389,"dur":0.6,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668224.189,"dur":0.9,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668225.189,"dur":1.5,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668226.789,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668227.289,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668227.789,"dur":0.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668227.589,"dur":0.32,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668315.289,"dur":0.1,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668314.989,"dur":0.6,"name":"current_thread (/usr/lib/python3.6/threading.py:1230)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668322.289,"dur":0.6,"name":"builtins.iter","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668331.389,"dur":2.5,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668330.789,"dur":3.4,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668343.889,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668341.089,"dur":3.1,"name":"_qsize (/usr/lib/python3.6/queue.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668348.889,"dur":0.6,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668348.389,"dur":1.3,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668349.789,"dur":0.2,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668350.089,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668350.489,"dur":2.7,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668353.989,"dur":0.2,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668353.789,"dur":0.5,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668228.189,"dur":182.3,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668412.489,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668411.989,"dur":1.1,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668223.989,"dur":189.4,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668414.889,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668414.689,"dur":0.4,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668221.789,"dur":193.6,"name":"wait (/usr/lib/python3.6/threading.py:533)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668178.289,"dur":237.3,"name":"start (/usr/lib/python3.6/threading.py:828)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668424.489,"dur":1.4,"name":"_newname (/usr/lib/python3.6/threading.py:727)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668427.089,"dur":0.2,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668426.889,"dur":2.5,"name":"current_thread (/usr/lib/python3.6/threading.py:1230)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668429.789,"dur":0.4,"name":"daemon (/usr/lib/python3.6/threading.py:1120)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668430.989,"dur":0.4,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668433.889,"dur":4.1,"name":"__init__ (/usr/lib/python3.6/threading.py:215)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668430.789,"dur":7.6,"name":"__init__ (/usr/lib/python3.6/threading.py:498)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668440.689,"dur":0.2,"name":"set.add","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668439.789,"dur":1.2,"name":"add (/usr/lib/python3.6/_weakrefset.py:81)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668423.189,"dur":17.9,"name":"__init__ (/usr/lib/python3.6/threading.py:757)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668442.489,"dur":0.1,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668442.189,"dur":0.6,"name":"daemon (/usr/lib/python3.6/threading.py:1136)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668443.289,"dur":0.1,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668444.789,"dur":42.0,"name":"_thread.start_new_thread","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668489.689,"dur":0.4,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668489.289,"dur":1.0,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668491.189,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668490.989,"dur":0.8,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668491.989,"dur":1.4,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668493.489,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668493.889,"dur":0.2,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668494.389,"dur":0.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668494.289,"dur":0.3,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607668608.989,"dur":0.2,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607668608.789,"dur":0.6,"name":"current_thread (/usr/lib/python3.6/threading.py:1230)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607668617.089,"dur":1.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607668628.489,"dur":0.3,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668494.789,"dur":197.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668695.189,"dur":1.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668694.389,"dur":2.4,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668490.689,"dur":206.4,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668698.889,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668698.589,"dur":0.5,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668488.389,"dur":211.0,"name":"wait (/usr/lib/python3.6/threading.py:533)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668443.189,"dur":256.4,"name":"start (/usr/lib/python3.6/threading.py:828)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668708.989,"dur":0.4,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668709.989,"dur":0.7,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668703.289,"dur":8.6,"name":"__init__ (/usr/lib/python3.6/multiprocessing/util.py:151)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662697.689,"dur":6015.0,"name":"__init__ (/usr/lib/python3.6/multiprocessing/pool.py:153)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662238.189,"dur":6486.3,"name":"Pool (/usr/lib/python3.6/multiprocessing/context.py:114)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668740.589,"dur":0.2,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/pool.py:607)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668747.889,"dur":3.5,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668751.889,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668752.389,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668753.089,"dur":0.6,"name":"builtins.divmod","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668754.089,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668755.389,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668766.889,"dur":0.5,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668771.189,"dur":4.5,"name":"__init__ (/usr/lib/python3.6/threading.py:215)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668766.589,"dur":9.5,"name":"__init__ (/usr/lib/python3.6/threading.py:498)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668779.489,"dur":0.3,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668765.589,"dur":16.2,"name":"__init__ (/usr/lib/python3.6/multiprocessing/pool.py:619)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668761.889,"dur":24.1,"name":"__init__ (/usr/lib/python3.6/multiprocessing/pool.py:663)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668793.889,"dur":0.3,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668793.389,"dur":0.9,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668798.089,"dur":2.3,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668797.789,"dur":2.8,"name":"_put (/usr/lib/python3.6/queue.py:206)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668828.689,"dur":0.7,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668828.489,"dur":1.0,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668832.489,"dur":16.2,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668849.389,"dur":0.2,"name":"collections.deque.remove","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668828.189,"dur":21.8,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668852.289,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668851.789,"dur":0.7,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668792.589,"dur":60.3,"name":"put (/usr/lib/python3.6/queue.py:115)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668747.189,"dur":106.0,"name":"_map_async (/usr/lib/python3.6/multiprocessing/pool.py:368)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668855.489,"dur":0.3,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668855.289,"dur":0.6,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668856.589,"dur":0.3,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668856.489,"dur":0.5,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668857.189,"dur":0.2,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668857.489,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668857.789,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668858.189,"dur":0.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668858.089,"dur":0.22,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668354.489,"dur":546.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668902.789,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668902.389,"dur":1.1,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668348.189,"dur":555.6,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668905.189,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668904.789,"dur":0.7,"name":"_qsize (/usr/lib/python3.6/queue.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668910.989,"dur":0.2,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668910.389,"dur":0.9,"name":"_get (/usr/lib/python3.6/queue.py:210)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668912.689,"dur":0.7,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668912.489,"dur":1.1,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668912.189,"dur":4.8,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668917.989,"dur":0.2,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668917.789,"dur":0.42,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668327.389,"dur":591.1,"name":"get (/usr/lib/python3.6/queue.py:147)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668945.789,"dur":0.4,"name":"builtins.iter","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668923.189,"dur":30.8,"name":"_get_tasks (/usr/lib/python3.6/multiprocessing/pool.py:517)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668919.389,"dur":35.1,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668955.989,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668956.789,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669055.489,"dur":6.2,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669063.989,"dur":10.4,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668981.789,"dur":92.8,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669075.589,"dur":33.2,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669111.189,"dur":0.9,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668961.489,"dur":150.7,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669113.189,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669119.789,"dur":6.6,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669132.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669132.589,"dur":20.0,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669131.989,"dur":21.5,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669112.789,"dur":41.1,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668955.489,"dur":199.3,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669155.789,"dur":2.6,"name":"_get_tasks (/usr/lib/python3.6/multiprocessing/pool.py:517)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669155.289,"dur":3.4,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669159.989,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669160.389,"dur":0.2,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669165.489,"dur":0.5,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669166.489,"dur":0.8,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669162.589,"dur":4.8,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669167.689,"dur":7.1,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669175.589,"dur":0.3,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669161.189,"dur":14.8,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669176.389,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669176.789,"dur":0.6,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669177.989,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669178.189,"dur":1.7,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669177.889,"dur":2.2,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669176.189,"dur":4.0,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669159.589,"dur":20.9,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669180.689,"dur":0.8,"name":"_get_tasks (/usr/lib/python3.6/multiprocessing/pool.py:517)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669180.589,"dur":1.2,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669182.289,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669182.589,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669184.389,"dur":0.2,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669184.789,"dur":0.3,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669183.289,"dur":1.9,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669185.389,"dur":2.8,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669188.489,"dur":0.2,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669182.789,"dur":5.92,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669188.989,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669189.189,"dur":0.2,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669189.809,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669189.989,"dur":0.8,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669189.789,"dur":1.2,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669188.889,"dur":2.12,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669182.189,"dur":9.1,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669193.789,"dur":0.8,"name":"_get_tasks (/usr/lib/python3.6/multiprocessing/pool.py:517)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669193.689,"dur":1.1,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669195.189,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669195.389,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669196.989,"dur":0.1,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669197.289,"dur":0.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669196.189,"dur":1.4,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669197.789,"dur":3.5,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669201.689,"dur":0.1,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669195.689,"dur":6.2,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669202.189,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669202.389,"dur":0.2,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669202.909,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669203.089,"dur":0.7,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669202.889,"dur":1.1,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669202.089,"dur":1.92,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669194.989,"dur":9.2,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669204.489,"dur":0.5,"name":"_get_tasks (/usr/lib/python3.6/multiprocessing/pool.py:517)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669204.289,"dur":0.9,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669205.589,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669205.789,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669207.089,"dur":0.1,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669207.389,"dur":0.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669206.389,"dur":1.22,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669207.889,"dur":2.1,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669210.289,"dur":0.1,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669205.989,"dur":4.5,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669210.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669210.889,"dur":0.2,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669211.389,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669211.589,"dur":0.6,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669211.289,"dur":1.1,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669210.589,"dur":1.82,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669205.389,"dur":7.2,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669212.789,"dur":0.5,"name":"_get_tasks (/usr/lib/python3.6/multiprocessing/pool.py:517)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669212.689,"dur":0.7,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669213.689,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669213.889,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669215.089,"dur":0.1,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669215.289,"dur":0.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669214.489,"dur":1.1,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669215.789,"dur":2.0,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669218.089,"dur":0.1,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669214.189,"dur":25.0,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669239.389,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669239.589,"dur":0.2,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669240.089,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669241.389,"dur":0.7,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669239.989,"dur":2.2,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669239.289,"dur":3.0,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669213.589,"dur":28.9,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669242.689,"dur":0.6,"name":"_get_tasks (/usr/lib/python3.6/multiprocessing/pool.py:517)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669242.589,"dur":0.8,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669243.689,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669243.889,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669245.089,"dur":0.1,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669245.389,"dur":0.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669244.489,"dur":1.12,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669245.789,"dur":2.0,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669248.089,"dur":0.2,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669244.189,"dur":4.12,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669248.589,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669263.189,"dur":0.2,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669263.689,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669263.789,"dur":0.6,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669263.589,"dur":1.0,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669248.489,"dur":16.2,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669243.589,"dur":21.2,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669264.989,"dur":0.5,"name":"_get_tasks (/usr/lib/python3.6/multiprocessing/pool.py:517)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669264.889,"dur":0.7,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669265.889,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669266.089,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669267.289,"dur":0.1,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669267.489,"dur":0.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669266.689,"dur":1.1,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669267.989,"dur":2.1,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669270.389,"dur":0.2,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669266.389,"dur":4.22,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669270.809,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669271.089,"dur":0.1,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669271.589,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669271.689,"dur":0.6,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669271.489,"dur":17.5,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669270.789,"dur":18.3,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669265.789,"dur":23.4,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669289.389,"dur":0.5,"name":"_get_tasks (/usr/lib/python3.6/multiprocessing/pool.py:517)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669289.289,"dur":0.7,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669290.389,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669290.509,"dur":0.18,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669291.989,"dur":0.2,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669292.289,"dur":0.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669291.089,"dur":1.5,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669292.689,"dur":2.1,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669294.989,"dur":1.3,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669290.789,"dur":5.52,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669296.589,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669296.889,"dur":0.1,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669297.309,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669297.489,"dur":0.7,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669297.289,"dur":1.0,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669296.489,"dur":1.9,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669290.289,"dur":8.2,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669298.789,"dur":0.5,"name":"_get_tasks (/usr/lib/python3.6/multiprocessing/pool.py:517)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669298.689,"dur":14.7,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669313.689,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669313.889,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669315.089,"dur":0.2,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669315.389,"dur":0.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669314.489,"dur":1.2,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669315.889,"dur":2.0,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669318.189,"dur":0.1,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669314.189,"dur":4.12,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669318.589,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669318.789,"dur":0.1,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669319.189,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669319.289,"dur":0.6,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669319.089,"dur":1.0,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669318.489,"dur":1.7,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669313.589,"dur":6.7,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669320.489,"dur":0.7,"name":"_get_tasks (/usr/lib/python3.6/multiprocessing/pool.py:517)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669320.389,"dur":1.3,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669342.389,"dur":0.4,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669341.989,"dur":0.82,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669343.489,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669343.289,"dur":0.5,"name":"_qsize (/usr/lib/python3.6/queue.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669344.489,"dur":0.3,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669344.389,"dur":0.5,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669344.989,"dur":0.3,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669345.389,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669345.789,"dur":0.2,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669346.289,"dur":0.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669346.189,"dur":0.3,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607668661.689,"dur":1109.9,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669772.289,"dur":0.3,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669773.389,"dur":0.4,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607668635.689,"dur":1138.6,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669776.089,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669776.309,"dur":0.88,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669779.389,"dur":1.7,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669781.189,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669783.989,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669778.089,"dur":6.2,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607668631.389,"dur":1153.1,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669789.589,"dur":0.7,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669790.389,"dur":8.8,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607668611.789,"dur":1187.8,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669806.089,"dur":3.2,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:676)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669810.389,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669810.889,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669812.289,"dur":97.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669910.489,"dur":0.3,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669911.589,"dur":0.4,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669811.589,"dur":101.0,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669913.689,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669913.889,"dur":0.9,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669916.989,"dur":1.6,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669918.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669918.989,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669915.689,"dur":3.5,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669811.289,"dur":108.1,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669919.989,"dur":0.5,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669920.589,"dur":1.9,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669810.089,"dur":112.7,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669924.089,"dur":1.5,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:676)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669926.389,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669926.789,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669927.889,"dur":134.9,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670063.589,"dur":0.3,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670064.589,"dur":0.4,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669927.389,"dur":138.2,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670066.689,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670066.909,"dur":0.88,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670069.989,"dur":1.6,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670071.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670071.989,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670068.789,"dur":3.4,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669927.189,"dur":145.1,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670072.989,"dur":0.5,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670073.589,"dur":1.9,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607669926.089,"dur":149.6,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670076.989,"dur":1.5,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:676)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670079.289,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670079.689,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670080.689,"dur":114.7,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670196.189,"dur":0.3,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670197.289,"dur":0.4,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670080.289,"dur":120.5,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670202.089,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670202.389,"dur":0.9,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670205.489,"dur":1.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670207.189,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670207.389,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670204.289,"dur":3.3,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670080.089,"dur":127.7,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670208.389,"dur":0.5,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670208.989,"dur":1.9,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670079.089,"dur":132.0,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670212.589,"dur":1.4,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:676)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670214.789,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670215.289,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670216.389,"dur":0.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670216.989,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670217.189,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670215.789,"dur":1.6,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670217.689,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670217.889,"dur":0.2,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670218.489,"dur":0.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670218.989,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670219.189,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670218.289,"dur":1.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670215.589,"dur":3.9,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670219.689,"dur":0.1,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670219.889,"dur":4.3,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670214.589,"dur":9.9,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670225.489,"dur":0.8,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:676)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670226.889,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670227.289,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670228.389,"dur":1.1,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670229.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670229.989,"dur":0.02,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670227.789,"dur":2.4,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670230.589,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670230.709,"dur":0.38,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670231.489,"dur":0.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670232.009,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670232.189,"dur":0.02,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670231.289,"dur":1.0,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670227.589,"dur":4.8,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670232.589,"dur":0.1,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670232.709,"dur":0.68,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670226.689,"dur":6.8,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670233.789,"dur":0.4,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:676)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670234.489,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670236.289,"dur":0.02,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670236.789,"dur":0.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670237.389,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670237.489,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670236.589,"dur":1.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670237.889,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670238.009,"dur":0.18,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670238.489,"dur":0.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670239.089,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670239.189,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670238.289,"dur":1.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670236.489,"dur":2.92,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670239.589,"dur":0.2,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670239.809,"dur":0.48,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670234.389,"dur":6.0,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670240.689,"dur":0.4,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:676)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670241.289,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670241.489,"dur":0.02,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670241.989,"dur":6.0,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670248.089,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670248.289,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670241.689,"dur":6.8,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670248.789,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670248.909,"dur":0.18,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670249.389,"dur":0.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670249.989,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670250.109,"dur":0.08,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670249.189,"dur":1.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670241.589,"dur":8.8,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670250.589,"dur":0.2,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670250.889,"dur":0.6,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670241.189,"dur":10.5,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670251.989,"dur":0.4,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:676)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670252.589,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670252.789,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670253.389,"dur":99.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670353.589,"dur":0.3,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670354.589,"dur":0.4,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670253.089,"dur":102.5,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670356.689,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670356.889,"dur":0.8,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670359.789,"dur":1.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670361.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670361.589,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670358.689,"dur":3.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670252.989,"dur":109.0,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670362.489,"dur":3.0,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670365.509,"dur":1.98,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670252.489,"dur":115.3,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670369.189,"dur":1.4,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:676)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670371.389,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670371.789,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670372.789,"dur":0.6,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670373.489,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670373.689,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670372.389,"dur":1.5,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670374.189,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670374.389,"dur":0.2,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670374.989,"dur":0.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670375.589,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670375.789,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670374.789,"dur":1.2,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670372.189,"dur":3.82,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670376.289,"dur":0.2,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670376.509,"dur":0.58,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670371.089,"dur":6.1,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670379.689,"dur":0.5,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670379.389,"dur":0.9,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670380.989,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670381.889,"dur":0.3,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670381.689,"dur":0.6,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670385.089,"dur":32.2,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670417.989,"dur":0.2,"name":"collections.deque.remove","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670381.289,"dur":37.3,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670380.689,"dur":38.3,"name":"notify_all (/usr/lib/python3.6/threading.py:357)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670420.389,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670419.989,"dur":0.6,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670378.889,"dur":41.9,"name":"set (/usr/lib/python3.6/threading.py:512)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670377.589,"dur":43.4,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:676)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670421.689,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670422.089,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668858.589,"dur":1576.7,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670437.989,"dur":0.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670437.389,"dur":1.2,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668856.289,"dur":1582.6,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670440.489,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670440.189,"dur":0.5,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668854.989,"dur":1585.9,"name":"wait (/usr/lib/python3.6/threading.py:533)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668854.589,"dur":1586.5,"name":"wait (/usr/lib/python3.6/multiprocessing/pool.py:634)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670442.889,"dur":0.1,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670442.189,"dur":0.9,"name":"ready (/usr/lib/python3.6/multiprocessing/pool.py:627)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668854.089,"dur":1589.3,"name":"get (/usr/lib/python3.6/multiprocessing/pool.py:637)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607668746.189,"dur":1698.2,"name":"map (/usr/lib/python3.6/multiprocessing/pool.py:261)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670461.389,"dur":52.4,"name":"builtins.print","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670523.189,"dur":0.5,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670524.189,"dur":4.0,"name":"__init__ (/usr/lib/python3.6/threading.py:215)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670531.889,"dur":0.4,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670521.589,"dur":20.3,"name":"__init__ (/usr/lib/python3.6/multiprocessing/pool.py:704)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670547.789,"dur":0.5,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670547.289,"dur":1.2,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670549.489,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670549.289,"dur":0.4,"name":"_put (/usr/lib/python3.6/queue.py:206)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670550.889,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670550.689,"dur":0.8,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670553.089,"dur":13.7,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670567.289,"dur":0.3,"name":"collections.deque.remove","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670550.489,"dur":17.4,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670569.789,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670569.489,"dur":0.5,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670546.389,"dur":24.0,"name":"put (/usr/lib/python3.6/queue.py:115)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670519.489,"dur":51.1,"name":"imap_unordered (/usr/lib/python3.6/multiprocessing/pool.py:322)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670571.289,"dur":0.1,"name":"__iter__ (/usr/lib/python3.6/multiprocessing/pool.py:714)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670580.289,"dur":0.4,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670579.889,"dur":1.0,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670581.189,"dur":0.5,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670583.989,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670583.889,"dur":0.7,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670584.689,"dur":0.3,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670585.189,"dur":0.02,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670585.489,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670585.889,"dur":0.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670585.789,"dur":0.22,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669346.689,"dur":1274.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670623.489,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670622.989,"dur":1.1,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669344.089,"dur":1280.3,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670625.889,"dur":0.3,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670625.489,"dur":0.72,"name":"_qsize (/usr/lib/python3.6/queue.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670626.989,"dur":13.5,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670626.789,"dur":13.8,"name":"_get (/usr/lib/python3.6/queue.py:210)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670641.689,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670641.489,"dur":0.8,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670641.189,"dur":2.7,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670644.889,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670644.589,"dur":0.5,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607669341.189,"dur":1304.1,"name":"get (/usr/lib/python3.6/queue.py:147)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670646.289,"dur":1.3,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670648.489,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670649.189,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670654.389,"dur":0.4,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670657.989,"dur":0.7,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670651.489,"dur":7.4,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670659.189,"dur":6.3,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670666.189,"dur":0.5,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670649.989,"dur":16.72,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670667.189,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670667.689,"dur":0.7,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670669.189,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670669.489,"dur":16.8,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670669.089,"dur":17.9,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670666.989,"dur":20.4,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670648.289,"dur":39.6,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670688.289,"dur":0.7,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670689.989,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670690.389,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670694.289,"dur":0.3,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670694.989,"dur":0.6,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670692.089,"dur":3.6,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670695.889,"dur":4.4,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670700.889,"dur":0.3,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670690.989,"dur":10.22,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670701.589,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670701.889,"dur":0.4,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670702.889,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670703.089,"dur":1.3,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670702.789,"dur":1.8,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670701.389,"dur":3.3,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670689.689,"dur":15.2,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670704.989,"dur":0.3,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670705.689,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670705.989,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670707.489,"dur":0.1,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670707.789,"dur":0.3,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670706.689,"dur":1.42,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670708.289,"dur":1.6,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670710.189,"dur":0.1,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670706.289,"dur":4.1,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670710.689,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670710.889,"dur":0.2,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670711.409,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670711.589,"dur":0.7,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670711.389,"dur":1.0,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670710.589,"dur":1.9,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670705.589,"dur":7.0,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670712.789,"dur":0.2,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670713.389,"dur":0.02,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670715.289,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670716.789,"dur":0.1,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670717.089,"dur":0.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670716.089,"dur":1.22,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670717.489,"dur":1.4,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670719.089,"dur":0.1,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670715.689,"dur":3.6,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670719.589,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670719.689,"dur":0.2,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670720.109,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670720.289,"dur":1.0,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670720.089,"dur":1.3,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670719.489,"dur":2.0,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670713.189,"dur":8.5,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670721.789,"dur":0.2,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670722.289,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670722.489,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670723.589,"dur":0.2,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670723.889,"dur":0.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670722.989,"dur":1.12,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670724.289,"dur":1.2,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670725.689,"dur":0.1,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670722.689,"dur":3.2,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670726.089,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670726.289,"dur":0.2,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670726.709,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670726.889,"dur":0.6,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670726.689,"dur":0.9,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670725.989,"dur":1.62,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670722.189,"dur":5.6,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670727.889,"dur":0.3,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670728.489,"dur":0.02,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670728.689,"dur":0.02,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670729.789,"dur":0.2,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670730.089,"dur":0.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670729.189,"dur":1.12,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670730.489,"dur":1.1,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670731.789,"dur":0.1,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670728.889,"dur":3.1,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670732.189,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670732.389,"dur":0.1,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670732.789,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670732.889,"dur":0.6,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670732.689,"dur":0.9,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670732.089,"dur":1.6,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670728.289,"dur":5.5,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670733.889,"dur":0.2,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670735.389,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670735.589,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670736.789,"dur":0.1,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670737.089,"dur":0.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670736.289,"dur":1.1,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670737.489,"dur":1.2,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670738.889,"dur":0.2,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670735.889,"dur":3.22,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670739.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670739.489,"dur":0.2,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670739.989,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670740.089,"dur":0.6,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670739.889,"dur":0.9,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670739.189,"dur":1.7,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670735.289,"dur":5.7,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670741.089,"dur":0.2,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670741.589,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670741.789,"dur":0.02,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670742.889,"dur":0.1,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670743.089,"dur":0.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670742.289,"dur":1.1,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670743.489,"dur":1.2,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670744.889,"dur":0.1,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670742.089,"dur":3.0,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670745.289,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670745.389,"dur":0.2,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670745.809,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670745.989,"dur":0.6,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670745.789,"dur":0.9,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670745.189,"dur":1.6,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670741.489,"dur":5.4,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670746.989,"dur":0.2,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670747.489,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670747.689,"dur":0.02,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670748.789,"dur":0.2,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670749.089,"dur":0.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670748.189,"dur":1.12,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670749.489,"dur":1.1,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670750.789,"dur":0.1,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670747.889,"dur":3.02,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670751.189,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670751.289,"dur":0.2,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670751.709,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670751.889,"dur":0.5,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670751.689,"dur":0.8,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670751.089,"dur":1.5,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670747.289,"dur":9.0,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670756.389,"dur":0.2,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670756.889,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670757.089,"dur":0.02,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670758.289,"dur":0.2,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670758.589,"dur":0.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670757.689,"dur":1.2,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670759.089,"dur":1.1,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670760.489,"dur":0.1,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670757.389,"dur":3.22,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670760.889,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670760.989,"dur":0.2,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670761.409,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670761.589,"dur":0.5,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670761.389,"dur":0.9,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670760.789,"dur":1.52,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670756.789,"dur":5.7,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670762.589,"dur":0.3,"name":"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670764.089,"dur":0.4,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670765.989,"dur":0.2,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670765.789,"dur":0.5,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670767.389,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670767.289,"dur":0.3,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670765.189,"dur":2.6,"name":"_set_length (/usr/lib/python3.6/multiprocessing/pool.py:755)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670769.089,"dur":0.1,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670768.989,"dur":0.22,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670769.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670769.489,"dur":0.4,"name":"_qsize (/usr/lib/python3.6/queue.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670793.789,"dur":0.2,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670793.589,"dur":0.5,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670794.189,"dur":0.2,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670794.489,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670794.889,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670795.289,"dur":0.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670795.189,"dur":0.22,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670423.489,"dur":381.7,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670805.589,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670805.889,"dur":0.3,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670422.589,"dur":383.8,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670806.889,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670807.109,"dur":0.58,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670808.689,"dur":1.2,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670809.989,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670810.189,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670808.089,"dur":2.4,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670422.489,"dur":388.1,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670811.089,"dur":0.2,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670812.489,"dur":1.4,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670421.489,"dur":392.6,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670821.289,"dur":0.4,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670820.789,"dur":1.0,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670822.289,"dur":0.2,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670823.689,"dur":14.0,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670823.489,"dur":14.3,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670839.289,"dur":31.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670870.989,"dur":0.2,"name":"collections.deque.remove","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670823.289,"dur":48.2,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670873.389,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670873.089,"dur":0.5,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670815.289,"dur":58.6,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:768)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670874.989,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670875.489,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670586.289,"dur":310.2,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670898.689,"dur":14.6,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670898.189,"dur":15.2,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670583.689,"dur":330.0,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670914.789,"dur":0.2,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670916.389,"dur":0.02,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670916.089,"dur":0.4,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670576.389,"dur":340.6,"name":"next (/usr/lib/python3.6/multiprocessing/pool.py:717)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670877.189,"dur":81.1,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670959.089,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670960.189,"dur":0.5,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670876.089,"dur":85.2,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670962.389,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670962.689,"dur":0.8,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670965.789,"dur":17.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670983.689,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670984.289,"dur":0.3,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670964.489,"dur":20.5,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670875.789,"dur":109.5,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670986.189,"dur":0.7,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670986.909,"dur":1.78,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670874.689,"dur":114.3,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670991.889,"dur":0.6,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670991.489,"dur":1.02,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670992.889,"dur":0.2,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670994.289,"dur":0.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670994.089,"dur":0.7,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670993.789,"dur":2.6,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670997.189,"dur":0.2,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670996.989,"dur":0.5,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670990.589,"dur":7.1,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:768)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670998.289,"dur":2.8,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671001.289,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671002.789,"dur":1.1,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671003.989,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671004.189,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671001.989,"dur":2.5,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671004.889,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671005.089,"dur":0.4,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671006.089,"dur":0.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671006.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671006.889,"dur":0.02,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671005.789,"dur":1.3,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671001.789,"dur":5.4,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671007.489,"dur":0.2,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671007.709,"dur":0.68,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607670998.089,"dur":10.32,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671009.289,"dur":0.2,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671009.189,"dur":0.4,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671009.789,"dur":0.02,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671010.389,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671010.289,"dur":0.3,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671010.189,"dur":0.9,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671011.589,"dur":0.02,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671011.489,"dur":0.2,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671008.889,"dur":2.9,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:768)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671012.089,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671012.389,"dur":0.02,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607670919.389,"dur":110.7,"name":"builtins.print","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671033.089,"dur":0.4,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671032.589,"dur":1.0,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671034.089,"dur":0.1,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671034.889,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671034.689,"dur":0.4,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671031.589,"dur":3.9,"name":"next (/usr/lib/python3.6/multiprocessing/pool.py:717)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671035.989,"dur":21.5,"name":"builtins.print","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671059.089,"dur":0.3,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671058.889,"dur":0.6,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671059.789,"dur":0.1,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671060.489,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671060.289,"dur":0.32,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671058.289,"dur":2.7,"name":"next (/usr/lib/python3.6/multiprocessing/pool.py:717)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671061.489,"dur":4.0,"name":"builtins.print","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671065.889,"dur":0.1,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671065.789,"dur":0.3,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671066.189,"dur":0.4,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671069.089,"dur":0.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671068.889,"dur":0.7,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671072.289,"dur":0.5,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671072.889,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671073.289,"dur":0.2,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671073.789,"dur":0.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671073.689,"dur":0.3,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671012.989,"dur":64.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671078.189,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671079.289,"dur":0.4,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671012.689,"dur":67.6,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671081.589,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671081.789,"dur":0.9,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671084.989,"dur":1.8,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671086.889,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671087.089,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671083.789,"dur":3.6,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671012.589,"dur":74.9,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671088.189,"dur":0.6,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671088.809,"dur":1.68,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671011.989,"dur":78.8,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671093.489,"dur":0.4,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671093.089,"dur":0.9,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671094.389,"dur":0.2,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671095.789,"dur":0.3,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671095.589,"dur":0.6,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671097.889,"dur":15.0,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671113.389,"dur":0.3,"name":"collections.deque.remove","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671095.289,"dur":18.8,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671115.889,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671115.489,"dur":0.6,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671092.389,"dur":23.9,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:768)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671117.189,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671117.689,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671119.089,"dur":1.7,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671120.989,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671121.289,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671118.189,"dur":3.6,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671122.189,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671122.389,"dur":0.4,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671123.289,"dur":0.6,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671123.989,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671124.189,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671123.089,"dur":1.3,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671117.989,"dur":6.5,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671124.789,"dur":0.3,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671125.109,"dur":1.08,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671116.889,"dur":9.5,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671127.589,"dur":2.8,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671127.489,"dur":3.0,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671130.789,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671131.689,"dur":0.3,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671131.589,"dur":0.5,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671131.389,"dur":1.7,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671133.589,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671133.489,"dur":0.3,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671127.089,"dur":6.8,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:768)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671134.189,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671134.489,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671135.189,"dur":0.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671135.789,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671135.989,"dur":0.02,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671134.789,"dur":1.4,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671136.389,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671136.589,"dur":0.2,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671137.089,"dur":0.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671137.589,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671137.789,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671136.889,"dur":1.02,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671134.689,"dur":3.3,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671138.189,"dur":0.2,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671138.409,"dur":0.48,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671134.089,"dur":4.9,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671139.689,"dur":0.1,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671139.589,"dur":0.3,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671139.989,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671140.489,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671140.389,"dur":0.3,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671140.289,"dur":0.8,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671141.389,"dur":0.02,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671141.289,"dur":0.2,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671139.389,"dur":2.2,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:768)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671141.889,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671142.089,"dur":0.02,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671074.189,"dur":102.2,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671178.789,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671178.189,"dur":1.2,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671068.589,"dur":111.1,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671180.789,"dur":0.3,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671182.589,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671182.289,"dur":0.5,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671065.589,"dur":117.6,"name":"next (/usr/lib/python3.6/multiprocessing/pool.py:717)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671183.989,"dur":41.1,"name":"builtins.print","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671227.089,"dur":0.3,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671226.789,"dur":0.8,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671230.389,"dur":0.1,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671231.189,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671230.989,"dur":0.4,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671226.289,"dur":5.4,"name":"next (/usr/lib/python3.6/multiprocessing/pool.py:717)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671232.089,"dur":17.9,"name":"builtins.print","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671251.389,"dur":0.3,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671251.189,"dur":0.6,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671252.089,"dur":0.1,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671252.789,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671252.589,"dur":0.4,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671250.689,"dur":2.6,"name":"next (/usr/lib/python3.6/multiprocessing/pool.py:717)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671253.789,"dur":26.3,"name":"builtins.print","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671281.589,"dur":0.2,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671281.289,"dur":0.7,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671282.289,"dur":0.5,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671285.189,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671284.989,"dur":0.8,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671285.889,"dur":0.3,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671286.289,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671286.689,"dur":0.2,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671287.189,"dur":0.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671287.089,"dur":0.3,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671142.689,"dur":186.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671329.989,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671330.989,"dur":0.3,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671142.389,"dur":189.5,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671332.989,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671333.209,"dur":0.88,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671336.189,"dur":2.3,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671338.589,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671338.889,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671334.989,"dur":4.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671142.289,"dur":197.0,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671339.889,"dur":0.5,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671340.489,"dur":1.6,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671141.789,"dur":200.5,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671344.689,"dur":0.5,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671344.389,"dur":0.82,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671345.589,"dur":0.2,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671346.889,"dur":0.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671346.689,"dur":0.7,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671348.989,"dur":14.7,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671364.189,"dur":0.3,"name":"collections.deque.remove","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671346.389,"dur":18.5,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671366.789,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671366.389,"dur":0.6,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671343.689,"dur":26.1,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:768)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671370.889,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671371.289,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671287.589,"dur":87.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671377.389,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671376.889,"dur":1.1,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671284.689,"dur":93.6,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671379.389,"dur":0.2,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671381.089,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671380.889,"dur":0.4,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671280.889,"dur":100.9,"name":"next (/usr/lib/python3.6/multiprocessing/pool.py:717)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671382.689,"dur":33.0,"name":"builtins.print","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671417.689,"dur":0.3,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671417.389,"dur":0.7,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671418.389,"dur":0.4,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671420.889,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671420.789,"dur":0.8,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671421.689,"dur":0.3,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671422.089,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671422.489,"dur":0.2,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671422.989,"dur":0.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671422.889,"dur":0.22,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671372.789,"dur":83.3,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671456.889,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671457.889,"dur":0.4,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671371.889,"dur":86.9,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671459.989,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671460.189,"dur":0.8,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671463.189,"dur":2.1,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671465.389,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671465.689,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671461.989,"dur":3.9,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671371.689,"dur":94.4,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671466.689,"dur":0.6,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671467.309,"dur":1.58,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671370.489,"dur":98.7,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671471.589,"dur":0.4,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671471.289,"dur":0.8,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671472.489,"dur":0.2,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671473.789,"dur":0.3,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671473.589,"dur":0.6,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671475.789,"dur":15.2,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671491.489,"dur":0.3,"name":"collections.deque.remove","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671473.289,"dur":18.8,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671494.089,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671493.689,"dur":0.6,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671470.589,"dur":24.0,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:768)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671505.889,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671506.389,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671508.089,"dur":1.7,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671510.089,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671510.389,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671507.089,"dur":3.9,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671511.289,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671511.509,"dur":0.48,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671512.589,"dur":0.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671513.089,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671513.289,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671512.289,"dur":1.2,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671506.789,"dur":6.8,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671513.889,"dur":0.4,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671514.309,"dur":0.98,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671505.389,"dur":10.1,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671516.789,"dur":0.4,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671516.689,"dur":0.52,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671517.489,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671518.289,"dur":0.2,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671518.189,"dur":0.4,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671517.989,"dur":1.5,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671520.189,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671520.089,"dur":0.3,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671516.289,"dur":4.3,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:768)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671520.889,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671521.089,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671521.789,"dur":13.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671535.489,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671536.089,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671521.489,"dur":15.3,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671537.189,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671537.409,"dur":0.48,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671539.189,"dur":1.1,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671540.309,"dur":0.18,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671540.589,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671538.489,"dur":2.4,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671521.389,"dur":19.6,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671541.289,"dur":0.3,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671541.609,"dur":0.98,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671520.789,"dur":22.0,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671544.089,"dur":0.3,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671543.989,"dur":0.5,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671544.689,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671545.489,"dur":0.2,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671545.389,"dur":0.4,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671545.289,"dur":1.4,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671549.589,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671549.389,"dur":0.4,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671543.589,"dur":6.3,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:768)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671550.389,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671550.589,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671423.389,"dur":132.8,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671558.489,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671557.989,"dur":1.2,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671420.489,"dur":139.0,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671560.689,"dur":0.2,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671562.389,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671562.189,"dur":0.4,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671416.789,"dur":146.3,"name":"next (/usr/lib/python3.6/multiprocessing/pool.py:717)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671563.789,"dur":23.7,"name":"builtins.print","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671589.689,"dur":0.3,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671589.389,"dur":0.7,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671590.489,"dur":0.1,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671591.189,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671590.989,"dur":0.4,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671588.789,"dur":2.9,"name":"next (/usr/lib/python3.6/multiprocessing/pool.py:717)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671592.189,"dur":18.8,"name":"builtins.print","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671612.589,"dur":0.3,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671612.389,"dur":0.6,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671613.289,"dur":0.1,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671613.989,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671613.789,"dur":0.4,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671611.889,"dur":2.6,"name":"next (/usr/lib/python3.6/multiprocessing/pool.py:717)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671614.989,"dur":16.9,"name":"builtins.print","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671633.289,"dur":0.3,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671633.089,"dur":0.6,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671633.989,"dur":0.4,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671636.889,"dur":0.2,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671636.789,"dur":0.32,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671632.689,"dur":4.9,"name":"next (/usr/lib/python3.6/multiprocessing/pool.py:717)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671647.789,"dur":0.6,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671648.689,"dur":4.1,"name":"__init__ (/usr/lib/python3.6/threading.py:215)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671647.489,"dur":5.7,"name":"__init__ (/usr/lib/python3.6/threading.py:498)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671653.989,"dur":0.4,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671646.589,"dur":9.0,"name":"__init__ (/usr/lib/python3.6/multiprocessing/pool.py:619)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671657.889,"dur":0.3,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671657.689,"dur":0.52,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671659.089,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671658.889,"dur":0.4,"name":"_put (/usr/lib/python3.6/queue.py:206)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671660.689,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671660.589,"dur":0.7,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671662.689,"dur":14.5,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671679.889,"dur":0.3,"name":"collections.deque.remove","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671660.289,"dur":20.2,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671682.489,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671682.089,"dur":0.6,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671657.089,"dur":25.8,"name":"put (/usr/lib/python3.6/queue.py:115)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671644.289,"dur":38.8,"name":"apply_async (/usr/lib/python3.6/multiprocessing/pool.py:349)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671690.189,"dur":0.4,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671689.789,"dur":0.9,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671691.589,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671691.389,"dur":0.8,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671692.389,"dur":2.9,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671695.689,"dur":0.2,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671696.289,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671696.889,"dur":0.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671696.689,"dur":0.4,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670795.589,"dur":924.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671722.089,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671721.589,"dur":1.1,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670793.389,"dur":929.8,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671725.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671724.689,"dur":0.8,"name":"_qsize (/usr/lib/python3.6/queue.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671726.189,"dur":0.2,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671726.089,"dur":0.32,"name":"_get (/usr/lib/python3.6/queue.py:210)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671727.589,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671727.389,"dur":0.8,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671727.089,"dur":2.7,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671730.689,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671730.489,"dur":0.4,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607670768.589,"dur":962.5,"name":"get (/usr/lib/python3.6/queue.py:147)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671734.389,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671735.189,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671742.189,"dur":0.5,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671743.289,"dur":3.6,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671737.989,"dur":9.0,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671747.389,"dur":7.3,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671755.389,"dur":0.4,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671736.189,"dur":19.7,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671756.389,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671756.989,"dur":0.6,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671758.489,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671758.689,"dur":17.5,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671758.389,"dur":18.5,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671756.189,"dur":21.1,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671733.989,"dur":43.7,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671780.389,"dur":0.3,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671779.989,"dur":0.9,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671781.789,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671781.589,"dur":2.4,"name":"_qsize (/usr/lib/python3.6/queue.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671784.589,"dur":0.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671784.489,"dur":0.6,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671785.189,"dur":0.3,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671785.589,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671785.989,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671786.389,"dur":0.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671786.289,"dur":0.3,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671551.389,"dur":374.7,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671926.889,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671927.789,"dur":0.4,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671550.989,"dur":377.7,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671929.789,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671930.089,"dur":0.8,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671933.089,"dur":18.9,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671952.089,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671952.289,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671931.889,"dur":20.7,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671550.889,"dur":401.8,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671953.389,"dur":0.5,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671953.989,"dur":1.8,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671550.189,"dur":405.9,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671963.289,"dur":0.6,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671962.889,"dur":1.02,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671964.889,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671965.689,"dur":0.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671965.589,"dur":0.6,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671967.789,"dur":14.0,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671982.389,"dur":0.3,"name":"collections.deque.remove","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671965.289,"dur":17.7,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671964.589,"dur":18.8,"name":"notify_all (/usr/lib/python3.6/threading.py:357)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671984.689,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671984.189,"dur":0.7,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671962.389,"dur":22.8,"name":"set (/usr/lib/python3.6/threading.py:512)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671960.189,"dur":25.6,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:646)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671986.789,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671987.289,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671697.589,"dur":297.3,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671997.289,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671996.789,"dur":1.1,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671691.189,"dur":307.0,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671999.789,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671999.489,"dur":0.5,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671689.389,"dur":310.8,"name":"wait (/usr/lib/python3.6/threading.py:533)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671688.689,"dur":311.9,"name":"wait (/usr/lib/python3.6/multiprocessing/pool.py:634)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672002.089,"dur":0.2,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672001.389,"dur":3.1,"name":"ready (/usr/lib/python3.6/multiprocessing/pool.py:627)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607671688.189,"dur":316.7,"name":"get (/usr/lib/python3.6/multiprocessing/pool.py:637)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672005.089,"dur":34.1,"name":"builtins.print","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672043.589,"dur":0.3,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672044.089,"dur":4.2,"name":"__init__ (/usr/lib/python3.6/threading.py:215)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672043.389,"dur":5.3,"name":"__init__ (/usr/lib/python3.6/threading.py:498)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672049.089,"dur":0.3,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672042.789,"dur":7.2,"name":"__init__ (/usr/lib/python3.6/multiprocessing/pool.py:619)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672051.689,"dur":0.3,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672051.489,"dur":0.6,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672052.689,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672052.489,"dur":0.4,"name":"_put (/usr/lib/python3.6/queue.py:206)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672053.889,"dur":0.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672053.689,"dur":0.7,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672067.889,"dur":35.2,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672103.789,"dur":0.3,"name":"collections.deque.remove","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672053.489,"dur":51.0,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672106.889,"dur":0.2,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672106.389,"dur":0.72,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672051.189,"dur":56.3,"name":"put (/usr/lib/python3.6/queue.py:115)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672041.489,"dur":66.2,"name":"apply_async (/usr/lib/python3.6/multiprocessing/pool.py:349)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672111.189,"dur":0.4,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672111.089,"dur":0.6,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672112.589,"dur":0.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672112.489,"dur":0.6,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672113.289,"dur":0.2,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672113.589,"dur":0.02,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672113.989,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672114.489,"dur":0.02,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672114.389,"dur":0.2,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671786.689,"dur":366.3,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672155.189,"dur":0.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672154.689,"dur":1.1,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671784.289,"dur":371.8,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672157.589,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672157.189,"dur":0.7,"name":"_qsize (/usr/lib/python3.6/queue.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672158.589,"dur":0.2,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672158.489,"dur":0.32,"name":"_get (/usr/lib/python3.6/queue.py:210)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672159.989,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672159.789,"dur":0.8,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672159.489,"dur":2.7,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672163.189,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672162.889,"dur":0.5,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607671779.289,"dur":384.3,"name":"get (/usr/lib/python3.6/queue.py:147)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672165.589,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672166.189,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672171.489,"dur":0.4,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672175.289,"dur":0.8,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672168.489,"dur":7.7,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672176.489,"dur":19.3,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672196.889,"dur":0.5,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672166.989,"dur":30.5,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672198.289,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672198.889,"dur":0.6,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672200.589,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672200.889,"dur":18.7,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672200.489,"dur":19.9,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672198.089,"dur":22.7,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672165.289,"dur":56.0,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672224.489,"dur":0.4,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672224.089,"dur":1.0,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672225.989,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672225.689,"dur":0.6,"name":"_qsize (/usr/lib/python3.6/queue.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672226.989,"dur":0.3,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672226.789,"dur":0.6,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672227.589,"dur":0.2,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672227.889,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672228.289,"dur":0.2,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672228.789,"dur":0.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672228.589,"dur":0.32,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671988.789,"dur":336.6,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672326.189,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672327.289,"dur":0.4,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671987.889,"dur":340.4,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672349.389,"dur":0.3,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672349.789,"dur":1.0,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672353.389,"dur":2.6,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672356.189,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672356.489,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672351.989,"dur":5.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671987.689,"dur":369.6,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672358.089,"dur":0.6,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672358.789,"dur":1.8,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607671986.389,"dur":374.5,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672364.889,"dur":0.5,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672364.489,"dur":1.0,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672366.389,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672367.189,"dur":0.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672367.089,"dur":0.6,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672369.389,"dur":14.4,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672384.489,"dur":0.3,"name":"collections.deque.remove","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672366.789,"dur":18.4,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672366.089,"dur":19.5,"name":"notify_all (/usr/lib/python3.6/threading.py:357)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672386.689,"dur":3.0,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672386.289,"dur":3.6,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672363.989,"dur":26.1,"name":"set (/usr/lib/python3.6/threading.py:512)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672362.689,"dur":28.1,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:646)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672391.889,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672392.389,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672114.989,"dur":283.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672400.389,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672399.889,"dur":1.1,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672112.189,"dur":289.1,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672402.789,"dur":0.2,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672402.589,"dur":0.42,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672110.689,"dur":292.5,"name":"wait (/usr/lib/python3.6/threading.py:533)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672110.289,"dur":293.3,"name":"wait (/usr/lib/python3.6/multiprocessing/pool.py:634)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672404.889,"dur":0.2,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672404.289,"dur":0.9,"name":"ready (/usr/lib/python3.6/multiprocessing/pool.py:627)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672109.989,"dur":295.6,"name":"get (/usr/lib/python3.6/multiprocessing/pool.py:637)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672405.889,"dur":20.8,"name":"builtins.print","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672436.989,"dur":0.3,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672437.589,"dur":4.3,"name":"__init__ (/usr/lib/python3.6/threading.py:215)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672436.789,"dur":5.3,"name":"__init__ (/usr/lib/python3.6/threading.py:498)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672442.489,"dur":0.3,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672436.189,"dur":7.2,"name":"__init__ (/usr/lib/python3.6/multiprocessing/pool.py:619)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672445.289,"dur":0.3,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672444.989,"dur":0.62,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672446.389,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672446.189,"dur":0.4,"name":"_put (/usr/lib/python3.6/queue.py:206)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672447.489,"dur":0.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672447.289,"dur":0.7,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672459.389,"dur":14.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672474.089,"dur":0.4,"name":"collections.deque.remove","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672447.089,"dur":27.8,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672477.189,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672476.589,"dur":0.8,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672444.589,"dur":33.1,"name":"put (/usr/lib/python3.6/queue.py:115)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672434.989,"dur":43.0,"name":"apply_async (/usr/lib/python3.6/multiprocessing/pool.py:349)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672480.989,"dur":8.6,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672490.489,"dur":4.2,"name":"__init__ (/usr/lib/python3.6/threading.py:215)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672480.789,"dur":14.2,"name":"__init__ (/usr/lib/python3.6/threading.py:498)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672495.589,"dur":8.1,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672480.389,"dur":24.6,"name":"__init__ (/usr/lib/python3.6/multiprocessing/pool.py:619)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672507.489,"dur":0.4,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672507.089,"dur":0.9,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672508.789,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672508.589,"dur":0.32,"name":"_put (/usr/lib/python3.6/queue.py:206)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672509.789,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672509.689,"dur":0.7,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672509.489,"dur":11.1,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672522.189,"dur":0.2,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672521.789,"dur":0.7,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672506.589,"dur":16.2,"name":"put (/usr/lib/python3.6/queue.py:115)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672479.389,"dur":43.5,"name":"apply_async (/usr/lib/python3.6/multiprocessing/pool.py:349)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672525.189,"dur":0.3,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672525.789,"dur":2.9,"name":"__init__ (/usr/lib/python3.6/threading.py:215)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672525.089,"dur":3.9,"name":"__init__ (/usr/lib/python3.6/threading.py:498)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672531.589,"dur":0.3,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672524.689,"dur":7.6,"name":"__init__ (/usr/lib/python3.6/multiprocessing/pool.py:619)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672536.889,"dur":0.2,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672536.489,"dur":0.7,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672537.689,"dur":0.02,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672537.489,"dur":0.3,"name":"_put (/usr/lib/python3.6/queue.py:206)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672538.489,"dur":0.3,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672538.389,"dur":0.42,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672538.189,"dur":1.4,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672539.889,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672539.789,"dur":0.22,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672535.989,"dur":4.2,"name":"put (/usr/lib/python3.6/queue.py:115)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672523.989,"dur":16.3,"name":"apply_async (/usr/lib/python3.6/multiprocessing/pool.py:349)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672541.789,"dur":0.2,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672542.189,"dur":1.7,"name":"__init__ (/usr/lib/python3.6/threading.py:215)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672541.689,"dur":2.4,"name":"__init__ (/usr/lib/python3.6/threading.py:498)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672544.289,"dur":0.1,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672541.389,"dur":3.4,"name":"__init__ (/usr/lib/python3.6/multiprocessing/pool.py:619)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672545.489,"dur":0.1,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672545.389,"dur":0.22,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672545.889,"dur":0.02,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672545.789,"dur":0.2,"name":"_put (/usr/lib/python3.6/queue.py:206)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672546.389,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672546.289,"dur":0.3,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672546.189,"dur":1.2,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672547.609,"dur":0.08,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672547.589,"dur":0.12,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672545.189,"dur":2.6,"name":"put (/usr/lib/python3.6/queue.py:115)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672540.889,"dur":7.0,"name":"apply_async (/usr/lib/python3.6/multiprocessing/pool.py:349)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672548.609,"dur":0.08,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672548.889,"dur":1.1,"name":"__init__ (/usr/lib/python3.6/threading.py:215)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672548.589,"dur":1.6,"name":"__init__ (/usr/lib/python3.6/threading.py:498)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672572.589,"dur":0.5,"name":"builtins.next","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672548.389,"dur":25.5,"name":"__init__ (/usr/lib/python3.6/multiprocessing/pool.py:619)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672575.989,"dur":0.3,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672575.689,"dur":0.8,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672577.089,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672576.889,"dur":0.32,"name":"_put (/usr/lib/python3.6/queue.py:206)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672577.989,"dur":2.2,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672577.889,"dur":2.4,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672577.689,"dur":5.0,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672583.389,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672583.189,"dur":0.4,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672575.189,"dur":8.6,"name":"put (/usr/lib/python3.6/queue.py:115)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672548.189,"dur":35.7,"name":"apply_async (/usr/lib/python3.6/multiprocessing/pool.py:349)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672432.389,"dur":151.9,"name":"<listcomp> (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:23)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672594.989,"dur":0.4,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672594.689,"dur":0.72,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672596.189,"dur":0.3,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672595.989,"dur":0.52,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672596.689,"dur":2.7,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672599.689,"dur":0.3,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672600.289,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672600.789,"dur":0.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672600.689,"dur":0.3,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672229.189,"dur":393.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672624.689,"dur":0.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672624.189,"dur":1.0,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672226.589,"dur":398.9,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672626.989,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672626.589,"dur":0.62,"name":"_qsize (/usr/lib/python3.6/queue.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672627.889,"dur":0.2,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672627.689,"dur":0.42,"name":"_get (/usr/lib/python3.6/queue.py:210)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672629.189,"dur":0.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672628.989,"dur":0.7,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672628.689,"dur":2.5,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672632.089,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672631.889,"dur":0.4,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672222.989,"dur":409.5,"name":"get (/usr/lib/python3.6/queue.py:147)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672634.389,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672634.889,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672640.689,"dur":0.7,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672641.789,"dur":0.6,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672637.589,"dur":4.9,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672642.789,"dur":7.4,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672650.789,"dur":0.5,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672635.489,"dur":15.9,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672651.889,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672652.489,"dur":0.5,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672653.989,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672654.189,"dur":16.0,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672653.889,"dur":16.9,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672651.589,"dur":19.6,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672634.089,"dur":37.5,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672674.089,"dur":0.3,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672673.689,"dur":3.5,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672677.889,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672677.689,"dur":0.42,"name":"_qsize (/usr/lib/python3.6/queue.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672678.489,"dur":0.1,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672678.389,"dur":0.3,"name":"_get (/usr/lib/python3.6/queue.py:210)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672679.289,"dur":0.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672679.089,"dur":0.7,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672678.989,"dur":1.9,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672681.489,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672681.389,"dur":0.3,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672672.989,"dur":8.9,"name":"get (/usr/lib/python3.6/queue.py:147)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672682.889,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672683.189,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672686.589,"dur":0.3,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672687.289,"dur":0.5,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672684.489,"dur":3.4,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672688.089,"dur":4.8,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672693.389,"dur":0.3,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672683.589,"dur":10.2,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672694.009,"dur":0.18,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672694.389,"dur":0.3,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672695.309,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672695.589,"dur":1.6,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672695.289,"dur":2.1,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672693.989,"dur":3.5,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672682.689,"dur":15.0,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672698.689,"dur":0.1,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672698.489,"dur":0.4,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672699.189,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672699.089,"dur":0.22,"name":"_qsize (/usr/lib/python3.6/queue.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672699.589,"dur":0.1,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672699.489,"dur":0.22,"name":"_get (/usr/lib/python3.6/queue.py:210)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672700.189,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672700.089,"dur":0.3,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672699.889,"dur":1.0,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672701.189,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672701.089,"dur":0.3,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672698.089,"dur":3.4,"name":"get (/usr/lib/python3.6/queue.py:147)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672702.089,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672702.289,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672704.189,"dur":0.2,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672704.589,"dur":0.3,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672703.089,"dur":1.82,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672705.189,"dur":2.2,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672707.589,"dur":0.2,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672702.589,"dur":5.22,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672708.089,"dur":1.4,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672709.589,"dur":0.3,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672710.309,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672710.489,"dur":0.8,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672710.289,"dur":1.2,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672707.989,"dur":3.6,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672701.989,"dur":9.7,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672712.489,"dur":0.2,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672712.389,"dur":0.32,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672712.989,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672712.889,"dur":0.22,"name":"_qsize (/usr/lib/python3.6/queue.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672713.389,"dur":0.02,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672713.289,"dur":0.2,"name":"_get (/usr/lib/python3.6/queue.py:210)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672713.889,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672713.789,"dur":0.22,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672713.689,"dur":0.8,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672714.889,"dur":0.02,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672714.789,"dur":0.2,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672712.089,"dur":3.0,"name":"get (/usr/lib/python3.6/queue.py:147)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672715.589,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672715.789,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672717.389,"dur":0.2,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672717.789,"dur":0.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672716.589,"dur":1.5,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672718.189,"dur":1.8,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672720.289,"dur":0.1,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672716.089,"dur":4.4,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672720.789,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672720.989,"dur":0.2,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672721.589,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672721.789,"dur":0.8,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672721.489,"dur":1.2,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672720.689,"dur":2.1,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672715.489,"dur":7.4,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672723.589,"dur":0.2,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672723.489,"dur":0.32,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672723.989,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672723.889,"dur":0.22,"name":"_qsize (/usr/lib/python3.6/queue.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672724.389,"dur":0.02,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672724.289,"dur":0.2,"name":"_get (/usr/lib/python3.6/queue.py:210)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672724.889,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672724.789,"dur":0.3,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672724.689,"dur":0.8,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672725.689,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672725.589,"dur":0.22,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672723.289,"dur":2.7,"name":"get (/usr/lib/python3.6/queue.py:147)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672726.489,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672727.889,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672729.489,"dur":0.1,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672729.789,"dur":0.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672728.589,"dur":1.42,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672730.189,"dur":1.6,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672731.989,"dur":0.2,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672728.189,"dur":4.02,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672732.489,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672732.689,"dur":0.2,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672733.189,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672733.389,"dur":0.8,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672733.089,"dur":1.3,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672732.389,"dur":2.1,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672726.389,"dur":8.2,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672735.289,"dur":0.2,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672735.189,"dur":0.32,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672735.789,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672735.689,"dur":0.2,"name":"_qsize (/usr/lib/python3.6/queue.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672736.389,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672736.289,"dur":0.3,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672736.689,"dur":0.2,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672736.989,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672737.289,"dur":0.2,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672737.689,"dur":0.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672737.589,"dur":0.3,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672393.889,"dur":421.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672816.089,"dur":0.3,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672817.089,"dur":0.3,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672392.889,"dur":425.0,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672818.989,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672819.209,"dur":0.78,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672821.989,"dur":1.8,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672823.889,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672824.089,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672820.889,"dur":3.4,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672392.689,"dur":431.8,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672825.089,"dur":0.5,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672825.609,"dur":1.68,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672391.489,"dur":436.1,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672831.289,"dur":0.4,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672830.989,"dur":0.8,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672832.489,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672833.189,"dur":0.2,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672833.089,"dur":0.4,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672834.889,"dur":2.0,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672837.089,"dur":0.4,"name":"collections.deque.remove","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672832.789,"dur":4.8,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672832.289,"dur":8.8,"name":"notify_all (/usr/lib/python3.6/threading.py:357)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672841.689,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672841.489,"dur":0.32,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672830.489,"dur":11.5,"name":"set (/usr/lib/python3.6/threading.py:512)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672829.189,"dur":13.4,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:646)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672843.389,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672843.689,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672844.689,"dur":1.1,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672845.889,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672846.089,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672844.089,"dur":2.3,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672846.689,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672846.889,"dur":0.4,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672847.689,"dur":0.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672848.209,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672848.389,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672847.489,"dur":1.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672843.889,"dur":4.8,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672848.889,"dur":0.2,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672849.189,"dur":0.5,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672843.089,"dur":6.7,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672850.989,"dur":0.3,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672850.889,"dur":0.42,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672851.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672852.089,"dur":0.1,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672851.989,"dur":0.3,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672851.889,"dur":0.9,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672851.489,"dur":1.4,"name":"notify_all (/usr/lib/python3.6/threading.py:357)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672853.289,"dur":0.02,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672853.089,"dur":0.3,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672850.689,"dur":2.8,"name":"set (/usr/lib/python3.6/threading.py:512)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672850.289,"dur":3.4,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:646)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672853.989,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672854.189,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672854.789,"dur":61.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672916.989,"dur":0.3,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672918.089,"dur":0.3,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672854.489,"dur":64.5,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672920.189,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672920.389,"dur":0.9,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672601.389,"dur":323.9,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672926.889,"dur":0.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672926.589,"dur":0.8,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672595.789,"dur":331.8,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672928.889,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672928.789,"dur":0.3,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672594.189,"dur":337.1,"name":"wait (/usr/lib/python3.6/threading.py:533)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672593.489,"dur":338.1,"name":"wait (/usr/lib/python3.6/multiprocessing/pool.py:634)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672932.789,"dur":0.2,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672932.189,"dur":0.9,"name":"ready (/usr/lib/python3.6/multiprocessing/pool.py:627)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672593.089,"dur":340.3,"name":"get (/usr/lib/python3.6/multiprocessing/pool.py:637)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672935.389,"dur":0.2,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672935.289,"dur":0.4,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672936.009,"dur":0.08,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672935.989,"dur":0.12,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672935.089,"dur":1.2,"name":"wait (/usr/lib/python3.6/threading.py:533)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672934.789,"dur":1.52,"name":"wait (/usr/lib/python3.6/multiprocessing/pool.py:634)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672936.589,"dur":0.1,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672936.489,"dur":0.22,"name":"ready (/usr/lib/python3.6/multiprocessing/pool.py:627)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672934.489,"dur":2.4,"name":"get (/usr/lib/python3.6/multiprocessing/pool.py:637)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672937.689,"dur":0.2,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672937.589,"dur":0.32,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672938.589,"dur":0.4,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672938.389,"dur":0.7,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672939.289,"dur":5.1,"name":"_thread.allocate_lock","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672944.789,"dur":0.2,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672945.489,"dur":0.1,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672946.089,"dur":0.1,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672945.889,"dur":0.4,"name":"_release_save (/usr/lib/python3.6/threading.py:248)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672923.589,"dur":88.3,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673012.689,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673013.689,"dur":0.4,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672922.289,"dur":92.4,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672854.389,"dur":160.8,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673015.989,"dur":0.6,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673016.689,"dur":1.7,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607672853.889,"dur":164.8,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673022.489,"dur":0.6,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673022.189,"dur":1.0,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673023.889,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673024.789,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673024.589,"dur":0.8,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673076.389,"dur":12.9,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673089.989,"dur":0.2,"name":"collections.deque.remove","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673024.289,"dur":66.3,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673023.589,"dur":67.4,"name":"notify_all (/usr/lib/python3.6/threading.py:357)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673092.289,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673091.889,"dur":0.6,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673021.689,"dur":71.1,"name":"set (/usr/lib/python3.6/threading.py:512)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673020.589,"dur":72.8,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:646)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673094.489,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673094.889,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673096.889,"dur":4.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673104.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673104.689,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673095.489,"dur":9.7,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673105.889,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673106.109,"dur":0.88,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673107.689,"dur":13.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673121.489,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673121.989,"dur":0.3,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673107.389,"dur":15.3,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673095.289,"dur":27.6,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673123.289,"dur":0.4,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673123.789,"dur":1.1,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673093.989,"dur":31.1,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673127.489,"dur":0.4,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673127.389,"dur":0.6,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673128.589,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673129.089,"dur":0.3,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673128.989,"dur":0.5,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673128.789,"dur":1.7,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673128.389,"dur":2.3,"name":"notify_all (/usr/lib/python3.6/threading.py:357)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673131.189,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673131.089,"dur":0.3,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673126.889,"dur":4.7,"name":"set (/usr/lib/python3.6/threading.py:512)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673126.189,"dur":5.7,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:646)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673132.389,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673132.689,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673133.789,"dur":1.0,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673134.809,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673135.089,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673133.089,"dur":2.2,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673135.589,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673135.809,"dur":0.48,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673136.689,"dur":0.7,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673137.489,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673137.689,"dur":0.02,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673136.489,"dur":1.4,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673132.989,"dur":5.0,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673138.089,"dur":0.2,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673138.389,"dur":0.6,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673132.289,"dur":6.8,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673140.189,"dur":0.2,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673140.089,"dur":0.4,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673140.789,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673141.109,"dur":0.18,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673141.089,"dur":0.3,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673140.989,"dur":0.7,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673140.589,"dur":2.9,"name":"notify_all (/usr/lib/python3.6/threading.py:357)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673143.889,"dur":0.02,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673143.689,"dur":0.3,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673139.889,"dur":4.2,"name":"set (/usr/lib/python3.6/threading.py:512)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673139.489,"dur":4.8,"name":"_set (/usr/lib/python3.6/multiprocessing/pool.py:646)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673144.589,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673144.889,"dur":0.02,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672946.589,"dur":217.8,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673166.889,"dur":0.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673166.289,"dur":1.3,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672938.189,"dur":229.7,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673169.589,"dur":0.1,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673169.389,"dur":0.4,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672937.489,"dur":232.5,"name":"wait (/usr/lib/python3.6/threading.py:533)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672937.189,"dur":233.1,"name":"wait (/usr/lib/python3.6/multiprocessing/pool.py:634)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673171.289,"dur":0.1,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673170.689,"dur":0.8,"name":"ready (/usr/lib/python3.6/multiprocessing/pool.py:627)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672937.089,"dur":234.8,"name":"get (/usr/lib/python3.6/multiprocessing/pool.py:637)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673173.489,"dur":0.2,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673173.389,"dur":0.32,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673174.189,"dur":0.02,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673174.089,"dur":0.2,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673173.089,"dur":1.3,"name":"wait (/usr/lib/python3.6/threading.py:533)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673172.789,"dur":1.7,"name":"wait (/usr/lib/python3.6/multiprocessing/pool.py:634)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673174.789,"dur":0.02,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673174.589,"dur":0.3,"name":"ready (/usr/lib/python3.6/multiprocessing/pool.py:627)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673172.589,"dur":2.5,"name":"get (/usr/lib/python3.6/multiprocessing/pool.py:637)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673175.689,"dur":0.1,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673175.589,"dur":0.3,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673176.189,"dur":0.02,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673176.089,"dur":0.2,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673175.489,"dur":0.82,"name":"wait (/usr/lib/python3.6/threading.py:533)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673175.389,"dur":1.0,"name":"wait (/usr/lib/python3.6/multiprocessing/pool.py:634)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673176.589,"dur":0.1,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673176.489,"dur":0.3,"name":"ready (/usr/lib/python3.6/multiprocessing/pool.py:627)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673175.189,"dur":1.7,"name":"get (/usr/lib/python3.6/multiprocessing/pool.py:637)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607672589.289,"dur":587.8,"name":"<listcomp> (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673177.589,"dur":56.2,"name":"builtins.print","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673242.689,"dur":0.5,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673251.489,"dur":0.8,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673253.689,"dur":0.2,"name":"sub_debug (/usr/lib/python3.6/multiprocessing/util.py:44)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673255.789,"dur":0.1,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673258.489,"dur":0.1,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673259.589,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673263.989,"dur":0.2,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668124.789,"dur":100278.9,"name":"time.sleep","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607768432.389,"dur":3.0,"name":"_thread.lock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607768429.289,"dur":20.7,"name":"__enter__ (/usr/lib/python3.6/threading.py:239)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607768454.489,"dur":0.7,"name":"collections.deque.append","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607768452.889,"dur":2.6,"name":"_put (/usr/lib/python3.6/queue.py:206)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607768461.589,"dur":2.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607768460.289,"dur":4.1,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607768474.189,"dur":48.3,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607768524.489,"dur":1.1,"name":"collections.deque.remove","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607768458.989,"dur":67.6,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607768532.089,"dur":0.5,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607768530.589,"dur":2.2,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607768423.689,"dur":110.4,"name":"put (/usr/lib/python3.6/queue.py:115)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607768537.989,"dur":1.5,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668069.689,"dur":100470.3,"name":"_handle_workers (/usr/lib/python3.6/multiprocessing/pool.py:398)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607668068.189,"dur":100480.1,"name":"run (/usr/lib/python3.6/threading.py:853)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15874,"ts":14607768553.289,"dur":1.7,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672737.989,"dur":95858.0,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768608.689,"dur":1.5,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768606.489,"dur":4.2,"name":"_acquire_restore (/usr/lib/python3.6/threading.py:251)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672736.089,"dur":95875.7,"name":"wait (/usr/lib/python3.6/threading.py:263)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768621.289,"dur":1.0,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768618.889,"dur":3.8,"name":"_qsize (/usr/lib/python3.6/queue.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768627.389,"dur":0.6,"name":"collections.deque.popleft","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768626.389,"dur":1.8,"name":"_get (/usr/lib/python3.6/queue.py:210)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768632.789,"dur":1.8,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768632.089,"dur":2.8,"name":"_is_owned (/usr/lib/python3.6/threading.py:254)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768630.789,"dur":10.0,"name":"notify (/usr/lib/python3.6/threading.py:334)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768643.989,"dur":0.3,"name":"_thread.lock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768643.189,"dur":1.3,"name":"__exit__ (/usr/lib/python3.6/threading.py:242)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607672734.889,"dur":95910.2,"name":"get (/usr/lib/python3.6/queue.py:147)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768650.689,"dur":1.0,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768652.489,"dur":0.2,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768692.989,"dur":1.7,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768696.489,"dur":3.8,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768678.189,"dur":22.5,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768701.889,"dur":5.5,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768709.689,"dur":2.7,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768670.389,"dur":42.1,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768727.389,"dur":15.2,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768722.689,"dur":20.2,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768748.789,"dur":1.0,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768750.589,"dur":0.4,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768760.189,"dur":0.5,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768765.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768768.089,"dur":2.8,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768774.189,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768774.889,"dur":85.4,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768773.189,"dur":95.5,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768764.989,"dur":105.3,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768747.389,"dur":123.8,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768878.489,"dur":0.6,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768874.489,"dur":4.9,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768666.989,"dur":213.2,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768882.689,"dur":0.5,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768886.389,"dur":0.7,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768887.589,"dur":0.3,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768899.989,"dur":0.9,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768902.389,"dur":1.6,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768892.189,"dur":12.1,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768904.989,"dur":3.2,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768909.589,"dur":1.0,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768888.989,"dur":21.9,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768911.889,"dur":0.4,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768912.889,"dur":1.1,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768915.689,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768916.189,"dur":103.3,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768915.589,"dur":105.9,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768911.489,"dur":111.5,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607768885.189,"dur":139.0,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769027.389,"dur":0.5,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769028.189,"dur":0.5,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769039.689,"dur":1.2,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769042.089,"dur":2.1,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769033.189,"dur":11.2,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769045.089,"dur":3.5,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769049.789,"dur":1.3,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769029.789,"dur":21.4,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769051.989,"dur":0.4,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769052.889,"dur":1.0,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769055.589,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769055.889,"dur":38.3,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769055.389,"dur":40.2,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769051.689,"dur":44.7,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769025.889,"dur":71.6,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769099.689,"dur":0.5,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769100.589,"dur":0.4,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769110.489,"dur":0.8,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769112.789,"dur":1.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769105.189,"dur":9.1,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769114.889,"dur":2.7,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769118.789,"dur":0.7,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769102.189,"dur":17.5,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769120.289,"dur":0.5,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769121.289,"dur":0.9,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769130.389,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769130.789,"dur":64.9,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769130.089,"dur":67.1,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769120.089,"dur":77.9,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769098.689,"dur":100.4,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769200.989,"dur":0.5,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769201.889,"dur":0.3,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769210.989,"dur":0.9,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769212.989,"dur":1.4,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769206.089,"dur":8.6,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769215.289,"dur":2.6,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769219.089,"dur":0.7,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769203.489,"dur":16.4,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769220.589,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769221.289,"dur":0.7,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769223.289,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769223.689,"dur":65.6,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769223.189,"dur":67.6,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769220.289,"dur":71.3,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769200.289,"dur":92.4,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769294.589,"dur":0.5,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769295.489,"dur":0.4,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769304.989,"dur":1.1,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769307.189,"dur":1.3,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769299.989,"dur":8.8,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769309.389,"dur":3.0,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769313.689,"dur":0.6,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769297.189,"dur":17.3,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769315.089,"dur":0.4,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769315.989,"dur":0.8,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769318.189,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769318.589,"dur":39.3,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769317.989,"dur":41.4,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769314.889,"dur":45.3,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769293.789,"dur":67.4,"name":"send (/usr/lib/python3.6/multiprocessing/connection.py:202)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769364.089,"dur":0.7,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668314.489,"dur":101050.5,"name":"_handle_tasks (/usr/lib/python3.6/multiprocessing/pool.py:411)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607668312.289,"dur":101070.2,"name":"run (/usr/lib/python3.6/threading.py:853)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15875,"ts":14607769396.789,"dur":1.3,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673145.589,"dur":96385.2,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769533.489,"dur":1.7,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769542.089,"dur":3.5,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673145.189,"dur":96402.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769558.489,"dur":0.5,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769559.189,"dur":6.4,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769575.889,"dur":63.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769640.289,"dur":12.7,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769654.189,"dur":0.8,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769570.289,"dur":86.0,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673145.089,"dur":96512.2,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769667.389,"dur":3.4,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769670.889,"dur":11.4,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607673144.489,"dur":96539.5,"name":"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769698.089,"dur":1.4,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769702.789,"dur":2.6,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769706.989,"dur":0.2,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769738.089,"dur":2.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769741.789,"dur":1.8,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770005.289,"dur":11.0,"name":"__init__ (/usr/lib/python3.6/selectors.py:62)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769930.689,"dur":101.1,"name":"__init__ (/usr/lib/python3.6/selectors.py:208)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770073.289,"dur":3.7,"name":"select.poll","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769840.289,"dur":251.7,"name":"__init__ (/usr/lib/python3.6/selectors.py:346)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770100.589,"dur":1.2,"name":"__enter__ (/usr/lib/python3.6/selectors.py:198)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770142.989,"dur":5.4,"name":"builtins.isinstance","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770162.389,"dur":1.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770152.489,"dur":11.4,"name":"fileno (/usr/lib/python3.6/multiprocessing/connection.py:168)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770140.689,"dur":28.7,"name":"_fileobj_to_fd (/usr/lib/python3.6/selectors.py:20)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770137.289,"dur":32.6,"name":"_fileobj_lookup (/usr/lib/python3.6/selectors.py:214)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770201.689,"dur":4.0,"name":"type.__new__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770197.489,"dur":8.7,"name":"__new__ (<string>:12)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770128.789,"dur":98.8,"name":"register (/usr/lib/python3.6/selectors.py:233)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770254.489,"dur":5.3,"name":"select.poll.register","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770121.789,"dur":138.5,"name":"register (/usr/lib/python3.6/selectors.py:350)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770283.489,"dur":3.1,"name":"time.monotonic","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770311.289,"dur":59.8,"name":"select.poll.poll","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770307.489,"dur":66.8,"name":"select (/usr/lib/python3.6/selectors.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770378.389,"dur":0.7,"name":"time.monotonic","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770389.289,"dur":1.7,"name":"dict.clear","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770387.589,"dur":6.0,"name":"close (/usr/lib/python3.6/selectors.py:268)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770384.689,"dur":9.2,"name":"__exit__ (/usr/lib/python3.6/selectors.py:201)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769756.489,"dur":638.3,"name":"wait (/usr/lib/python3.6/multiprocessing/connection.py:897)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769747.189,"dur":652.7,"name":"_poll (/usr/lib/python3.6/multiprocessing/connection.py:413)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607769734.189,"dur":666.3,"name":"poll (/usr/lib/python3.6/multiprocessing/connection.py:253)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770402.889,"dur":0.6,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770404.889,"dur":0.8,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607668608.289,"dur":101797.8,"name":"_handle_results (/usr/lib/python3.6/multiprocessing/pool.py:457)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607668606.989,"dur":101814.1,"name":"run (/usr/lib/python3.6/threading.py:853)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15876,"ts":14607770425.789,"dur":0.8,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673264.789,"dur":97402.6,"name":"_multiprocessing.SemLock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770678.089,"dur":1.3,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770702.289,"dur":3.7,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770707.089,"dur":0.5,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770710.389,"dur":0.4,"name":"_thread.lock.locked","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770708.789,"dur":8.2,"name":"_stop (/usr/lib/python3.6/threading.py:966)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770699.789,"dur":17.6,"name":"_wait_for_tstate_lock (/usr/lib/python3.6/threading.py:1062)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770674.789,"dur":44.4,"name":"is_alive (/usr/lib/python3.6/threading.py:1104)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673260.189,"dur":97459.8,"name":"_help_stuff_finish (/usr/lib/python3.6/multiprocessing/pool.py:552)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770723.989,"dur":0.3,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770725.289,"dur":0.6,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770726.189,"dur":0.3,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770727.189,"dur":0.1,"name":"_thread.lock.locked","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770726.889,"dur":0.9,"name":"_stop (/usr/lib/python3.6/threading.py:966)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770724.889,"dur":3.1,"name":"_wait_for_tstate_lock (/usr/lib/python3.6/threading.py:1062)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770722.689,"dur":5.7,"name":"is_alive (/usr/lib/python3.6/threading.py:1104)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770729.289,"dur":0.6,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770756.489,"dur":1.8,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770759.789,"dur":3.0,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770742.589,"dur":20.5,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770764.689,"dur":20.4,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770788.489,"dur":2.0,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770736.089,"dur":54.7,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770796.889,"dur":2.9,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770795.689,"dur":4.3,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770804.289,"dur":0.6,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770805.889,"dur":0.5,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770809.989,"dur":0.5,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770814.789,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770816.489,"dur":2.2,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770821.089,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770821.789,"dur":7.7,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770820.589,"dur":9.9,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770814.189,"dur":16.9,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770802.889,"dur":29.0,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770834.389,"dur":0.3,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770833.489,"dur":1.4,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770733.189,"dur":102.5,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770838.789,"dur":0.8,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770842.889,"dur":0.9,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770841.989,"dur":3.4,"name":"current_thread (/usr/lib/python3.6/threading.py:1230)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770849.589,"dur":0.4,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770850.589,"dur":0.1,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770850.289,"dur":0.7,"name":"current_thread (/usr/lib/python3.6/threading.py:1230)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770852.389,"dur":1.7,"name":"_thread.lock.acquire","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770854.489,"dur":0.3,"name":"_thread.lock.release","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770855.689,"dur":0.3,"name":"_thread.lock.locked","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770855.289,"dur":1.3,"name":"_stop (/usr/lib/python3.6/threading.py:966)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770851.789,"dur":4.9,"name":"_wait_for_tstate_lock (/usr/lib/python3.6/threading.py:1062)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770847.689,"dur":9.6,"name":"join (/usr/lib/python3.6/threading.py:1024)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770858.889,"dur":7.3,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770866.989,"dur":3.5,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770879.089,"dur":37.4,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770876.289,"dur":42.7,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770873.989,"dur":45.6,"name":"exitcode (/usr/lib/python3.6/multiprocessing/process.py:181)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770947.189,"dur":18.2,"name":"posix.kill","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770924.389,"dur":41.7,"name":"terminate (/usr/lib/python3.6/multiprocessing/popen_fork.py:53)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770922.489,"dur":44.3,"name":"terminate (/usr/lib/python3.6/multiprocessing/process.py:112)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770975.289,"dur":4.2,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770973.889,"dur":6.4,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770972.289,"dur":8.4,"name":"exitcode (/usr/lib/python3.6/multiprocessing/process.py:181)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770982.789,"dur":4.5,"name":"posix.kill","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770981.989,"dur":5.6,"name":"terminate (/usr/lib/python3.6/multiprocessing/popen_fork.py:53)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770981.489,"dur":6.4,"name":"terminate (/usr/lib/python3.6/multiprocessing/process.py:112)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770989.789,"dur":1.7,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770988.989,"dur":2.9,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770988.289,"dur":3.7,"name":"exitcode (/usr/lib/python3.6/multiprocessing/process.py:181)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770993.489,"dur":3.7,"name":"posix.kill","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770992.889,"dur":4.5,"name":"terminate (/usr/lib/python3.6/multiprocessing/popen_fork.py:53)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770992.489,"dur":5.2,"name":"terminate (/usr/lib/python3.6/multiprocessing/process.py:112)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770999.289,"dur":1.6,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770998.789,"dur":2.6,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607770998.089,"dur":3.4,"name":"exitcode (/usr/lib/python3.6/multiprocessing/process.py:181)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771002.889,"dur":3.5,"name":"posix.kill","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771002.389,"dur":4.1,"name":"terminate (/usr/lib/python3.6/multiprocessing/popen_fork.py:53)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771001.989,"dur":4.8,"name":"terminate (/usr/lib/python3.6/multiprocessing/process.py:112)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771008.389,"dur":1.4,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771007.889,"dur":2.3,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771007.189,"dur":3.2,"name":"exitcode (/usr/lib/python3.6/multiprocessing/process.py:181)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771011.789,"dur":3.7,"name":"posix.kill","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771011.189,"dur":4.5,"name":"terminate (/usr/lib/python3.6/multiprocessing/popen_fork.py:53)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771010.789,"dur":5.2,"name":"terminate (/usr/lib/python3.6/multiprocessing/process.py:112)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771018.489,"dur":0.7,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771021.589,"dur":0.9,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771020.789,"dur":3.2,"name":"current_thread (/usr/lib/python3.6/threading.py:1230)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771026.789,"dur":0.4,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771027.689,"dur":0.2,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771027.489,"dur":0.7,"name":"current_thread (/usr/lib/python3.6/threading.py:1230)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771028.989,"dur":0.7,"name":"_wait_for_tstate_lock (/usr/lib/python3.6/threading.py:1062)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771025.389,"dur":4.6,"name":"join (/usr/lib/python3.6/threading.py:1024)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771030.589,"dur":0.3,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771031.389,"dur":0.1,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771031.189,"dur":0.5,"name":"current_thread (/usr/lib/python3.6/threading.py:1230)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771032.789,"dur":0.2,"name":"is_set (/usr/lib/python3.6/threading.py:506)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771033.389,"dur":0.2,"name":"_thread.get_ident","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771033.289,"dur":0.4,"name":"current_thread (/usr/lib/python3.6/threading.py:1230)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771034.189,"dur":0.3,"name":"_wait_for_tstate_lock (/usr/lib/python3.6/threading.py:1062)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771032.289,"dur":2.3,"name":"join (/usr/lib/python3.6/threading.py:1024)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771040.789,"dur":1.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771042.589,"dur":0.2,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771050.089,"dur":1.3,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771053.089,"dur":1.9,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771052.489,"dur":3.0,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771047.489,"dur":8.3,"name":"is_alive (/usr/lib/python3.6/multiprocessing/process.py:128)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771066.889,"dur":2.1,"name":"ident (/usr/lib/python3.6/multiprocessing/process.py:190)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771073.389,"dur":0.5,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771086.489,"dur":1.1,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771092.489,"dur":3420.5,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774520.189,"dur":1.0,"name":"posix.WIFSIGNALED","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774521.789,"dur":0.4,"name":"posix.WIFEXITED","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774522.789,"dur":0.1,"name":"posix.WEXITSTATUS","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771091.889,"dur":3434.1,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771089.689,"dur":3437.7,"name":"wait (/usr/lib/python3.6/multiprocessing/popen_fork.py:43)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774532.789,"dur":1.9,"name":"set.discard","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607771084.589,"dur":3450.5,"name":"join (/usr/lib/python3.6/multiprocessing/process.py:118)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774541.489,"dur":0.8,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774543.989,"dur":2.7,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774546.989,"dur":0.1,"name":"posix.WIFSIGNALED","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774547.189,"dur":0.02,"name":"posix.WIFEXITED","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774547.289,"dur":0.1,"name":"posix.WEXITSTATUS","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774543.389,"dur":4.2,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774547.889,"dur":0.2,"name":"set.discard","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774539.689,"dur":8.5,"name":"is_alive (/usr/lib/python3.6/multiprocessing/process.py:128)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774548.789,"dur":0.2,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774549.489,"dur":1.7,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774551.389,"dur":0.1,"name":"posix.WIFSIGNALED","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774551.589,"dur":0.1,"name":"posix.WIFEXITED","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774551.709,"dur":0.08,"name":"posix.WEXITSTATUS","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774549.289,"dur":2.7,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774552.189,"dur":0.2,"name":"set.discard","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774548.589,"dur":3.82,"name":"is_alive (/usr/lib/python3.6/multiprocessing/process.py:128)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774552.889,"dur":0.2,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774553.489,"dur":2.0,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774555.689,"dur":0.1,"name":"posix.WIFSIGNALED","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774555.889,"dur":0.1,"name":"posix.WIFEXITED","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774556.009,"dur":0.08,"name":"posix.WEXITSTATUS","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774553.289,"dur":2.9,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774556.389,"dur":0.02,"name":"set.discard","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774552.689,"dur":3.8,"name":"is_alive (/usr/lib/python3.6/multiprocessing/process.py:128)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774556.889,"dur":0.2,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774557.389,"dur":0.9,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774557.289,"dur":1.2,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774556.789,"dur":1.8,"name":"is_alive (/usr/lib/python3.6/multiprocessing/process.py:128)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774561.489,"dur":0.4,"name":"ident (/usr/lib/python3.6/multiprocessing/process.py:190)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774564.989,"dur":0.8,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774568.389,"dur":0.2,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774570.989,"dur":207.8,"name":"posix.waitpid","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774780.489,"dur":0.5,"name":"posix.WIFSIGNALED","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774781.189,"dur":0.1,"name":"posix.WIFEXITED","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774781.389,"dur":0.1,"name":"posix.WEXITSTATUS","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774570.789,"dur":211.1,"name":"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774568.989,"dur":213.4,"name":"wait (/usr/lib/python3.6/multiprocessing/popen_fork.py:43)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774783.389,"dur":0.3,"name":"set.discard","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607774568.089,"dur":215.8,"name":"join (/usr/lib/python3.6/multiprocessing/process.py:118)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673255.089,"dur":101529.6,"name":"_terminate_pool (/usr/lib/python3.6/multiprocessing/pool.py:561)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673250.489,"dur":101537.8,"name":"__call__ (/usr/lib/python3.6/multiprocessing/util.py:167)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673241.189,"dur":101548.3,"name":"terminate (/usr/lib/python3.6/multiprocessing/pool.py:537)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607673237.889,"dur":101552.1,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/pool.py:610)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662233.989,"dur":112557.1,"name":"<module> (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:1)","ph":"X","cat":"FEE"},{"pid":15865,"tid":15865,"ts":14607662233.389,"dur":112560.0,"name":"builtins.exec","ph":"X","cat":"FEE"},{"ph":"M","pid":15872,"tid":15872,"name":"process_name","args":{"name":"ForkPoolWorker-4"}},{"ph":"M","pid":15872,"tid":15865,"name":"thread_name","args":{"name":"MainThread"}},{"pid":15872,"tid":15865,"ts":14607667804.989,"dur":1.4,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667803.889,"dur":2.7,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667809.089,"dur":0.1,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667808.889,"dur":0.4,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667809.589,"dur":0.1,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667809.489,"dur":0.22,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667809.889,"dur":0.1,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667809.789,"dur":0.22,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667461.489,"dur":348.9,"name":"_run_after_forkers (/usr/lib/python3.6/multiprocessing/util.py:127)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667819.689,"dur":0.5,"name":"info (/usr/lib/python3.6/multiprocessing/util.py:52)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667831.589,"dur":2.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667850.789,"dur":1.3,"name":"posix.close","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667850.089,"dur":2.1,"name":"_close (/usr/lib/python3.6/multiprocessing/connection.py:360)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667844.289,"dur":10.4,"name":"close (/usr/lib/python3.6/multiprocessing/connection.py:173)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667857.889,"dur":0.6,"name":"posix.close","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667857.789,"dur":0.72,"name":"_close (/usr/lib/python3.6/multiprocessing/connection.py:360)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667857.389,"dur":1.3,"name":"close (/usr/lib/python3.6/multiprocessing/connection.py:173)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667866.389,"dur":2004.2,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667865.889,"dur":2005.3,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607669882.189,"dur":0.7,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607669885.589,"dur":0.3,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607669905.389,"dur":2.8,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607669908.589,"dur":0.3,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607669914.689,"dur":0.4,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607669889.289,"dur":26.3,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607669924.989,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607669925.289,"dur":7.8,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607669936.889,"dur":1.3,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607669938.389,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607669938.689,"dur":0.5,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607669935.689,"dur":3.7,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607669886.789,"dur":52.8,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607669939.889,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607669878.589,"dur":61.5,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607669941.889,"dur":37.0,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607669941.189,"dur":38.0,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670003.889,"dur":29.9,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667859.389,"dur":2176.5,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670048.989,"dur":0.6,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670039.389,"dur":12.9,"name":"mapstar (/usr/lib/python3.6/multiprocessing/pool.py:43)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670084.689,"dur":5.7,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670091.489,"dur":10.7,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670060.989,"dur":41.5,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670103.689,"dur":4.0,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670108.789,"dur":0.6,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670057.189,"dur":52.3,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670114.789,"dur":2.6,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670114.389,"dur":3.2,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670120.789,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670121.589,"dur":0.2,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670127.089,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670128.989,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670129.689,"dur":1.0,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670136.089,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670136.489,"dur":18.2,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670135.889,"dur":19.7,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670128.889,"dur":27.1,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670120.089,"dur":36.4,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670158.489,"dur":0.3,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670157.789,"dur":1.1,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670053.189,"dur":105.9,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670161.289,"dur":0.9,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670161.189,"dur":1.02,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670163.089,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670163.589,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670165.389,"dur":1.3,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670166.789,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670167.089,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670164.089,"dur":3.4,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670167.989,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670168.289,"dur":0.5,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670169.289,"dur":0.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670169.789,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670169.989,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670169.089,"dur":1.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670163.889,"dur":6.4,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670170.489,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670162.789,"dur":7.82,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670171.089,"dur":13.0,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670170.889,"dur":13.5,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670185.389,"dur":5.1,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670160.689,"dur":29.9,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670192.889,"dur":4.0,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670191.389,"dur":6.6,"name":"mapstar (/usr/lib/python3.6/multiprocessing/pool.py:43)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670204.189,"dur":0.6,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670205.289,"dur":0.9,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670201.089,"dur":5.2,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670206.589,"dur":1.5,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670208.689,"dur":0.4,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670199.489,"dur":9.62,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670210.289,"dur":1.0,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670209.989,"dur":1.32,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670212.089,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670212.589,"dur":0.2,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670213.589,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670214.889,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670215.389,"dur":0.7,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670216.789,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670216.989,"dur":2.1,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670216.689,"dur":2.7,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670214.789,"dur":4.7,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670211.889,"dur":7.8,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670220.289,"dur":13.5,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670220.189,"dur":13.9,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670198.689,"dur":35.9,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670236.889,"dur":566.9,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670236.689,"dur":567.6,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670806.689,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670807.189,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670809.489,"dur":2.2,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670811.989,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670812.389,"dur":0.3,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670807.989,"dur":5.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670813.689,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670813.889,"dur":0.6,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670815.089,"dur":0.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670815.689,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670815.889,"dur":2.8,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670814.789,"dur":4.0,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670807.689,"dur":11.3,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670819.289,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670806.189,"dur":13.22,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670820.489,"dur":46.3,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670820.089,"dur":47.0,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670868.189,"dur":4.0,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670236.089,"dur":636.3,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670873.389,"dur":0.4,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670878.689,"dur":0.5,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670879.689,"dur":0.8,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670875.889,"dur":4.7,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670880.889,"dur":1.4,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670882.889,"dur":0.4,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670874.689,"dur":8.7,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670884.289,"dur":0.9,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670884.189,"dur":1.1,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670886.089,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670886.489,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670887.389,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670888.689,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670888.989,"dur":0.7,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670890.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670890.489,"dur":28.3,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670890.189,"dur":29.2,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670888.589,"dur":31.1,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670885.889,"dur":34.1,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670921.189,"dur":0.2,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670920.889,"dur":0.6,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670874.289,"dur":47.4,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670939.189,"dur":0.6,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670938.989,"dur":0.9,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670940.489,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670940.889,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670942.289,"dur":1.3,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670943.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670943.989,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670941.389,"dur":3.0,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670944.689,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670944.909,"dur":0.38,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670945.889,"dur":0.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670946.389,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670946.489,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670945.589,"dur":1.2,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670941.189,"dur":5.7,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670947.089,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670940.389,"dur":6.82,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670947.689,"dur":12.3,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670947.589,"dur":12.6,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670960.989,"dur":2.6,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670938.789,"dur":24.9,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670964.489,"dur":0.4,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670968.389,"dur":0.3,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670969.189,"dur":0.5,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670966.489,"dur":3.3,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670969.989,"dur":1.1,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670971.589,"dur":0.3,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670965.589,"dur":6.32,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670972.589,"dur":174.0,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670972.489,"dur":174.3,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671148.389,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671148.789,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671149.989,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671151.189,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671151.789,"dur":0.5,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671152.989,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671153.189,"dur":15.3,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671152.889,"dur":16.3,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671151.089,"dur":18.5,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671148.189,"dur":21.8,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671171.489,"dur":11.7,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671170.889,"dur":12.6,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607670965.289,"dur":218.8,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671186.489,"dur":0.8,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671186.289,"dur":1.1,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671188.189,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671188.489,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671190.189,"dur":1.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671191.789,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671192.089,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671188.989,"dur":3.6,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671192.989,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671193.289,"dur":0.4,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671194.289,"dur":0.7,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671195.089,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671195.289,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671193.989,"dur":1.6,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671188.789,"dur":6.9,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671195.989,"dur":0.02,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671187.989,"dur":8.1,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671196.689,"dur":0.5,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671196.489,"dur":0.8,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671197.589,"dur":3.4,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671185.689,"dur":15.4,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671201.789,"dur":0.5,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671206.389,"dur":0.5,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671207.289,"dur":0.7,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671203.789,"dur":4.3,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671208.389,"dur":1.3,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671210.289,"dur":0.3,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671202.989,"dur":7.62,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671211.289,"dur":0.5,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671211.189,"dur":0.62,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671212.289,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671212.589,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671213.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671214.289,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671214.589,"dur":0.4,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671215.489,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671215.689,"dur":1.2,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671215.389,"dur":1.7,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671214.189,"dur":3.1,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671212.189,"dur":5.2,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671217.889,"dur":0.3,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671217.689,"dur":0.52,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671202.589,"dur":15.9,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671219.489,"dur":1541.0,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671219.389,"dur":1541.8,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672765.889,"dur":0.5,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672766.689,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672770.489,"dur":2.3,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672773.089,"dur":0.3,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672773.889,"dur":0.3,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672767.889,"dur":6.7,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672775.789,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672776.089,"dur":0.9,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672777.589,"dur":0.6,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672778.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672778.489,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672777.289,"dur":1.5,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672767.389,"dur":11.5,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672779.189,"dur":0.02,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672764.989,"dur":14.3,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672780.889,"dur":16.6,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672780.189,"dur":17.6,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672799.289,"dur":12.3,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607671219.189,"dur":1592.7,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672812.989,"dur":0.7,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672822.189,"dur":0.6,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672823.489,"dur":1.7,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672817.889,"dur":7.4,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672825.589,"dur":1.6,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672827.889,"dur":0.8,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672815.789,"dur":13.0,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672830.289,"dur":1.1,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672829.889,"dur":1.6,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672832.689,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672833.189,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672834.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672835.689,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672836.189,"dur":0.7,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672837.789,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672838.089,"dur":2.3,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672837.689,"dur":3.0,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672835.489,"dur":5.4,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672832.389,"dur":8.7,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672841.889,"dur":0.1,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672841.689,"dur":0.4,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672814.689,"dur":27.5,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672843.689,"dur":0.4,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672843.589,"dur":0.52,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672844.589,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672844.989,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672846.089,"dur":1.1,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672847.209,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672847.489,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672845.489,"dur":2.3,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672848.189,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672848.309,"dur":0.48,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672849.189,"dur":0.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672849.609,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672849.789,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672848.989,"dur":1.0,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672845.389,"dur":4.7,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672850.289,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672844.489,"dur":5.92,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672850.889,"dur":15.6,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672850.689,"dur":16.0,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672867.589,"dur":3.8,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672843.289,"dur":28.12,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672871.989,"dur":0.3,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672876.389,"dur":0.4,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672877.289,"dur":0.5,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672874.289,"dur":3.6,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672878.189,"dur":1.1,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672879.789,"dur":0.3,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672873.189,"dur":7.0,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672880.989,"dur":69.6,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672880.789,"dur":70.3,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672967.389,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672967.889,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672969.589,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672971.089,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672971.589,"dur":0.9,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672973.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672973.489,"dur":2.3,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672973.189,"dur":19.0,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672970.889,"dur":21.5,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672967.089,"dur":25.6,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672993.589,"dur":0.2,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672993.189,"dur":0.7,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672872.789,"dur":121.3,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672995.789,"dur":97202.2,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672995.689,"dur":97210.3,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770249.189,"dur":2.7,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770254.989,"dur":1.7,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770286.989,"dur":10.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770299.689,"dur":3.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770305.989,"dur":1.5,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770264.789,"dur":44.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770311.989,"dur":0.5,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770312.689,"dur":2.7,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770317.589,"dur":2.0,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770319.889,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770320.489,"dur":0.3,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770316.389,"dur":4.8,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770260.589,"dur":60.9,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770322.589,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770239.289,"dur":83.7,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770326.989,"dur":49.2,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770325.289,"dur":51.8,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770381.789,"dur":5.8,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607672995.289,"dur":97392.7,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770401.789,"dur":1.8,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770408.189,"dur":0.2,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667825.789,"dur":102583.1,"name":"worker (/usr/lib/python3.6/multiprocessing/pool.py:93)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607667820.889,"dur":102590.1,"name":"run (/usr/lib/python3.6/multiprocessing/process.py:88)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770419.689,"dur":0.2,"name":"info (/usr/lib/python3.6/multiprocessing/util.py:52)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770430.089,"dur":0.7,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770460.589,"dur":1.7,"name":"<lambda> (/usr/lib/python3.6/multiprocessing/util.py:246)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770459.489,"dur":3.5,"name":"<listcomp> (/usr/lib/python3.6/multiprocessing/util.py:253)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770465.289,"dur":4.8,"name":"list.sort","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770471.389,"dur":0.8,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770474.389,"dur":0.5,"name":"sub_debug (/usr/lib/python3.6/multiprocessing/util.py:44)","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770494.189,"dur":1.9,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15872,"tid":15865,"ts":14607770499.489,"dur":0.3,"name":"sub_debug (/usr/lib/python3.6/multiprocessing/util.py:44)","ph":"X","cat":"FEE"},{"ph":"M","pid":15873,"tid":15873,"name":"process_name","args":{"name":"ForkPoolWorker-5"}},{"ph":"M","pid":15873,"tid":15865,"name":"thread_name","args":{"name":"MainThread"}},{"pid":15873,"tid":15865,"ts":14607668488.589,"dur":1.3,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668487.489,"dur":2.5,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668493.189,"dur":0.1,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668492.889,"dur":0.5,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668493.689,"dur":0.1,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668493.589,"dur":0.22,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668493.989,"dur":0.02,"name":"_multiprocessing.SemLock._after_fork","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668493.889,"dur":0.2,"name":"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668200.789,"dur":293.7,"name":"_run_after_forkers (/usr/lib/python3.6/multiprocessing/util.py:127)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668504.489,"dur":0.3,"name":"info (/usr/lib/python3.6/multiprocessing/util.py:52)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668514.789,"dur":1.1,"name":"builtins.hasattr","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668530.589,"dur":1.2,"name":"posix.close","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668529.889,"dur":2.0,"name":"_close (/usr/lib/python3.6/multiprocessing/connection.py:360)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668524.989,"dur":19.1,"name":"close (/usr/lib/python3.6/multiprocessing/connection.py:173)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668547.189,"dur":1.3,"name":"posix.close","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668547.089,"dur":1.5,"name":"_close (/usr/lib/python3.6/multiprocessing/connection.py:360)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668546.389,"dur":2.5,"name":"close (/usr/lib/python3.6/multiprocessing/connection.py:173)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668555.289,"dur":1465.3,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668554.789,"dur":1466.3,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670027.489,"dur":0.6,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670029.189,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670039.489,"dur":2.3,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670041.989,"dur":0.3,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670047.589,"dur":0.6,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670031.289,"dur":17.6,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670053.289,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670053.589,"dur":4.3,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670059.889,"dur":1.3,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670061.389,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670061.589,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670058.989,"dur":3.0,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670030.189,"dur":31.9,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670062.489,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670025.289,"dur":37.4,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670066.189,"dur":15.5,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670065.389,"dur":16.5,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670085.489,"dur":22.4,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668549.589,"dur":1559.3,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670119.289,"dur":2.5,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670112.389,"dur":12.0,"name":"mapstar (/usr/lib/python3.6/multiprocessing/pool.py:43)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670141.789,"dur":2.2,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670144.589,"dur":4.1,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670129.889,"dur":18.9,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670149.389,"dur":4.2,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670154.689,"dur":0.5,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670127.589,"dur":27.7,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670159.489,"dur":2.9,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670159.089,"dur":3.4,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670165.289,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670165.989,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670174.189,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670176.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670176.989,"dur":0.9,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670180.589,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670180.989,"dur":4.9,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670180.489,"dur":5.8,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670176.189,"dur":10.3,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670164.589,"dur":22.2,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670188.189,"dur":0.2,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670187.589,"dur":0.82,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670125.289,"dur":63.3,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670190.389,"dur":0.3,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670190.189,"dur":0.6,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670191.389,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670191.689,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670193.189,"dur":1.2,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670194.489,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670194.689,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670192.289,"dur":2.8,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670195.489,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670195.689,"dur":0.4,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670196.589,"dur":0.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670197.089,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670197.189,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670196.389,"dur":1.0,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670192.089,"dur":5.4,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670197.789,"dur":0.02,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670191.189,"dur":6.7,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670198.289,"dur":0.7,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670198.189,"dur":0.82,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670199.489,"dur":3.6,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670189.889,"dur":13.22,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670204.589,"dur":0.4,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670203.589,"dur":1.7,"name":"mapstar (/usr/lib/python3.6/multiprocessing/pool.py:43)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670208.589,"dur":0.3,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670209.189,"dur":0.6,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670206.589,"dur":3.3,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670210.189,"dur":0.9,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670211.389,"dur":0.3,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670205.889,"dur":5.82,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670212.289,"dur":40.0,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670212.189,"dur":40.5,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670254.789,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670255.189,"dur":0.2,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670256.789,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670258.289,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670258.789,"dur":0.8,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670260.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670260.489,"dur":34.4,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670260.189,"dur":35.3,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670258.089,"dur":37.7,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670254.489,"dur":41.6,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670297.589,"dur":2.4,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670296.989,"dur":3.1,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670205.589,"dur":94.8,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670302.289,"dur":689.6,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670302.089,"dur":690.5,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670995.289,"dur":0.4,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670995.889,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670998.689,"dur":2.3,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671001.389,"dur":0.3,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671001.989,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670996.889,"dur":5.7,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671003.389,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671003.589,"dur":0.6,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671004.789,"dur":0.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671005.389,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671005.589,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671004.489,"dur":1.3,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670996.489,"dur":9.5,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671006.289,"dur":0.02,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670994.889,"dur":11.5,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671007.389,"dur":15.8,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671006.989,"dur":16.4,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671024.489,"dur":4.3,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607670301.789,"dur":727.2,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671030.089,"dur":0.5,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671035.689,"dur":0.5,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671036.689,"dur":0.8,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671032.889,"dur":4.7,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671037.889,"dur":1.4,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671039.889,"dur":0.4,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671031.589,"dur":8.8,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671041.389,"dur":0.9,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671041.189,"dur":1.12,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671042.989,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671043.389,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671044.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671045.589,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671045.789,"dur":0.7,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671047.189,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671047.489,"dur":15.6,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671047.089,"dur":16.7,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671045.489,"dur":18.6,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671042.789,"dur":21.6,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671065.589,"dur":2.0,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671065.189,"dur":2.5,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671030.989,"dur":37.0,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671069.589,"dur":0.7,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671069.489,"dur":0.9,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671071.089,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671071.389,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671072.889,"dur":1.2,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671074.189,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671074.589,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671071.889,"dur":3.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671075.289,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671075.489,"dur":0.4,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671076.389,"dur":0.3,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671076.789,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671076.989,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671076.089,"dur":1.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671071.789,"dur":5.5,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671077.489,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671070.889,"dur":6.72,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671077.989,"dur":12.5,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671077.889,"dur":12.8,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671091.489,"dur":2.7,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671069.189,"dur":25.1,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671095.089,"dur":0.5,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671098.989,"dur":0.4,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671099.689,"dur":0.5,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671097.089,"dur":3.2,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671100.489,"dur":1.2,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671102.089,"dur":0.3,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671096.189,"dur":6.22,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671103.189,"dur":0.8,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671102.989,"dur":1.1,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671104.589,"dur":0.2,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671104.889,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671105.689,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671106.689,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671106.889,"dur":0.4,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671107.809,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671108.089,"dur":1.4,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671107.789,"dur":1.9,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671106.589,"dur":3.4,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671104.489,"dur":5.7,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671110.789,"dur":0.4,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671110.589,"dur":0.7,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671095.989,"dur":15.4,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671112.589,"dur":0.2,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671112.389,"dur":0.5,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671113.189,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671113.389,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671114.189,"dur":0.9,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671115.189,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671115.489,"dur":0.02,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671113.789,"dur":2.0,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671115.989,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671116.189,"dur":0.3,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671116.889,"dur":0.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671117.309,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671117.489,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671116.689,"dur":1.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671113.689,"dur":4.12,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671118.089,"dur":0.02,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671113.089,"dur":5.1,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671118.489,"dur":1.5,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671118.389,"dur":1.62,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671120.289,"dur":1.4,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671112.189,"dur":9.6,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671122.189,"dur":0.4,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671124.489,"dur":0.1,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671124.789,"dur":0.2,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671123.489,"dur":1.6,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671125.289,"dur":0.6,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671126.089,"dur":0.1,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671123.089,"dur":3.2,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671126.689,"dur":0.3,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671126.589,"dur":0.42,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671127.389,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671127.589,"dur":0.1,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671127.989,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671128.589,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671128.789,"dur":0.2,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671129.289,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671129.409,"dur":0.88,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671129.189,"dur":1.3,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671128.489,"dur":2.1,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671127.289,"dur":3.4,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671130.989,"dur":0.4,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671130.889,"dur":0.52,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671122.789,"dur":8.8,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671132.389,"dur":0.2,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671132.289,"dur":0.32,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671132.989,"dur":0.1,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671133.189,"dur":0.1,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671133.889,"dur":0.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671134.489,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671134.689,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671133.489,"dur":1.4,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671135.089,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671135.209,"dur":0.18,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671135.789,"dur":0.4,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671136.209,"dur":0.08,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671136.389,"dur":0.02,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671135.589,"dur":0.9,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671133.389,"dur":3.2,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671136.789,"dur":0.02,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671132.889,"dur":4.0,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671137.189,"dur":4.8,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671137.089,"dur":5.0,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671142.389,"dur":1.1,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671132.089,"dur":11.42,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671143.989,"dur":0.5,"name":"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671146.589,"dur":0.1,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671146.889,"dur":0.3,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671145.389,"dur":1.82,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671147.389,"dur":0.8,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671148.389,"dur":0.1,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671144.889,"dur":3.7,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671148.989,"dur":75.7,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671148.889,"dur":76.3,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671227.689,"dur":0.3,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671228.189,"dur":0.2,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671230.089,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671231.489,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671232.089,"dur":0.9,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671233.789,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671234.089,"dur":2.2,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671233.689,"dur":3.0,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671231.389,"dur":5.5,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671227.189,"dur":10.0,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671238.389,"dur":0.2,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671237.889,"dur":0.8,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671144.689,"dur":94.2,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671240.889,"dur":1568.1,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671240.789,"dur":1569.3,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672814.289,"dur":0.5,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672814.989,"dur":0.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672818.889,"dur":2.3,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672821.489,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672822.089,"dur":0.3,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672816.189,"dur":6.7,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672823.789,"dur":0.2,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672824.089,"dur":1.2,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672825.989,"dur":0.5,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672826.589,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672826.789,"dur":0.1,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672825.589,"dur":1.5,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672815.789,"dur":11.4,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672827.489,"dur":0.02,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672813.589,"dur":14.0,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672828.889,"dur":15.4,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672828.289,"dur":16.3,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672845.989,"dur":12.6,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607671240.289,"dur":1618.7,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672859.789,"dur":0.8,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672868.989,"dur":0.6,"name":"dict.copy","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672870.289,"dur":1.5,"name":"dict.update","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672864.989,"dur":7.0,"name":"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672872.389,"dur":1.7,"name":"ForkingPickler.dump","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672874.589,"dur":1.0,"name":"_io.BytesIO.getbuffer","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672862.789,"dur":12.9,"name":"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672877.489,"dur":1.1,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672877.089,"dur":1.6,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672879.889,"dur":0.6,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672880.789,"dur":0.2,"name":"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672881.789,"dur":0.2,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672883.289,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672883.789,"dur":0.7,"name":"_struct.pack","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672885.489,"dur":0.02,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672885.689,"dur":16.3,"name":"posix.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672885.389,"dur":17.2,"name":"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672883.089,"dur":19.9,"name":"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672879.489,"dur":23.8,"name":"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672904.589,"dur":12.0,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672904.189,"dur":12.6,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672861.589,"dur":55.7,"name":"put (/usr/lib/python3.6/multiprocessing/queues.py:339)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672919.889,"dur":96571.6,"name":"_multiprocessing.SemLock.__enter__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672919.589,"dur":96580.7,"name":"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769535.889,"dur":3.9,"name":"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769541.489,"dur":2.2,"name":"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769571.989,"dur":11.9,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769587.289,"dur":2.8,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769594.789,"dur":1.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769552.589,"dur":45.4,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769607.589,"dur":1.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769608.889,"dur":6.9,"name":"_struct.unpack","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769618.189,"dur":1.1,"name":"posix.read","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769619.589,"dur":0.1,"name":"builtins.len","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769620.789,"dur":0.2,"name":"_io.BytesIO.write","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769617.189,"dur":4.1,"name":"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769549.789,"dur":72.4,"name":"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769622.989,"dur":0.1,"name":"_io.BytesIO.getvalue","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769529.389,"dur":93.9,"name":"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769633.389,"dur":78.8,"name":"_multiprocessing.SemLock.__exit__","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769628.589,"dur":84.4,"name":"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769723.089,"dur":14.6,"name":"_pickle.loads","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607672918.989,"dur":96819.7,"name":"get (/usr/lib/python3.6/multiprocessing/queues.py:333)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769778.289,"dur":3.5,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769789.689,"dur":0.2,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668510.189,"dur":101280.0,"name":"worker (/usr/lib/python3.6/multiprocessing/pool.py:93)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607668505.489,"dur":101290.9,"name":"run (/usr/lib/python3.6/multiprocessing/process.py:88)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769825.089,"dur":0.5,"name":"info (/usr/lib/python3.6/multiprocessing/util.py:52)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769835.889,"dur":0.3,"name":"debug (/usr/lib/python3.6/multiprocessing/util.py:48)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769944.589,"dur":2.2,"name":"<lambda> (/usr/lib/python3.6/multiprocessing/util.py:246)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769942.189,"dur":5.6,"name":"<listcomp> (/usr/lib/python3.6/multiprocessing/util.py:253)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769950.789,"dur":7.3,"name":"list.sort","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769960.189,"dur":1.2,"name":"dict.get","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607769972.689,"dur":1.1,"name":"sub_debug (/usr/lib/python3.6/multiprocessing/util.py:44)","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607770000.989,"dur":3.1,"name":"posix.getpid","ph":"X","cat":"FEE"},{"pid":15873,"tid":15865,"ts":14607770011.789,"dur":0.4,"name":"sub_debug (/usr/lib/python3.6/multiprocessing/util.py:44)","ph":"X","cat":"FEE"}],"viztracer_metadata":{"version":"0.13.1"},"displayTimeUnit":"us","file_info":{"files":{"/usr/lib/python3.6/multiprocessing/synchronize.py":["#\n# Module implementing synchronization primitives\n#\n# multiprocessing/synchronize.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\n__all__ = [\n    'Lock', 'RLock', 'Semaphore', 'BoundedSemaphore', 'Condition', 'Event'\n    ]\n\nimport threading\nimport sys\nimport tempfile\nimport _multiprocessing\nimport time\n\nfrom . import context\nfrom . import process\nfrom . import util\n\n# Try to import the mp.synchronize module cleanly, if it fails\n# raise ImportError for platforms lacking a working sem_open implementation.\n# See issue 3770\ntry:\n    from _multiprocessing import SemLock, sem_unlink\nexcept (ImportError):\n    raise ImportError(\"This platform lacks a functioning sem_open\" +\n                      \" implementation, therefore, the required\" +\n                      \" synchronization primitives needed will not\" +\n                      \" function, see issue 3770.\")\n\n#\n# Constants\n#\n\nRECURSIVE_MUTEX, SEMAPHORE = list(range(2))\nSEM_VALUE_MAX = _multiprocessing.SemLock.SEM_VALUE_MAX\n\n#\n# Base class for semaphores and mutexes; wraps `_multiprocessing.SemLock`\n#\n\nclass SemLock(object):\n\n    _rand = tempfile._RandomNameSequence()\n\n    def __init__(self, kind, value, maxvalue, *, ctx):\n        if ctx is None:\n            ctx = context._default_context.get_context()\n        name = ctx.get_start_method()\n        unlink_now = sys.platform == 'win32' or name == 'fork'\n        for i in range(100):\n            try:\n                sl = self._semlock = _multiprocessing.SemLock(\n                    kind, value, maxvalue, self._make_name(),\n                    unlink_now)\n            except FileExistsError:\n                pass\n            else:\n                break\n        else:\n            raise FileExistsError('cannot find name for semaphore')\n\n        util.debug('created semlock with handle %s' % sl.handle)\n        self._make_methods()\n\n        if sys.platform != 'win32':\n            def _after_fork(obj):\n                obj._semlock._after_fork()\n            util.register_after_fork(self, _after_fork)\n\n        if self._semlock.name is not None:\n            # We only get here if we are on Unix with forking\n            # disabled.  When the object is garbage collected or the\n            # process shuts down we unlink the semaphore name\n            from .semaphore_tracker import register\n            register(self._semlock.name)\n            util.Finalize(self, SemLock._cleanup, (self._semlock.name,),\n                          exitpriority=0)\n\n    @staticmethod\n    def _cleanup(name):\n        from .semaphore_tracker import unregister\n        sem_unlink(name)\n        unregister(name)\n\n    def _make_methods(self):\n        self.acquire = self._semlock.acquire\n        self.release = self._semlock.release\n\n    def __enter__(self):\n        return self._semlock.__enter__()\n\n    def __exit__(self, *args):\n        return self._semlock.__exit__(*args)\n\n    def __getstate__(self):\n        context.assert_spawning(self)\n        sl = self._semlock\n        if sys.platform == 'win32':\n            h = context.get_spawning_popen().duplicate_for_child(sl.handle)\n        else:\n            h = sl.handle\n        return (h, sl.kind, sl.maxvalue, sl.name)\n\n    def __setstate__(self, state):\n        self._semlock = _multiprocessing.SemLock._rebuild(*state)\n        util.debug('recreated blocker with handle %r' % state[0])\n        self._make_methods()\n\n    @staticmethod\n    def _make_name():\n        return '%s-%s' % (process.current_process()._config['semprefix'],\n                          next(SemLock._rand))\n\n#\n# Semaphore\n#\n\nclass Semaphore(SemLock):\n\n    def __init__(self, value=1, *, ctx):\n        SemLock.__init__(self, SEMAPHORE, value, SEM_VALUE_MAX, ctx=ctx)\n\n    def get_value(self):\n        return self._semlock._get_value()\n\n    def __repr__(self):\n        try:\n            value = self._semlock._get_value()\n        except Exception:\n            value = 'unknown'\n        return '<%s(value=%s)>' % (self.__class__.__name__, value)\n\n#\n# Bounded semaphore\n#\n\nclass BoundedSemaphore(Semaphore):\n\n    def __init__(self, value=1, *, ctx):\n        SemLock.__init__(self, SEMAPHORE, value, value, ctx=ctx)\n\n    def __repr__(self):\n        try:\n            value = self._semlock._get_value()\n        except Exception:\n            value = 'unknown'\n        return '<%s(value=%s, maxvalue=%s)>' % \\\n               (self.__class__.__name__, value, self._semlock.maxvalue)\n\n#\n# Non-recursive lock\n#\n\nclass Lock(SemLock):\n\n    def __init__(self, *, ctx):\n        SemLock.__init__(self, SEMAPHORE, 1, 1, ctx=ctx)\n\n    def __repr__(self):\n        try:\n            if self._semlock._is_mine():\n                name = process.current_process().name\n                if threading.current_thread().name != 'MainThread':\n                    name += '|' + threading.current_thread().name\n            elif self._semlock._get_value() == 1:\n                name = 'None'\n            elif self._semlock._count() > 0:\n                name = 'SomeOtherThread'\n            else:\n                name = 'SomeOtherProcess'\n        except Exception:\n            name = 'unknown'\n        return '<%s(owner=%s)>' % (self.__class__.__name__, name)\n\n#\n# Recursive lock\n#\n\nclass RLock(SemLock):\n\n    def __init__(self, *, ctx):\n        SemLock.__init__(self, RECURSIVE_MUTEX, 1, 1, ctx=ctx)\n\n    def __repr__(self):\n        try:\n            if self._semlock._is_mine():\n                name = process.current_process().name\n                if threading.current_thread().name != 'MainThread':\n                    name += '|' + threading.current_thread().name\n                count = self._semlock._count()\n            elif self._semlock._get_value() == 1:\n                name, count = 'None', 0\n            elif self._semlock._count() > 0:\n                name, count = 'SomeOtherThread', 'nonzero'\n            else:\n                name, count = 'SomeOtherProcess', 'nonzero'\n        except Exception:\n            name, count = 'unknown', 'unknown'\n        return '<%s(%s, %s)>' % (self.__class__.__name__, name, count)\n\n#\n# Condition variable\n#\n\nclass Condition(object):\n\n    def __init__(self, lock=None, *, ctx):\n        self._lock = lock or ctx.RLock()\n        self._sleeping_count = ctx.Semaphore(0)\n        self._woken_count = ctx.Semaphore(0)\n        self._wait_semaphore = ctx.Semaphore(0)\n        self._make_methods()\n\n    def __getstate__(self):\n        context.assert_spawning(self)\n        return (self._lock, self._sleeping_count,\n                self._woken_count, self._wait_semaphore)\n\n    def __setstate__(self, state):\n        (self._lock, self._sleeping_count,\n         self._woken_count, self._wait_semaphore) = state\n        self._make_methods()\n\n    def __enter__(self):\n        return self._lock.__enter__()\n\n    def __exit__(self, *args):\n        return self._lock.__exit__(*args)\n\n    def _make_methods(self):\n        self.acquire = self._lock.acquire\n        self.release = self._lock.release\n\n    def __repr__(self):\n        try:\n            num_waiters = (self._sleeping_count._semlock._get_value() -\n                           self._woken_count._semlock._get_value())\n        except Exception:\n            num_waiters = 'unknown'\n        return '<%s(%s, %s)>' % (self.__class__.__name__, self._lock, num_waiters)\n\n    def wait(self, timeout=None):\n        assert self._lock._semlock._is_mine(), \\\n               'must acquire() condition before using wait()'\n\n        # indicate that this thread is going to sleep\n        self._sleeping_count.release()\n\n        # release lock\n        count = self._lock._semlock._count()\n        for i in range(count):\n            self._lock.release()\n\n        try:\n            # wait for notification or timeout\n            return self._wait_semaphore.acquire(True, timeout)\n        finally:\n            # indicate that this thread has woken\n            self._woken_count.release()\n\n            # reacquire lock\n            for i in range(count):\n                self._lock.acquire()\n\n    def notify(self):\n        assert self._lock._semlock._is_mine(), 'lock is not owned'\n        assert not self._wait_semaphore.acquire(False)\n\n        # to take account of timeouts since last notify() we subtract\n        # woken_count from sleeping_count and rezero woken_count\n        while self._woken_count.acquire(False):\n            res = self._sleeping_count.acquire(False)\n            assert res\n\n        if self._sleeping_count.acquire(False): # try grabbing a sleeper\n            self._wait_semaphore.release()      # wake up one sleeper\n            self._woken_count.acquire()         # wait for the sleeper to wake\n\n            # rezero _wait_semaphore in case a timeout just happened\n            self._wait_semaphore.acquire(False)\n\n    def notify_all(self):\n        assert self._lock._semlock._is_mine(), 'lock is not owned'\n        assert not self._wait_semaphore.acquire(False)\n\n        # to take account of timeouts since last notify*() we subtract\n        # woken_count from sleeping_count and rezero woken_count\n        while self._woken_count.acquire(False):\n            res = self._sleeping_count.acquire(False)\n            assert res\n\n        sleepers = 0\n        while self._sleeping_count.acquire(False):\n            self._wait_semaphore.release()        # wake up one sleeper\n            sleepers += 1\n\n        if sleepers:\n            for i in range(sleepers):\n                self._woken_count.acquire()       # wait for a sleeper to wake\n\n            # rezero wait_semaphore in case some timeouts just happened\n            while self._wait_semaphore.acquire(False):\n                pass\n\n    def wait_for(self, predicate, timeout=None):\n        result = predicate()\n        if result:\n            return result\n        if timeout is not None:\n            endtime = time.monotonic() + timeout\n        else:\n            endtime = None\n            waittime = None\n        while not result:\n            if endtime is not None:\n                waittime = endtime - time.monotonic()\n                if waittime <= 0:\n                    break\n            self.wait(waittime)\n            result = predicate()\n        return result\n\n#\n# Event\n#\n\nclass Event(object):\n\n    def __init__(self, *, ctx):\n        self._cond = ctx.Condition(ctx.Lock())\n        self._flag = ctx.Semaphore(0)\n\n    def is_set(self):\n        with self._cond:\n            if self._flag.acquire(False):\n                self._flag.release()\n                return True\n            return False\n\n    def set(self):\n        with self._cond:\n            self._flag.acquire(False)\n            self._flag.release()\n            self._cond.notify_all()\n\n    def clear(self):\n        with self._cond:\n            self._flag.acquire(False)\n\n    def wait(self, timeout=None):\n        with self._cond:\n            if self._flag.acquire(False):\n                self._flag.release()\n            else:\n                self._cond.wait(timeout)\n\n            if self._flag.acquire(False):\n                self._flag.release()\n                return True\n            return False\n\n#\n# Barrier\n#\n\nclass Barrier(threading.Barrier):\n\n    def __init__(self, parties, action=None, timeout=None, *, ctx):\n        import struct\n        from .heap import BufferWrapper\n        wrapper = BufferWrapper(struct.calcsize('i') * 2)\n        cond = ctx.Condition()\n        self.__setstate__((parties, action, timeout, cond, wrapper))\n        self._state = 0\n        self._count = 0\n\n    def __setstate__(self, state):\n        (self._parties, self._action, self._timeout,\n         self._cond, self._wrapper) = state\n        self._array = self._wrapper.create_memoryview().cast('i')\n\n    def __getstate__(self):\n        return (self._parties, self._action, self._timeout,\n                self._cond, self._wrapper)\n\n    @property\n    def _state(self):\n        return self._array[0]\n\n    @_state.setter\n    def _state(self, value):\n        self._array[0] = value\n\n    @property\n    def _count(self):\n        return self._array[1]\n\n    @_count.setter\n    def _count(self, value):\n        self._array[1] = value\n",405],"/usr/lib/python3.6/multiprocessing/util.py":["#\n# Module providing various facilities to other parts of the package\n#\n# multiprocessing/util.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\nimport os\nimport itertools\nimport sys\nimport weakref\nimport atexit\nimport threading        # we want threading to install it's\n                        # cleanup function before multiprocessing does\nfrom subprocess import _args_from_interpreter_flags\n\nfrom . import process\n\n__all__ = [\n    'sub_debug', 'debug', 'info', 'sub_warning', 'get_logger',\n    'log_to_stderr', 'get_temp_dir', 'register_after_fork',\n    'is_exiting', 'Finalize', 'ForkAwareThreadLock', 'ForkAwareLocal',\n    'close_all_fds_except', 'SUBDEBUG', 'SUBWARNING',\n    ]\n\n#\n# Logging\n#\n\nNOTSET = 0\nSUBDEBUG = 5\nDEBUG = 10\nINFO = 20\nSUBWARNING = 25\n\nLOGGER_NAME = 'multiprocessing'\nDEFAULT_LOGGING_FORMAT = '[%(levelname)s/%(processName)s] %(message)s'\n\n_logger = None\n_log_to_stderr = False\n\ndef sub_debug(msg, *args):\n    if _logger:\n        _logger.log(SUBDEBUG, msg, *args)\n\ndef debug(msg, *args):\n    if _logger:\n        _logger.log(DEBUG, msg, *args)\n\ndef info(msg, *args):\n    if _logger:\n        _logger.log(INFO, msg, *args)\n\ndef sub_warning(msg, *args):\n    if _logger:\n        _logger.log(SUBWARNING, msg, *args)\n\ndef get_logger():\n    '''\n    Returns logger used by multiprocessing\n    '''\n    global _logger\n    import logging\n\n    logging._acquireLock()\n    try:\n        if not _logger:\n\n            _logger = logging.getLogger(LOGGER_NAME)\n            _logger.propagate = 0\n\n            # XXX multiprocessing should cleanup before logging\n            if hasattr(atexit, 'unregister'):\n                atexit.unregister(_exit_function)\n                atexit.register(_exit_function)\n            else:\n                atexit._exithandlers.remove((_exit_function, (), {}))\n                atexit._exithandlers.append((_exit_function, (), {}))\n\n    finally:\n        logging._releaseLock()\n\n    return _logger\n\ndef log_to_stderr(level=None):\n    '''\n    Turn on logging and add a handler which prints to stderr\n    '''\n    global _log_to_stderr\n    import logging\n\n    logger = get_logger()\n    formatter = logging.Formatter(DEFAULT_LOGGING_FORMAT)\n    handler = logging.StreamHandler()\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n\n    if level:\n        logger.setLevel(level)\n    _log_to_stderr = True\n    return _logger\n\n#\n# Function returning a temp directory which will be removed on exit\n#\n\ndef get_temp_dir():\n    # get name of a temp directory which will be automatically cleaned up\n    tempdir = process.current_process()._config.get('tempdir')\n    if tempdir is None:\n        import shutil, tempfile\n        tempdir = tempfile.mkdtemp(prefix='pymp-')\n        info('created temp directory %s', tempdir)\n        Finalize(None, shutil.rmtree, args=[tempdir], exitpriority=-100)\n        process.current_process()._config['tempdir'] = tempdir\n    return tempdir\n\n#\n# Support for reinitialization of objects when bootstrapping a child process\n#\n\n_afterfork_registry = weakref.WeakValueDictionary()\n_afterfork_counter = itertools.count()\n\ndef _run_after_forkers():\n    items = list(_afterfork_registry.items())\n    items.sort()\n    for (index, ident, func), obj in items:\n        try:\n            func(obj)\n        except Exception as e:\n            info('after forker raised exception %s', e)\n\ndef register_after_fork(obj, func):\n    _afterfork_registry[(next(_afterfork_counter), id(obj), func)] = obj\n\n#\n# Finalization using weakrefs\n#\n\n_finalizer_registry = {}\n_finalizer_counter = itertools.count()\n\n\nclass Finalize(object):\n    '''\n    Class which supports object finalization using weakrefs\n    '''\n    def __init__(self, obj, callback, args=(), kwargs=None, exitpriority=None):\n        assert exitpriority is None or type(exitpriority) is int\n\n        if obj is not None:\n            self._weakref = weakref.ref(obj, self)\n        else:\n            assert exitpriority is not None\n\n        self._callback = callback\n        self._args = args\n        self._kwargs = kwargs or {}\n        self._key = (exitpriority, next(_finalizer_counter))\n        self._pid = os.getpid()\n\n        _finalizer_registry[self._key] = self\n\n    def __call__(self, wr=None,\n                 # Need to bind these locally because the globals can have\n                 # been cleared at shutdown\n                 _finalizer_registry=_finalizer_registry,\n                 sub_debug=sub_debug, getpid=os.getpid):\n        '''\n        Run the callback unless it has already been called or cancelled\n        '''\n        try:\n            del _finalizer_registry[self._key]\n        except KeyError:\n            sub_debug('finalizer no longer registered')\n        else:\n            if self._pid != getpid():\n                sub_debug('finalizer ignored because different process')\n                res = None\n            else:\n                sub_debug('finalizer calling %s with args %s and kwargs %s',\n                          self._callback, self._args, self._kwargs)\n                res = self._callback(*self._args, **self._kwargs)\n            self._weakref = self._callback = self._args = \\\n                            self._kwargs = self._key = None\n            return res\n\n    def cancel(self):\n        '''\n        Cancel finalization of the object\n        '''\n        try:\n            del _finalizer_registry[self._key]\n        except KeyError:\n            pass\n        else:\n            self._weakref = self._callback = self._args = \\\n                            self._kwargs = self._key = None\n\n    def still_active(self):\n        '''\n        Return whether this finalizer is still waiting to invoke callback\n        '''\n        return self._key in _finalizer_registry\n\n    def __repr__(self):\n        try:\n            obj = self._weakref()\n        except (AttributeError, TypeError):\n            obj = None\n\n        if obj is None:\n            return '<%s object, dead>' % self.__class__.__name__\n\n        x = '<%s object, callback=%s' % (\n                self.__class__.__name__,\n                getattr(self._callback, '__name__', self._callback))\n        if self._args:\n            x += ', args=' + str(self._args)\n        if self._kwargs:\n            x += ', kwargs=' + str(self._kwargs)\n        if self._key[0] is not None:\n            x += ', exitprority=' + str(self._key[0])\n        return x + '>'\n\n\ndef _run_finalizers(minpriority=None):\n    '''\n    Run all finalizers whose exit priority is not None and at least minpriority\n\n    Finalizers with highest priority are called first; finalizers with\n    the same priority will be called in reverse order of creation.\n    '''\n    if _finalizer_registry is None:\n        # This function may be called after this module's globals are\n        # destroyed.  See the _exit_function function in this module for more\n        # notes.\n        return\n\n    if minpriority is None:\n        f = lambda p : p[0] is not None\n    else:\n        f = lambda p : p[0] is not None and p[0] >= minpriority\n\n    # Careful: _finalizer_registry may be mutated while this function\n    # is running (either by a GC run or by another thread).\n\n    # list(_finalizer_registry) should be atomic, while\n    # list(_finalizer_registry.items()) is not.\n    keys = [key for key in list(_finalizer_registry) if f(key)]\n    keys.sort(reverse=True)\n\n    for key in keys:\n        finalizer = _finalizer_registry.get(key)\n        # key may have been removed from the registry\n        if finalizer is not None:\n            sub_debug('calling %s', finalizer)\n            try:\n                finalizer()\n            except Exception:\n                import traceback\n                traceback.print_exc()\n\n    if minpriority is None:\n        _finalizer_registry.clear()\n\n#\n# Clean up on exit\n#\n\ndef is_exiting():\n    '''\n    Returns true if the process is shutting down\n    '''\n    return _exiting or _exiting is None\n\n_exiting = False\n\ndef _exit_function(info=info, debug=debug, _run_finalizers=_run_finalizers,\n                   active_children=process.active_children,\n                   current_process=process.current_process):\n    # We hold on to references to functions in the arglist due to the\n    # situation described below, where this function is called after this\n    # module's globals are destroyed.\n\n    global _exiting\n\n    if not _exiting:\n        _exiting = True\n\n        info('process shutting down')\n        debug('running all \"atexit\" finalizers with priority >= 0')\n        _run_finalizers(0)\n\n        if current_process() is not None:\n            # We check if the current process is None here because if\n            # it's None, any call to ``active_children()`` will raise\n            # an AttributeError (active_children winds up trying to\n            # get attributes from util._current_process).  One\n            # situation where this can happen is if someone has\n            # manipulated sys.modules, causing this module to be\n            # garbage collected.  The destructor for the module type\n            # then replaces all values in the module dict with None.\n            # For instance, after setuptools runs a test it replaces\n            # sys.modules with a copy created earlier.  See issues\n            # #9775 and #15881.  Also related: #4106, #9205, and\n            # #9207.\n\n            for p in active_children():\n                if p.daemon:\n                    info('calling terminate() for daemon %s', p.name)\n                    p._popen.terminate()\n\n            for p in active_children():\n                info('calling join() for process %s', p.name)\n                p.join()\n\n        debug('running the remaining \"atexit\" finalizers')\n        _run_finalizers()\n\natexit.register(_exit_function)\n\n#\n# Some fork aware types\n#\n\nclass ForkAwareThreadLock(object):\n    def __init__(self):\n        self._reset()\n        register_after_fork(self, ForkAwareThreadLock._reset)\n\n    def _reset(self):\n        self._lock = threading.Lock()\n        self.acquire = self._lock.acquire\n        self.release = self._lock.release\n\n    def __enter__(self):\n        return self._lock.__enter__()\n\n    def __exit__(self, *args):\n        return self._lock.__exit__(*args)\n\n\nclass ForkAwareLocal(threading.local):\n    def __init__(self):\n        register_after_fork(self, lambda obj : obj.__dict__.clear())\n    def __reduce__(self):\n        return type(self), ()\n\n#\n# Close fds except those specified\n#\n\ntry:\n    MAXFD = os.sysconf(\"SC_OPEN_MAX\")\nexcept Exception:\n    MAXFD = 256\n\ndef close_all_fds_except(fds):\n    fds = list(fds) + [-1, MAXFD]\n    fds.sort()\n    assert fds[-1] == MAXFD, 'fd too large'\n    for i in range(len(fds) - 1):\n        os.closerange(fds[i]+1, fds[i+1])\n#\n# Close sys.stdin and replace stdin with os.devnull\n#\n\ndef _close_stdin():\n    if sys.stdin is None:\n        return\n\n    try:\n        sys.stdin.close()\n    except (OSError, ValueError):\n        pass\n\n    try:\n        fd = os.open(os.devnull, os.O_RDONLY)\n        try:\n            sys.stdin = open(fd, closefd=False)\n        except:\n            os.close(fd)\n            raise\n    except (OSError, ValueError):\n        pass\n\n#\n# Flush standard streams, if any\n#\n\ndef _flush_std_streams():\n    try:\n        sys.stdout.flush()\n    except (AttributeError, ValueError):\n        pass\n    try:\n        sys.stderr.flush()\n    except (AttributeError, ValueError):\n        pass\n\n#\n# Start a program with only specified fds kept open\n#\n\ndef spawnv_passfds(path, args, passfds):\n    import _posixsubprocess\n    passfds = tuple(sorted(map(int, passfds)))\n    errpipe_read, errpipe_write = os.pipe()\n    try:\n        return _posixsubprocess.fork_exec(\n            args, [os.fsencode(path)], True, passfds, None, None,\n            -1, -1, -1, -1, -1, -1, errpipe_read, errpipe_write,\n            False, False, None)\n    finally:\n        os.close(errpipe_read)\n        os.close(errpipe_write)\n",420],"/usr/lib/python3.6/multiprocessing/connection.py":["#\n# A higher level module for using sockets (or Windows named pipes)\n#\n# multiprocessing/connection.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\n__all__ = [ 'Client', 'Listener', 'Pipe', 'wait' ]\n\nimport io\nimport os\nimport sys\nimport socket\nimport struct\nimport time\nimport tempfile\nimport itertools\n\nimport _multiprocessing\n\nfrom . import util\n\nfrom . import AuthenticationError, BufferTooShort\nfrom .context import reduction\n_ForkingPickler = reduction.ForkingPickler\n\ntry:\n    import _winapi\n    from _winapi import WAIT_OBJECT_0, WAIT_ABANDONED_0, WAIT_TIMEOUT, INFINITE\nexcept ImportError:\n    if sys.platform == 'win32':\n        raise\n    _winapi = None\n\n#\n#\n#\n\nBUFSIZE = 8192\n# A very generous timeout when it comes to local connections...\nCONNECTION_TIMEOUT = 20.\n\n_mmap_counter = itertools.count()\n\ndefault_family = 'AF_INET'\nfamilies = ['AF_INET']\n\nif hasattr(socket, 'AF_UNIX'):\n    default_family = 'AF_UNIX'\n    families += ['AF_UNIX']\n\nif sys.platform == 'win32':\n    default_family = 'AF_PIPE'\n    families += ['AF_PIPE']\n\n\ndef _init_timeout(timeout=CONNECTION_TIMEOUT):\n    return time.monotonic() + timeout\n\ndef _check_timeout(t):\n    return time.monotonic() > t\n\n#\n#\n#\n\ndef arbitrary_address(family):\n    '''\n    Return an arbitrary free address for the given family\n    '''\n    if family == 'AF_INET':\n        return ('localhost', 0)\n    elif family == 'AF_UNIX':\n        return tempfile.mktemp(prefix='listener-', dir=util.get_temp_dir())\n    elif family == 'AF_PIPE':\n        return tempfile.mktemp(prefix=r'\\\\.\\pipe\\pyc-%d-%d-' %\n                               (os.getpid(), next(_mmap_counter)), dir=\"\")\n    else:\n        raise ValueError('unrecognized family')\n\ndef _validate_family(family):\n    '''\n    Checks if the family is valid for the current environment.\n    '''\n    if sys.platform != 'win32' and family == 'AF_PIPE':\n        raise ValueError('Family %s is not recognized.' % family)\n\n    if sys.platform == 'win32' and family == 'AF_UNIX':\n        # double check\n        if not hasattr(socket, family):\n            raise ValueError('Family %s is not recognized.' % family)\n\ndef address_type(address):\n    '''\n    Return the types of the address\n\n    This can be 'AF_INET', 'AF_UNIX', or 'AF_PIPE'\n    '''\n    if type(address) == tuple:\n        return 'AF_INET'\n    elif type(address) is str and address.startswith('\\\\\\\\'):\n        return 'AF_PIPE'\n    elif type(address) is str:\n        return 'AF_UNIX'\n    else:\n        raise ValueError('address type of %r unrecognized' % address)\n\n#\n# Connection classes\n#\n\nclass _ConnectionBase:\n    _handle = None\n\n    def __init__(self, handle, readable=True, writable=True):\n        handle = handle.__index__()\n        if handle < 0:\n            raise ValueError(\"invalid handle\")\n        if not readable and not writable:\n            raise ValueError(\n                \"at least one of `readable` and `writable` must be True\")\n        self._handle = handle\n        self._readable = readable\n        self._writable = writable\n\n    # XXX should we use util.Finalize instead of a __del__?\n\n    def __del__(self):\n        if self._handle is not None:\n            self._close()\n\n    def _check_closed(self):\n        if self._handle is None:\n            raise OSError(\"handle is closed\")\n\n    def _check_readable(self):\n        if not self._readable:\n            raise OSError(\"connection is write-only\")\n\n    def _check_writable(self):\n        if not self._writable:\n            raise OSError(\"connection is read-only\")\n\n    def _bad_message_length(self):\n        if self._writable:\n            self._readable = False\n        else:\n            self.close()\n        raise OSError(\"bad message length\")\n\n    @property\n    def closed(self):\n        \"\"\"True if the connection is closed\"\"\"\n        return self._handle is None\n\n    @property\n    def readable(self):\n        \"\"\"True if the connection is readable\"\"\"\n        return self._readable\n\n    @property\n    def writable(self):\n        \"\"\"True if the connection is writable\"\"\"\n        return self._writable\n\n    def fileno(self):\n        \"\"\"File descriptor or handle of the connection\"\"\"\n        self._check_closed()\n        return self._handle\n\n    def close(self):\n        \"\"\"Close the connection\"\"\"\n        if self._handle is not None:\n            try:\n                self._close()\n            finally:\n                self._handle = None\n\n    def send_bytes(self, buf, offset=0, size=None):\n        \"\"\"Send the bytes data from a bytes-like object\"\"\"\n        self._check_closed()\n        self._check_writable()\n        m = memoryview(buf)\n        # HACK for byte-indexing of non-bytewise buffers (e.g. array.array)\n        if m.itemsize > 1:\n            m = memoryview(bytes(m))\n        n = len(m)\n        if offset < 0:\n            raise ValueError(\"offset is negative\")\n        if n < offset:\n            raise ValueError(\"buffer length < offset\")\n        if size is None:\n            size = n - offset\n        elif size < 0:\n            raise ValueError(\"size is negative\")\n        elif offset + size > n:\n            raise ValueError(\"buffer length < offset + size\")\n        self._send_bytes(m[offset:offset + size])\n\n    def send(self, obj):\n        \"\"\"Send a (picklable) object\"\"\"\n        self._check_closed()\n        self._check_writable()\n        self._send_bytes(_ForkingPickler.dumps(obj))\n\n    def recv_bytes(self, maxlength=None):\n        \"\"\"\n        Receive bytes data as a bytes object.\n        \"\"\"\n        self._check_closed()\n        self._check_readable()\n        if maxlength is not None and maxlength < 0:\n            raise ValueError(\"negative maxlength\")\n        buf = self._recv_bytes(maxlength)\n        if buf is None:\n            self._bad_message_length()\n        return buf.getvalue()\n\n    def recv_bytes_into(self, buf, offset=0):\n        \"\"\"\n        Receive bytes data into a writeable bytes-like object.\n        Return the number of bytes read.\n        \"\"\"\n        self._check_closed()\n        self._check_readable()\n        with memoryview(buf) as m:\n            # Get bytesize of arbitrary buffer\n            itemsize = m.itemsize\n            bytesize = itemsize * len(m)\n            if offset < 0:\n                raise ValueError(\"negative offset\")\n            elif offset > bytesize:\n                raise ValueError(\"offset too large\")\n            result = self._recv_bytes()\n            size = result.tell()\n            if bytesize < offset + size:\n                raise BufferTooShort(result.getvalue())\n            # Message can fit in dest\n            result.seek(0)\n            result.readinto(m[offset // itemsize :\n                              (offset + size) // itemsize])\n            return size\n\n    def recv(self):\n        \"\"\"Receive a (picklable) object\"\"\"\n        self._check_closed()\n        self._check_readable()\n        buf = self._recv_bytes()\n        return _ForkingPickler.loads(buf.getbuffer())\n\n    def poll(self, timeout=0.0):\n        \"\"\"Whether there is any input available to be read\"\"\"\n        self._check_closed()\n        self._check_readable()\n        return self._poll(timeout)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, exc_tb):\n        self.close()\n\n\nif _winapi:\n\n    class PipeConnection(_ConnectionBase):\n        \"\"\"\n        Connection class based on a Windows named pipe.\n        Overlapped I/O is used, so the handles must have been created\n        with FILE_FLAG_OVERLAPPED.\n        \"\"\"\n        _got_empty_message = False\n\n        def _close(self, _CloseHandle=_winapi.CloseHandle):\n            _CloseHandle(self._handle)\n\n        def _send_bytes(self, buf):\n            ov, err = _winapi.WriteFile(self._handle, buf, overlapped=True)\n            try:\n                if err == _winapi.ERROR_IO_PENDING:\n                    waitres = _winapi.WaitForMultipleObjects(\n                        [ov.event], False, INFINITE)\n                    assert waitres == WAIT_OBJECT_0\n            except:\n                ov.cancel()\n                raise\n            finally:\n                nwritten, err = ov.GetOverlappedResult(True)\n            assert err == 0\n            assert nwritten == len(buf)\n\n        def _recv_bytes(self, maxsize=None):\n            if self._got_empty_message:\n                self._got_empty_message = False\n                return io.BytesIO()\n            else:\n                bsize = 128 if maxsize is None else min(maxsize, 128)\n                try:\n                    ov, err = _winapi.ReadFile(self._handle, bsize,\n                                                overlapped=True)\n                    try:\n                        if err == _winapi.ERROR_IO_PENDING:\n                            waitres = _winapi.WaitForMultipleObjects(\n                                [ov.event], False, INFINITE)\n                            assert waitres == WAIT_OBJECT_0\n                    except:\n                        ov.cancel()\n                        raise\n                    finally:\n                        nread, err = ov.GetOverlappedResult(True)\n                        if err == 0:\n                            f = io.BytesIO()\n                            f.write(ov.getbuffer())\n                            return f\n                        elif err == _winapi.ERROR_MORE_DATA:\n                            return self._get_more_data(ov, maxsize)\n                except OSError as e:\n                    if e.winerror == _winapi.ERROR_BROKEN_PIPE:\n                        raise EOFError\n                    else:\n                        raise\n            raise RuntimeError(\"shouldn't get here; expected KeyboardInterrupt\")\n\n        def _poll(self, timeout):\n            if (self._got_empty_message or\n                        _winapi.PeekNamedPipe(self._handle)[0] != 0):\n                return True\n            return bool(wait([self], timeout))\n\n        def _get_more_data(self, ov, maxsize):\n            buf = ov.getbuffer()\n            f = io.BytesIO()\n            f.write(buf)\n            left = _winapi.PeekNamedPipe(self._handle)[1]\n            assert left > 0\n            if maxsize is not None and len(buf) + left > maxsize:\n                self._bad_message_length()\n            ov, err = _winapi.ReadFile(self._handle, left, overlapped=True)\n            rbytes, err = ov.GetOverlappedResult(True)\n            assert err == 0\n            assert rbytes == left\n            f.write(ov.getbuffer())\n            return f\n\n\nclass Connection(_ConnectionBase):\n    \"\"\"\n    Connection class based on an arbitrary file descriptor (Unix only), or\n    a socket handle (Windows).\n    \"\"\"\n\n    if _winapi:\n        def _close(self, _close=_multiprocessing.closesocket):\n            _close(self._handle)\n        _write = _multiprocessing.send\n        _read = _multiprocessing.recv\n    else:\n        def _close(self, _close=os.close):\n            _close(self._handle)\n        _write = os.write\n        _read = os.read\n\n    def _send(self, buf, write=_write):\n        remaining = len(buf)\n        while True:\n            n = write(self._handle, buf)\n            remaining -= n\n            if remaining == 0:\n                break\n            buf = buf[n:]\n\n    def _recv(self, size, read=_read):\n        buf = io.BytesIO()\n        handle = self._handle\n        remaining = size\n        while remaining > 0:\n            chunk = read(handle, remaining)\n            n = len(chunk)\n            if n == 0:\n                if remaining == size:\n                    raise EOFError\n                else:\n                    raise OSError(\"got end of file during message\")\n            buf.write(chunk)\n            remaining -= n\n        return buf\n\n    def _send_bytes(self, buf):\n        n = len(buf)\n        # For wire compatibility with 3.2 and lower\n        header = struct.pack(\"!i\", n)\n        if n > 16384:\n            # The payload is large so Nagle's algorithm won't be triggered\n            # and we'd better avoid the cost of concatenation.\n            self._send(header)\n            self._send(buf)\n        else:\n            # Issue #20540: concatenate before sending, to avoid delays due\n            # to Nagle's algorithm on a TCP socket.\n            # Also note we want to avoid sending a 0-length buffer separately,\n            # to avoid \"broken pipe\" errors if the other end closed the pipe.\n            self._send(header + buf)\n\n    def _recv_bytes(self, maxsize=None):\n        buf = self._recv(4)\n        size, = struct.unpack(\"!i\", buf.getvalue())\n        if maxsize is not None and size > maxsize:\n            return None\n        return self._recv(size)\n\n    def _poll(self, timeout):\n        r = wait([self], timeout)\n        return bool(r)\n\n\n#\n# Public functions\n#\n\nclass Listener(object):\n    '''\n    Returns a listener object.\n\n    This is a wrapper for a bound socket which is 'listening' for\n    connections, or for a Windows named pipe.\n    '''\n    def __init__(self, address=None, family=None, backlog=1, authkey=None):\n        family = family or (address and address_type(address)) \\\n                 or default_family\n        address = address or arbitrary_address(family)\n\n        _validate_family(family)\n        if family == 'AF_PIPE':\n            self._listener = PipeListener(address, backlog)\n        else:\n            self._listener = SocketListener(address, family, backlog)\n\n        if authkey is not None and not isinstance(authkey, bytes):\n            raise TypeError('authkey should be a byte string')\n\n        self._authkey = authkey\n\n    def accept(self):\n        '''\n        Accept a connection on the bound socket or named pipe of `self`.\n\n        Returns a `Connection` object.\n        '''\n        if self._listener is None:\n            raise OSError('listener is closed')\n        c = self._listener.accept()\n        if self._authkey:\n            deliver_challenge(c, self._authkey)\n            answer_challenge(c, self._authkey)\n        return c\n\n    def close(self):\n        '''\n        Close the bound socket or named pipe of `self`.\n        '''\n        listener = self._listener\n        if listener is not None:\n            self._listener = None\n            listener.close()\n\n    address = property(lambda self: self._listener._address)\n    last_accepted = property(lambda self: self._listener._last_accepted)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, exc_tb):\n        self.close()\n\n\ndef Client(address, family=None, authkey=None):\n    '''\n    Returns a connection to the address of a `Listener`\n    '''\n    family = family or address_type(address)\n    _validate_family(family)\n    if family == 'AF_PIPE':\n        c = PipeClient(address)\n    else:\n        c = SocketClient(address)\n\n    if authkey is not None and not isinstance(authkey, bytes):\n        raise TypeError('authkey should be a byte string')\n\n    if authkey is not None:\n        answer_challenge(c, authkey)\n        deliver_challenge(c, authkey)\n\n    return c\n\n\nif sys.platform != 'win32':\n\n    def Pipe(duplex=True):\n        '''\n        Returns pair of connection objects at either end of a pipe\n        '''\n        if duplex:\n            s1, s2 = socket.socketpair()\n            s1.setblocking(True)\n            s2.setblocking(True)\n            c1 = Connection(s1.detach())\n            c2 = Connection(s2.detach())\n        else:\n            fd1, fd2 = os.pipe()\n            c1 = Connection(fd1, writable=False)\n            c2 = Connection(fd2, readable=False)\n\n        return c1, c2\n\nelse:\n\n    def Pipe(duplex=True):\n        '''\n        Returns pair of connection objects at either end of a pipe\n        '''\n        address = arbitrary_address('AF_PIPE')\n        if duplex:\n            openmode = _winapi.PIPE_ACCESS_DUPLEX\n            access = _winapi.GENERIC_READ | _winapi.GENERIC_WRITE\n            obsize, ibsize = BUFSIZE, BUFSIZE\n        else:\n            openmode = _winapi.PIPE_ACCESS_INBOUND\n            access = _winapi.GENERIC_WRITE\n            obsize, ibsize = 0, BUFSIZE\n\n        h1 = _winapi.CreateNamedPipe(\n            address, openmode | _winapi.FILE_FLAG_OVERLAPPED |\n            _winapi.FILE_FLAG_FIRST_PIPE_INSTANCE,\n            _winapi.PIPE_TYPE_MESSAGE | _winapi.PIPE_READMODE_MESSAGE |\n            _winapi.PIPE_WAIT,\n            1, obsize, ibsize, _winapi.NMPWAIT_WAIT_FOREVER,\n            # default security descriptor: the handle cannot be inherited\n            _winapi.NULL\n            )\n        h2 = _winapi.CreateFile(\n            address, access, 0, _winapi.NULL, _winapi.OPEN_EXISTING,\n            _winapi.FILE_FLAG_OVERLAPPED, _winapi.NULL\n            )\n        _winapi.SetNamedPipeHandleState(\n            h2, _winapi.PIPE_READMODE_MESSAGE, None, None\n            )\n\n        overlapped = _winapi.ConnectNamedPipe(h1, overlapped=True)\n        _, err = overlapped.GetOverlappedResult(True)\n        assert err == 0\n\n        c1 = PipeConnection(h1, writable=duplex)\n        c2 = PipeConnection(h2, readable=duplex)\n\n        return c1, c2\n\n#\n# Definitions for connections based on sockets\n#\n\nclass SocketListener(object):\n    '''\n    Representation of a socket which is bound to an address and listening\n    '''\n    def __init__(self, address, family, backlog=1):\n        self._socket = socket.socket(getattr(socket, family))\n        try:\n            # SO_REUSEADDR has different semantics on Windows (issue #2550).\n            if os.name == 'posix':\n                self._socket.setsockopt(socket.SOL_SOCKET,\n                                        socket.SO_REUSEADDR, 1)\n            self._socket.setblocking(True)\n            self._socket.bind(address)\n            self._socket.listen(backlog)\n            self._address = self._socket.getsockname()\n        except OSError:\n            self._socket.close()\n            raise\n        self._family = family\n        self._last_accepted = None\n\n        if family == 'AF_UNIX':\n            self._unlink = util.Finalize(\n                self, os.unlink, args=(address,), exitpriority=0\n                )\n        else:\n            self._unlink = None\n\n    def accept(self):\n        s, self._last_accepted = self._socket.accept()\n        s.setblocking(True)\n        return Connection(s.detach())\n\n    def close(self):\n        try:\n            self._socket.close()\n        finally:\n            unlink = self._unlink\n            if unlink is not None:\n                self._unlink = None\n                unlink()\n\n\ndef SocketClient(address):\n    '''\n    Return a connection object connected to the socket given by `address`\n    '''\n    family = address_type(address)\n    with socket.socket( getattr(socket, family) ) as s:\n        s.setblocking(True)\n        s.connect(address)\n        return Connection(s.detach())\n\n#\n# Definitions for connections based on named pipes\n#\n\nif sys.platform == 'win32':\n\n    class PipeListener(object):\n        '''\n        Representation of a named pipe\n        '''\n        def __init__(self, address, backlog=None):\n            self._address = address\n            self._handle_queue = [self._new_handle(first=True)]\n\n            self._last_accepted = None\n            util.sub_debug('listener created with address=%r', self._address)\n            self.close = util.Finalize(\n                self, PipeListener._finalize_pipe_listener,\n                args=(self._handle_queue, self._address), exitpriority=0\n                )\n\n        def _new_handle(self, first=False):\n            flags = _winapi.PIPE_ACCESS_DUPLEX | _winapi.FILE_FLAG_OVERLAPPED\n            if first:\n                flags |= _winapi.FILE_FLAG_FIRST_PIPE_INSTANCE\n            return _winapi.CreateNamedPipe(\n                self._address, flags,\n                _winapi.PIPE_TYPE_MESSAGE | _winapi.PIPE_READMODE_MESSAGE |\n                _winapi.PIPE_WAIT,\n                _winapi.PIPE_UNLIMITED_INSTANCES, BUFSIZE, BUFSIZE,\n                _winapi.NMPWAIT_WAIT_FOREVER, _winapi.NULL\n                )\n\n        def accept(self):\n            self._handle_queue.append(self._new_handle())\n            handle = self._handle_queue.pop(0)\n            try:\n                ov = _winapi.ConnectNamedPipe(handle, overlapped=True)\n            except OSError as e:\n                if e.winerror != _winapi.ERROR_NO_DATA:\n                    raise\n                # ERROR_NO_DATA can occur if a client has already connected,\n                # written data and then disconnected -- see Issue 14725.\n            else:\n                try:\n                    res = _winapi.WaitForMultipleObjects(\n                        [ov.event], False, INFINITE)\n                except:\n                    ov.cancel()\n                    _winapi.CloseHandle(handle)\n                    raise\n                finally:\n                    _, err = ov.GetOverlappedResult(True)\n                    assert err == 0\n            return PipeConnection(handle)\n\n        @staticmethod\n        def _finalize_pipe_listener(queue, address):\n            util.sub_debug('closing listener with address=%r', address)\n            for handle in queue:\n                _winapi.CloseHandle(handle)\n\n    def PipeClient(address):\n        '''\n        Return a connection object connected to the pipe given by `address`\n        '''\n        t = _init_timeout()\n        while 1:\n            try:\n                _winapi.WaitNamedPipe(address, 1000)\n                h = _winapi.CreateFile(\n                    address, _winapi.GENERIC_READ | _winapi.GENERIC_WRITE,\n                    0, _winapi.NULL, _winapi.OPEN_EXISTING,\n                    _winapi.FILE_FLAG_OVERLAPPED, _winapi.NULL\n                    )\n            except OSError as e:\n                if e.winerror not in (_winapi.ERROR_SEM_TIMEOUT,\n                                      _winapi.ERROR_PIPE_BUSY) or _check_timeout(t):\n                    raise\n            else:\n                break\n        else:\n            raise\n\n        _winapi.SetNamedPipeHandleState(\n            h, _winapi.PIPE_READMODE_MESSAGE, None, None\n            )\n        return PipeConnection(h)\n\n#\n# Authentication stuff\n#\n\nMESSAGE_LENGTH = 20\n\nCHALLENGE = b'#CHALLENGE#'\nWELCOME = b'#WELCOME#'\nFAILURE = b'#FAILURE#'\n\ndef deliver_challenge(connection, authkey):\n    import hmac\n    assert isinstance(authkey, bytes)\n    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n        connection.send_bytes(WELCOME)\n    else:\n        connection.send_bytes(FAILURE)\n        raise AuthenticationError('digest received was wrong')\n\ndef answer_challenge(connection, authkey):\n    import hmac\n    assert isinstance(authkey, bytes)\n    message = connection.recv_bytes(256)         # reject large message\n    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n    if response != WELCOME:\n        raise AuthenticationError('digest sent was rejected')\n\n#\n# Support for using xmlrpclib for serialization\n#\n\nclass ConnectionWrapper(object):\n    def __init__(self, conn, dumps, loads):\n        self._conn = conn\n        self._dumps = dumps\n        self._loads = loads\n        for attr in ('fileno', 'close', 'poll', 'recv_bytes', 'send_bytes'):\n            obj = getattr(conn, attr)\n            setattr(self, attr, obj)\n    def send(self, obj):\n        s = self._dumps(obj)\n        self._conn.send_bytes(s)\n    def recv(self):\n        s = self._conn.recv_bytes()\n        return self._loads(s)\n\ndef _xml_dumps(obj):\n    return xmlrpclib.dumps((obj,), None, None, None, 1).encode('utf-8')\n\ndef _xml_loads(s):\n    (obj,), method = xmlrpclib.loads(s.decode('utf-8'))\n    return obj\n\nclass XmlListener(Listener):\n    def accept(self):\n        global xmlrpclib\n        import xmlrpc.client as xmlrpclib\n        obj = Listener.accept(self)\n        return ConnectionWrapper(obj, _xml_dumps, _xml_loads)\n\ndef XmlClient(*args, **kwds):\n    global xmlrpclib\n    import xmlrpc.client as xmlrpclib\n    return ConnectionWrapper(Client(*args, **kwds), _xml_dumps, _xml_loads)\n\n#\n# Wait\n#\n\nif sys.platform == 'win32':\n\n    def _exhaustive_wait(handles, timeout):\n        # Return ALL handles which are currently signalled.  (Only\n        # returning the first signalled might create starvation issues.)\n        L = list(handles)\n        ready = []\n        while L:\n            res = _winapi.WaitForMultipleObjects(L, False, timeout)\n            if res == WAIT_TIMEOUT:\n                break\n            elif WAIT_OBJECT_0 <= res < WAIT_OBJECT_0 + len(L):\n                res -= WAIT_OBJECT_0\n            elif WAIT_ABANDONED_0 <= res < WAIT_ABANDONED_0 + len(L):\n                res -= WAIT_ABANDONED_0\n            else:\n                raise RuntimeError('Should not get here')\n            ready.append(L[res])\n            L = L[res+1:]\n            timeout = 0\n        return ready\n\n    _ready_errors = {_winapi.ERROR_BROKEN_PIPE, _winapi.ERROR_NETNAME_DELETED}\n\n    def wait(object_list, timeout=None):\n        '''\n        Wait till an object in object_list is ready/readable.\n\n        Returns list of those objects in object_list which are ready/readable.\n        '''\n        if timeout is None:\n            timeout = INFINITE\n        elif timeout < 0:\n            timeout = 0\n        else:\n            timeout = int(timeout * 1000 + 0.5)\n\n        object_list = list(object_list)\n        waithandle_to_obj = {}\n        ov_list = []\n        ready_objects = set()\n        ready_handles = set()\n\n        try:\n            for o in object_list:\n                try:\n                    fileno = getattr(o, 'fileno')\n                except AttributeError:\n                    waithandle_to_obj[o.__index__()] = o\n                else:\n                    # start an overlapped read of length zero\n                    try:\n                        ov, err = _winapi.ReadFile(fileno(), 0, True)\n                    except OSError as e:\n                        ov, err = None, e.winerror\n                        if err not in _ready_errors:\n                            raise\n                    if err == _winapi.ERROR_IO_PENDING:\n                        ov_list.append(ov)\n                        waithandle_to_obj[ov.event] = o\n                    else:\n                        # If o.fileno() is an overlapped pipe handle and\n                        # err == 0 then there is a zero length message\n                        # in the pipe, but it HAS NOT been consumed...\n                        if ov and sys.getwindowsversion()[:2] >= (6, 2):\n                            # ... except on Windows 8 and later, where\n                            # the message HAS been consumed.\n                            try:\n                                _, err = ov.GetOverlappedResult(False)\n                            except OSError as e:\n                                err = e.winerror\n                            if not err and hasattr(o, '_got_empty_message'):\n                                o._got_empty_message = True\n                        ready_objects.add(o)\n                        timeout = 0\n\n            ready_handles = _exhaustive_wait(waithandle_to_obj.keys(), timeout)\n        finally:\n            # request that overlapped reads stop\n            for ov in ov_list:\n                ov.cancel()\n\n            # wait for all overlapped reads to stop\n            for ov in ov_list:\n                try:\n                    _, err = ov.GetOverlappedResult(True)\n                except OSError as e:\n                    err = e.winerror\n                    if err not in _ready_errors:\n                        raise\n                if err != _winapi.ERROR_OPERATION_ABORTED:\n                    o = waithandle_to_obj[ov.event]\n                    ready_objects.add(o)\n                    if err == 0:\n                        # If o.fileno() is an overlapped pipe handle then\n                        # a zero length message HAS been consumed.\n                        if hasattr(o, '_got_empty_message'):\n                            o._got_empty_message = True\n\n        ready_objects.update(waithandle_to_obj[h] for h in ready_handles)\n        return [o for o in object_list if o in ready_objects]\n\nelse:\n\n    import selectors\n\n    # poll/select have the advantage of not requiring any extra file\n    # descriptor, contrarily to epoll/kqueue (also, they require a single\n    # syscall).\n    if hasattr(selectors, 'PollSelector'):\n        _WaitSelector = selectors.PollSelector\n    else:\n        _WaitSelector = selectors.SelectSelector\n\n    def wait(object_list, timeout=None):\n        '''\n        Wait till an object in object_list is ready/readable.\n\n        Returns list of those objects in object_list which are ready/readable.\n        '''\n        with _WaitSelector() as selector:\n            for obj in object_list:\n                selector.register(obj, selectors.EVENT_READ)\n\n            if timeout is not None:\n                deadline = time.monotonic() + timeout\n\n            while True:\n                ready = selector.select(timeout)\n                if ready:\n                    return [key.fileobj for (key, events) in ready]\n                else:\n                    if timeout is not None:\n                        timeout = deadline - time.monotonic()\n                        if timeout < 0:\n                            return ready\n\n#\n# Make connection and socket objects sharable if possible\n#\n\nif sys.platform == 'win32':\n    def reduce_connection(conn):\n        handle = conn.fileno()\n        with socket.fromfd(handle, socket.AF_INET, socket.SOCK_STREAM) as s:\n            from . import resource_sharer\n            ds = resource_sharer.DupSocket(s)\n            return rebuild_connection, (ds, conn.readable, conn.writable)\n    def rebuild_connection(ds, readable, writable):\n        sock = ds.detach()\n        return Connection(sock.detach(), readable, writable)\n    reduction.register(Connection, reduce_connection)\n\n    def reduce_pipe_connection(conn):\n        access = ((_winapi.FILE_GENERIC_READ if conn.readable else 0) |\n                  (_winapi.FILE_GENERIC_WRITE if conn.writable else 0))\n        dh = reduction.DupHandle(conn.fileno(), access)\n        return rebuild_pipe_connection, (dh, conn.readable, conn.writable)\n    def rebuild_pipe_connection(dh, readable, writable):\n        handle = dh.detach()\n        return PipeConnection(handle, readable, writable)\n    reduction.register(PipeConnection, reduce_pipe_connection)\n\nelse:\n    def reduce_connection(conn):\n        df = reduction.DupFd(conn.fileno())\n        return rebuild_connection, (df, conn.readable, conn.writable)\n    def rebuild_connection(df, readable, writable):\n        fd = df.detach()\n        return Connection(fd, readable, writable)\n    reduction.register(Connection, reduce_connection)\n",953],"/usr/lib/python3.6/multiprocessing/queues.py":["#\n# Module implementing queues\n#\n# multiprocessing/queues.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\n__all__ = ['Queue', 'SimpleQueue', 'JoinableQueue']\n\nimport sys\nimport os\nimport threading\nimport collections\nimport time\nimport weakref\nimport errno\n\nfrom queue import Empty, Full\n\nimport _multiprocessing\n\nfrom . import connection\nfrom . import context\n_ForkingPickler = context.reduction.ForkingPickler\n\nfrom .util import debug, info, Finalize, register_after_fork, is_exiting\n\n#\n# Queue type using a pipe, buffer and thread\n#\n\nclass Queue(object):\n\n    def __init__(self, maxsize=0, *, ctx):\n        if maxsize <= 0:\n            # Can raise ImportError (see issues #3770 and #23400)\n            from .synchronize import SEM_VALUE_MAX as maxsize\n        self._maxsize = maxsize\n        self._reader, self._writer = connection.Pipe(duplex=False)\n        self._rlock = ctx.Lock()\n        self._opid = os.getpid()\n        if sys.platform == 'win32':\n            self._wlock = None\n        else:\n            self._wlock = ctx.Lock()\n        self._sem = ctx.BoundedSemaphore(maxsize)\n        # For use by concurrent.futures\n        self._ignore_epipe = False\n\n        self._after_fork()\n\n        if sys.platform != 'win32':\n            register_after_fork(self, Queue._after_fork)\n\n    def __getstate__(self):\n        context.assert_spawning(self)\n        return (self._ignore_epipe, self._maxsize, self._reader, self._writer,\n                self._rlock, self._wlock, self._sem, self._opid)\n\n    def __setstate__(self, state):\n        (self._ignore_epipe, self._maxsize, self._reader, self._writer,\n         self._rlock, self._wlock, self._sem, self._opid) = state\n        self._after_fork()\n\n    def _after_fork(self):\n        debug('Queue._after_fork()')\n        self._notempty = threading.Condition(threading.Lock())\n        self._buffer = collections.deque()\n        self._thread = None\n        self._jointhread = None\n        self._joincancelled = False\n        self._closed = False\n        self._close = None\n        self._send_bytes = self._writer.send_bytes\n        self._recv_bytes = self._reader.recv_bytes\n        self._poll = self._reader.poll\n\n    def put(self, obj, block=True, timeout=None):\n        assert not self._closed\n        if not self._sem.acquire(block, timeout):\n            raise Full\n\n        with self._notempty:\n            if self._thread is None:\n                self._start_thread()\n            self._buffer.append(obj)\n            self._notempty.notify()\n\n    def get(self, block=True, timeout=None):\n        if block and timeout is None:\n            with self._rlock:\n                res = self._recv_bytes()\n            self._sem.release()\n        else:\n            if block:\n                deadline = time.monotonic() + timeout\n            if not self._rlock.acquire(block, timeout):\n                raise Empty\n            try:\n                if block:\n                    timeout = deadline - time.monotonic()\n                    if not self._poll(timeout):\n                        raise Empty\n                elif not self._poll():\n                    raise Empty\n                res = self._recv_bytes()\n                self._sem.release()\n            finally:\n                self._rlock.release()\n        # unserialize the data after having released the lock\n        return _ForkingPickler.loads(res)\n\n    def qsize(self):\n        # Raises NotImplementedError on Mac OSX because of broken sem_getvalue()\n        return self._maxsize - self._sem._semlock._get_value()\n\n    def empty(self):\n        return not self._poll()\n\n    def full(self):\n        return self._sem._semlock._is_zero()\n\n    def get_nowait(self):\n        return self.get(False)\n\n    def put_nowait(self, obj):\n        return self.put(obj, False)\n\n    def close(self):\n        self._closed = True\n        try:\n            self._reader.close()\n        finally:\n            close = self._close\n            if close:\n                self._close = None\n                close()\n\n    def join_thread(self):\n        debug('Queue.join_thread()')\n        assert self._closed\n        if self._jointhread:\n            self._jointhread()\n\n    def cancel_join_thread(self):\n        debug('Queue.cancel_join_thread()')\n        self._joincancelled = True\n        try:\n            self._jointhread.cancel()\n        except AttributeError:\n            pass\n\n    def _start_thread(self):\n        debug('Queue._start_thread()')\n\n        # Start thread which transfers data from buffer to pipe\n        self._buffer.clear()\n        self._thread = threading.Thread(\n            target=Queue._feed,\n            args=(self._buffer, self._notempty, self._send_bytes,\n                  self._wlock, self._writer.close, self._ignore_epipe),\n            name='QueueFeederThread'\n            )\n        self._thread.daemon = True\n\n        debug('doing self._thread.start()')\n        self._thread.start()\n        debug('... done self._thread.start()')\n\n        if not self._joincancelled:\n            self._jointhread = Finalize(\n                self._thread, Queue._finalize_join,\n                [weakref.ref(self._thread)],\n                exitpriority=-5\n                )\n\n        # Send sentinel to the thread queue object when garbage collected\n        self._close = Finalize(\n            self, Queue._finalize_close,\n            [self._buffer, self._notempty],\n            exitpriority=10\n            )\n\n    @staticmethod\n    def _finalize_join(twr):\n        debug('joining queue thread')\n        thread = twr()\n        if thread is not None:\n            thread.join()\n            debug('... queue thread joined')\n        else:\n            debug('... queue thread already dead')\n\n    @staticmethod\n    def _finalize_close(buffer, notempty):\n        debug('telling queue thread to quit')\n        with notempty:\n            buffer.append(_sentinel)\n            notempty.notify()\n\n    @staticmethod\n    def _feed(buffer, notempty, send_bytes, writelock, close, ignore_epipe):\n        debug('starting thread to feed data to pipe')\n        nacquire = notempty.acquire\n        nrelease = notempty.release\n        nwait = notempty.wait\n        bpopleft = buffer.popleft\n        sentinel = _sentinel\n        if sys.platform != 'win32':\n            wacquire = writelock.acquire\n            wrelease = writelock.release\n        else:\n            wacquire = None\n\n        while 1:\n            try:\n                nacquire()\n                try:\n                    if not buffer:\n                        nwait()\n                finally:\n                    nrelease()\n                try:\n                    while 1:\n                        obj = bpopleft()\n                        if obj is sentinel:\n                            debug('feeder thread got sentinel -- exiting')\n                            close()\n                            return\n\n                        # serialize the data before acquiring the lock\n                        obj = _ForkingPickler.dumps(obj)\n                        if wacquire is None:\n                            send_bytes(obj)\n                        else:\n                            wacquire()\n                            try:\n                                send_bytes(obj)\n                            finally:\n                                wrelease()\n                except IndexError:\n                    pass\n            except Exception as e:\n                if ignore_epipe and getattr(e, 'errno', 0) == errno.EPIPE:\n                    return\n                # Since this runs in a daemon thread the resources it uses\n                # may be become unusable while the process is cleaning up.\n                # We ignore errors which happen after the process has\n                # started to cleanup.\n                if is_exiting():\n                    info('error in queue thread: %s', e)\n                    return\n                else:\n                    import traceback\n                    traceback.print_exc()\n\n_sentinel = object()\n\n#\n# A queue type which also supports join() and task_done() methods\n#\n# Note that if you do not call task_done() for each finished task then\n# eventually the counter's semaphore may overflow causing Bad Things\n# to happen.\n#\n\nclass JoinableQueue(Queue):\n\n    def __init__(self, maxsize=0, *, ctx):\n        Queue.__init__(self, maxsize, ctx=ctx)\n        self._unfinished_tasks = ctx.Semaphore(0)\n        self._cond = ctx.Condition()\n\n    def __getstate__(self):\n        return Queue.__getstate__(self) + (self._cond, self._unfinished_tasks)\n\n    def __setstate__(self, state):\n        Queue.__setstate__(self, state[:-2])\n        self._cond, self._unfinished_tasks = state[-2:]\n\n    def put(self, obj, block=True, timeout=None):\n        assert not self._closed\n        if not self._sem.acquire(block, timeout):\n            raise Full\n\n        with self._notempty, self._cond:\n            if self._thread is None:\n                self._start_thread()\n            self._buffer.append(obj)\n            self._unfinished_tasks.release()\n            self._notempty.notify()\n\n    def task_done(self):\n        with self._cond:\n            if not self._unfinished_tasks.acquire(False):\n                raise ValueError('task_done() called too many times')\n            if self._unfinished_tasks._semlock._is_zero():\n                self._cond.notify_all()\n\n    def join(self):\n        with self._cond:\n            if not self._unfinished_tasks._semlock._is_zero():\n                self._cond.wait()\n\n#\n# Simplified Queue type -- really just a locked pipe\n#\n\nclass SimpleQueue(object):\n\n    def __init__(self, *, ctx):\n        self._reader, self._writer = connection.Pipe(duplex=False)\n        self._rlock = ctx.Lock()\n        self._poll = self._reader.poll\n        if sys.platform == 'win32':\n            self._wlock = None\n        else:\n            self._wlock = ctx.Lock()\n\n    def empty(self):\n        return not self._poll()\n\n    def __getstate__(self):\n        context.assert_spawning(self)\n        return (self._reader, self._writer, self._rlock, self._wlock)\n\n    def __setstate__(self, state):\n        (self._reader, self._writer, self._rlock, self._wlock) = state\n        self._poll = self._reader.poll\n\n    def get(self):\n        with self._rlock:\n            res = self._reader.recv_bytes()\n        # unserialize the data after having released the lock\n        return _ForkingPickler.loads(res)\n\n    def put(self, obj):\n        # serialize the data before acquiring the lock\n        obj = _ForkingPickler.dumps(obj)\n        if self._wlock is None:\n            # writes to a message oriented win32 pipe are atomic\n            self._writer.send_bytes(obj)\n        else:\n            with self._wlock:\n                self._writer.send_bytes(obj)\n",347],"/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py":["from multiprocessing import Pool\nimport os\n\n\ndef f(x):\n    return x ** x\n\n\nif __name__ == \"__main__\":\n    process_num = 5\n    with Pool(processes=process_num) as pool:\n        print(pool.map(f, range(10)))\n\n        for i in pool.imap_unordered(f, range(10)):\n            print(i)\n\n        res = pool.apply_async(f, (20,))       # runs in *only* one process\n        print(res.get(timeout=1))              # prints \"400\"\n\n        res = pool.apply_async(os.getpid, ())  # runs in *only* one process\n        print(res.get(timeout=1))              # prints the PID of that process\n\n        multiple_results = [pool.apply_async(os.getpid, ()) for i in range(process_num)]\n        print([res.get(timeout=1) for res in multiple_results])\n",24],"/usr/lib/python3.6/multiprocessing/pool.py":["#\n# Module providing the `Pool` class for managing a process pool\n#\n# multiprocessing/pool.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\n__all__ = ['Pool', 'ThreadPool']\n\n#\n# Imports\n#\n\nimport threading\nimport queue\nimport itertools\nimport collections\nimport os\nimport time\nimport traceback\n\n# If threading is available then ThreadPool should be provided.  Therefore\n# we avoid top-level imports which are liable to fail on some systems.\nfrom . import util\nfrom . import get_context, TimeoutError\n\n#\n# Constants representing the state of a pool\n#\n\nRUN = 0\nCLOSE = 1\nTERMINATE = 2\n\n#\n# Miscellaneous\n#\n\njob_counter = itertools.count()\n\ndef mapstar(args):\n    return list(map(*args))\n\ndef starmapstar(args):\n    return list(itertools.starmap(args[0], args[1]))\n\n#\n# Hack to embed stringification of remote traceback in local traceback\n#\n\nclass RemoteTraceback(Exception):\n    def __init__(self, tb):\n        self.tb = tb\n    def __str__(self):\n        return self.tb\n\nclass ExceptionWithTraceback:\n    def __init__(self, exc, tb):\n        tb = traceback.format_exception(type(exc), exc, tb)\n        tb = ''.join(tb)\n        self.exc = exc\n        self.tb = '\\n\"\"\"\\n%s\"\"\"' % tb\n    def __reduce__(self):\n        return rebuild_exc, (self.exc, self.tb)\n\ndef rebuild_exc(exc, tb):\n    exc.__cause__ = RemoteTraceback(tb)\n    return exc\n\n#\n# Code run by worker processes\n#\n\nclass MaybeEncodingError(Exception):\n    \"\"\"Wraps possible unpickleable errors, so they can be\n    safely sent through the socket.\"\"\"\n\n    def __init__(self, exc, value):\n        self.exc = repr(exc)\n        self.value = repr(value)\n        super(MaybeEncodingError, self).__init__(self.exc, self.value)\n\n    def __str__(self):\n        return \"Error sending result: '%s'. Reason: '%s'\" % (self.value,\n                                                             self.exc)\n\n    def __repr__(self):\n        return \"<%s: %s>\" % (self.__class__.__name__, self)\n\n\ndef worker(inqueue, outqueue, initializer=None, initargs=(), maxtasks=None,\n           wrap_exception=False):\n    assert maxtasks is None or (type(maxtasks) == int and maxtasks > 0)\n    put = outqueue.put\n    get = inqueue.get\n    if hasattr(inqueue, '_writer'):\n        inqueue._writer.close()\n        outqueue._reader.close()\n\n    if initializer is not None:\n        initializer(*initargs)\n\n    completed = 0\n    while maxtasks is None or (maxtasks and completed < maxtasks):\n        try:\n            task = get()\n        except (EOFError, OSError):\n            util.debug('worker got EOFError or OSError -- exiting')\n            break\n\n        if task is None:\n            util.debug('worker got sentinel -- exiting')\n            break\n\n        job, i, func, args, kwds = task\n        try:\n            result = (True, func(*args, **kwds))\n        except Exception as e:\n            if wrap_exception and func is not _helper_reraises_exception:\n                e = ExceptionWithTraceback(e, e.__traceback__)\n            result = (False, e)\n        try:\n            put((job, i, result))\n        except Exception as e:\n            wrapped = MaybeEncodingError(e, result[1])\n            util.debug(\"Possible encoding error while sending result: %s\" % (\n                wrapped))\n            put((job, i, (False, wrapped)))\n\n        task = job = result = func = args = kwds = None\n        completed += 1\n    util.debug('worker exiting after %d tasks' % completed)\n\ndef _helper_reraises_exception(ex):\n    'Pickle-able helper function for use by _guarded_task_generation.'\n    raise ex\n\n#\n# Class representing a process pool\n#\n\nclass Pool(object):\n    '''\n    Class which supports an async version of applying functions to arguments.\n    '''\n    _wrap_exception = True\n\n    def Process(self, *args, **kwds):\n        return self._ctx.Process(*args, **kwds)\n\n    def __init__(self, processes=None, initializer=None, initargs=(),\n                 maxtasksperchild=None, context=None):\n        self._ctx = context or get_context()\n        self._setup_queues()\n        self._taskqueue = queue.Queue()\n        self._cache = {}\n        self._state = RUN\n        self._maxtasksperchild = maxtasksperchild\n        self._initializer = initializer\n        self._initargs = initargs\n\n        if processes is None:\n            processes = os.cpu_count() or 1\n        if processes < 1:\n            raise ValueError(\"Number of processes must be at least 1\")\n\n        if initializer is not None and not callable(initializer):\n            raise TypeError('initializer must be a callable')\n\n        self._processes = processes\n        self._pool = []\n        self._repopulate_pool()\n\n        self._worker_handler = threading.Thread(\n            target=Pool._handle_workers,\n            args=(self, )\n            )\n        self._worker_handler.daemon = True\n        self._worker_handler._state = RUN\n        self._worker_handler.start()\n\n\n        self._task_handler = threading.Thread(\n            target=Pool._handle_tasks,\n            args=(self._taskqueue, self._quick_put, self._outqueue,\n                  self._pool, self._cache)\n            )\n        self._task_handler.daemon = True\n        self._task_handler._state = RUN\n        self._task_handler.start()\n\n        self._result_handler = threading.Thread(\n            target=Pool._handle_results,\n            args=(self._outqueue, self._quick_get, self._cache)\n            )\n        self._result_handler.daemon = True\n        self._result_handler._state = RUN\n        self._result_handler.start()\n\n        self._terminate = util.Finalize(\n            self, self._terminate_pool,\n            args=(self._taskqueue, self._inqueue, self._outqueue, self._pool,\n                  self._worker_handler, self._task_handler,\n                  self._result_handler, self._cache),\n            exitpriority=15\n            )\n\n    def _join_exited_workers(self):\n        \"\"\"Cleanup after any worker processes which have exited due to reaching\n        their specified lifetime.  Returns True if any workers were cleaned up.\n        \"\"\"\n        cleaned = False\n        for i in reversed(range(len(self._pool))):\n            worker = self._pool[i]\n            if worker.exitcode is not None:\n                # worker exited\n                util.debug('cleaning up worker %d' % i)\n                worker.join()\n                cleaned = True\n                del self._pool[i]\n        return cleaned\n\n    def _repopulate_pool(self):\n        \"\"\"Bring the number of pool processes up to the specified number,\n        for use after reaping workers which have exited.\n        \"\"\"\n        for i in range(self._processes - len(self._pool)):\n            w = self.Process(target=worker,\n                             args=(self._inqueue, self._outqueue,\n                                   self._initializer,\n                                   self._initargs, self._maxtasksperchild,\n                                   self._wrap_exception)\n                            )\n            self._pool.append(w)\n            w.name = w.name.replace('Process', 'PoolWorker')\n            w.daemon = True\n            w.start()\n            util.debug('added worker')\n\n    def _maintain_pool(self):\n        \"\"\"Clean up any exited workers and start replacements for them.\n        \"\"\"\n        if self._join_exited_workers():\n            self._repopulate_pool()\n\n    def _setup_queues(self):\n        self._inqueue = self._ctx.SimpleQueue()\n        self._outqueue = self._ctx.SimpleQueue()\n        self._quick_put = self._inqueue._writer.send\n        self._quick_get = self._outqueue._reader.recv\n\n    def apply(self, func, args=(), kwds={}):\n        '''\n        Equivalent of `func(*args, **kwds)`.\n        '''\n        assert self._state == RUN\n        return self.apply_async(func, args, kwds).get()\n\n    def map(self, func, iterable, chunksize=None):\n        '''\n        Apply `func` to each element in `iterable`, collecting the results\n        in a list that is returned.\n        '''\n        return self._map_async(func, iterable, mapstar, chunksize).get()\n\n    def starmap(self, func, iterable, chunksize=None):\n        '''\n        Like `map()` method but the elements of the `iterable` are expected to\n        be iterables as well and will be unpacked as arguments. Hence\n        `func` and (a, b) becomes func(a, b).\n        '''\n        return self._map_async(func, iterable, starmapstar, chunksize).get()\n\n    def starmap_async(self, func, iterable, chunksize=None, callback=None,\n            error_callback=None):\n        '''\n        Asynchronous version of `starmap()` method.\n        '''\n        return self._map_async(func, iterable, starmapstar, chunksize,\n                               callback, error_callback)\n\n    def _guarded_task_generation(self, result_job, func, iterable):\n        '''Provides a generator of tasks for imap and imap_unordered with\n        appropriate handling for iterables which throw exceptions during\n        iteration.'''\n        try:\n            i = -1\n            for i, x in enumerate(iterable):\n                yield (result_job, i, func, (x,), {})\n        except Exception as e:\n            yield (result_job, i+1, _helper_reraises_exception, (e,), {})\n\n    def imap(self, func, iterable, chunksize=1):\n        '''\n        Equivalent of `map()` -- can be MUCH slower than `Pool.map()`.\n        '''\n        if self._state != RUN:\n            raise ValueError(\"Pool not running\")\n        if chunksize == 1:\n            result = IMapIterator(self._cache)\n            self._taskqueue.put(\n                (\n                    self._guarded_task_generation(result._job, func, iterable),\n                    result._set_length\n                ))\n            return result\n        else:\n            assert chunksize > 1\n            task_batches = Pool._get_tasks(func, iterable, chunksize)\n            result = IMapIterator(self._cache)\n            self._taskqueue.put(\n                (\n                    self._guarded_task_generation(result._job,\n                                                  mapstar,\n                                                  task_batches),\n                    result._set_length\n                ))\n            return (item for chunk in result for item in chunk)\n\n    def imap_unordered(self, func, iterable, chunksize=1):\n        '''\n        Like `imap()` method but ordering of results is arbitrary.\n        '''\n        if self._state != RUN:\n            raise ValueError(\"Pool not running\")\n        if chunksize == 1:\n            result = IMapUnorderedIterator(self._cache)\n            self._taskqueue.put(\n                (\n                    self._guarded_task_generation(result._job, func, iterable),\n                    result._set_length\n                ))\n            return result\n        else:\n            assert chunksize > 1\n            task_batches = Pool._get_tasks(func, iterable, chunksize)\n            result = IMapUnorderedIterator(self._cache)\n            self._taskqueue.put(\n                (\n                    self._guarded_task_generation(result._job,\n                                                  mapstar,\n                                                  task_batches),\n                    result._set_length\n                ))\n            return (item for chunk in result for item in chunk)\n\n    def apply_async(self, func, args=(), kwds={}, callback=None,\n            error_callback=None):\n        '''\n        Asynchronous version of `apply()` method.\n        '''\n        if self._state != RUN:\n            raise ValueError(\"Pool not running\")\n        result = ApplyResult(self._cache, callback, error_callback)\n        self._taskqueue.put(([(result._job, 0, func, args, kwds)], None))\n        return result\n\n    def map_async(self, func, iterable, chunksize=None, callback=None,\n            error_callback=None):\n        '''\n        Asynchronous version of `map()` method.\n        '''\n        return self._map_async(func, iterable, mapstar, chunksize, callback,\n            error_callback)\n\n    def _map_async(self, func, iterable, mapper, chunksize=None, callback=None,\n            error_callback=None):\n        '''\n        Helper function to implement map, starmap and their async counterparts.\n        '''\n        if self._state != RUN:\n            raise ValueError(\"Pool not running\")\n        if not hasattr(iterable, '__len__'):\n            iterable = list(iterable)\n\n        if chunksize is None:\n            chunksize, extra = divmod(len(iterable), len(self._pool) * 4)\n            if extra:\n                chunksize += 1\n        if len(iterable) == 0:\n            chunksize = 0\n\n        task_batches = Pool._get_tasks(func, iterable, chunksize)\n        result = MapResult(self._cache, chunksize, len(iterable), callback,\n                           error_callback=error_callback)\n        self._taskqueue.put(\n            (\n                self._guarded_task_generation(result._job,\n                                              mapper,\n                                              task_batches),\n                None\n            )\n        )\n        return result\n\n    @staticmethod\n    def _handle_workers(pool):\n        thread = threading.current_thread()\n\n        # Keep maintaining workers until the cache gets drained, unless the pool\n        # is terminated.\n        while thread._state == RUN or (pool._cache and thread._state != TERMINATE):\n            pool._maintain_pool()\n            time.sleep(0.1)\n        # send sentinel to stop workers\n        pool._taskqueue.put(None)\n        util.debug('worker handler exiting')\n\n    @staticmethod\n    def _handle_tasks(taskqueue, put, outqueue, pool, cache):\n        thread = threading.current_thread()\n\n        for taskseq, set_length in iter(taskqueue.get, None):\n            task = None\n            try:\n                # iterating taskseq cannot fail\n                for task in taskseq:\n                    if thread._state:\n                        util.debug('task handler found thread._state != RUN')\n                        break\n                    try:\n                        put(task)\n                    except Exception as e:\n                        job, idx = task[:2]\n                        try:\n                            cache[job]._set(idx, (False, e))\n                        except KeyError:\n                            pass\n                else:\n                    if set_length:\n                        util.debug('doing set_length()')\n                        idx = task[1] if task else -1\n                        set_length(idx + 1)\n                    continue\n                break\n            finally:\n                task = taskseq = job = None\n        else:\n            util.debug('task handler got sentinel')\n\n        try:\n            # tell result handler to finish when cache is empty\n            util.debug('task handler sending sentinel to result handler')\n            outqueue.put(None)\n\n            # tell workers there is no more work\n            util.debug('task handler sending sentinel to workers')\n            for p in pool:\n                put(None)\n        except OSError:\n            util.debug('task handler got OSError when sending sentinels')\n\n        util.debug('task handler exiting')\n\n    @staticmethod\n    def _handle_results(outqueue, get, cache):\n        thread = threading.current_thread()\n\n        while 1:\n            try:\n                task = get()\n            except (OSError, EOFError):\n                util.debug('result handler got EOFError/OSError -- exiting')\n                return\n\n            if thread._state:\n                assert thread._state == TERMINATE\n                util.debug('result handler found thread._state=TERMINATE')\n                break\n\n            if task is None:\n                util.debug('result handler got sentinel')\n                break\n\n            job, i, obj = task\n            try:\n                cache[job]._set(i, obj)\n            except KeyError:\n                pass\n            task = job = obj = None\n\n        while cache and thread._state != TERMINATE:\n            try:\n                task = get()\n            except (OSError, EOFError):\n                util.debug('result handler got EOFError/OSError -- exiting')\n                return\n\n            if task is None:\n                util.debug('result handler ignoring extra sentinel')\n                continue\n            job, i, obj = task\n            try:\n                cache[job]._set(i, obj)\n            except KeyError:\n                pass\n            task = job = obj = None\n\n        if hasattr(outqueue, '_reader'):\n            util.debug('ensuring that outqueue is not full')\n            # If we don't make room available in outqueue then\n            # attempts to add the sentinel (None) to outqueue may\n            # block.  There is guaranteed to be no more than 2 sentinels.\n            try:\n                for i in range(10):\n                    if not outqueue._reader.poll():\n                        break\n                    get()\n            except (OSError, EOFError):\n                pass\n\n        util.debug('result handler exiting: len(cache)=%s, thread._state=%s',\n              len(cache), thread._state)\n\n    @staticmethod\n    def _get_tasks(func, it, size):\n        it = iter(it)\n        while 1:\n            x = tuple(itertools.islice(it, size))\n            if not x:\n                return\n            yield (func, x)\n\n    def __reduce__(self):\n        raise NotImplementedError(\n              'pool objects cannot be passed between processes or pickled'\n              )\n\n    def close(self):\n        util.debug('closing pool')\n        if self._state == RUN:\n            self._state = CLOSE\n            self._worker_handler._state = CLOSE\n\n    def terminate(self):\n        util.debug('terminating pool')\n        self._state = TERMINATE\n        self._worker_handler._state = TERMINATE\n        self._terminate()\n\n    def join(self):\n        util.debug('joining pool')\n        assert self._state in (CLOSE, TERMINATE)\n        self._worker_handler.join()\n        self._task_handler.join()\n        self._result_handler.join()\n        for p in self._pool:\n            p.join()\n\n    @staticmethod\n    def _help_stuff_finish(inqueue, task_handler, size):\n        # task_handler may be blocked trying to put items on inqueue\n        util.debug('removing tasks from inqueue until task handler finished')\n        inqueue._rlock.acquire()\n        while task_handler.is_alive() and inqueue._reader.poll():\n            inqueue._reader.recv()\n            time.sleep(0)\n\n    @classmethod\n    def _terminate_pool(cls, taskqueue, inqueue, outqueue, pool,\n                        worker_handler, task_handler, result_handler, cache):\n        # this is guaranteed to only be called once\n        util.debug('finalizing pool')\n\n        worker_handler._state = TERMINATE\n        task_handler._state = TERMINATE\n\n        util.debug('helping task handler/workers to finish')\n        cls._help_stuff_finish(inqueue, task_handler, len(pool))\n\n        assert result_handler.is_alive() or len(cache) == 0\n\n        result_handler._state = TERMINATE\n        outqueue.put(None)                  # sentinel\n\n        # We must wait for the worker handler to exit before terminating\n        # workers because we don't want workers to be restarted behind our back.\n        util.debug('joining worker handler')\n        if threading.current_thread() is not worker_handler:\n            worker_handler.join()\n\n        # Terminate workers which haven't already finished.\n        if pool and hasattr(pool[0], 'terminate'):\n            util.debug('terminating workers')\n            for p in pool:\n                if p.exitcode is None:\n                    p.terminate()\n\n        util.debug('joining task handler')\n        if threading.current_thread() is not task_handler:\n            task_handler.join()\n\n        util.debug('joining result handler')\n        if threading.current_thread() is not result_handler:\n            result_handler.join()\n\n        if pool and hasattr(pool[0], 'terminate'):\n            util.debug('joining pool workers')\n            for p in pool:\n                if p.is_alive():\n                    # worker has not yet exited\n                    util.debug('cleaning up worker %d' % p.pid)\n                    p.join()\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.terminate()\n\n#\n# Class whose instances are returned by `Pool.apply_async()`\n#\n\nclass ApplyResult(object):\n\n    def __init__(self, cache, callback, error_callback):\n        self._event = threading.Event()\n        self._job = next(job_counter)\n        self._cache = cache\n        self._callback = callback\n        self._error_callback = error_callback\n        cache[self._job] = self\n\n    def ready(self):\n        return self._event.is_set()\n\n    def successful(self):\n        assert self.ready()\n        return self._success\n\n    def wait(self, timeout=None):\n        self._event.wait(timeout)\n\n    def get(self, timeout=None):\n        self.wait(timeout)\n        if not self.ready():\n            raise TimeoutError\n        if self._success:\n            return self._value\n        else:\n            raise self._value\n\n    def _set(self, i, obj):\n        self._success, self._value = obj\n        if self._callback and self._success:\n            self._callback(self._value)\n        if self._error_callback and not self._success:\n            self._error_callback(self._value)\n        self._event.set()\n        del self._cache[self._job]\n\nAsyncResult = ApplyResult       # create alias -- see #17805\n\n#\n# Class whose instances are returned by `Pool.map_async()`\n#\n\nclass MapResult(ApplyResult):\n\n    def __init__(self, cache, chunksize, length, callback, error_callback):\n        ApplyResult.__init__(self, cache, callback,\n                             error_callback=error_callback)\n        self._success = True\n        self._value = [None] * length\n        self._chunksize = chunksize\n        if chunksize <= 0:\n            self._number_left = 0\n            self._event.set()\n            del cache[self._job]\n        else:\n            self._number_left = length//chunksize + bool(length % chunksize)\n\n    def _set(self, i, success_result):\n        self._number_left -= 1\n        success, result = success_result\n        if success and self._success:\n            self._value[i*self._chunksize:(i+1)*self._chunksize] = result\n            if self._number_left == 0:\n                if self._callback:\n                    self._callback(self._value)\n                del self._cache[self._job]\n                self._event.set()\n        else:\n            if not success and self._success:\n                # only store first exception\n                self._success = False\n                self._value = result\n            if self._number_left == 0:\n                # only consider the result ready once all jobs are done\n                if self._error_callback:\n                    self._error_callback(self._value)\n                del self._cache[self._job]\n                self._event.set()\n\n#\n# Class whose instances are returned by `Pool.imap()`\n#\n\nclass IMapIterator(object):\n\n    def __init__(self, cache):\n        self._cond = threading.Condition(threading.Lock())\n        self._job = next(job_counter)\n        self._cache = cache\n        self._items = collections.deque()\n        self._index = 0\n        self._length = None\n        self._unsorted = {}\n        cache[self._job] = self\n\n    def __iter__(self):\n        return self\n\n    def next(self, timeout=None):\n        with self._cond:\n            try:\n                item = self._items.popleft()\n            except IndexError:\n                if self._index == self._length:\n                    raise StopIteration\n                self._cond.wait(timeout)\n                try:\n                    item = self._items.popleft()\n                except IndexError:\n                    if self._index == self._length:\n                        raise StopIteration\n                    raise TimeoutError\n\n        success, value = item\n        if success:\n            return value\n        raise value\n\n    __next__ = next                    # XXX\n\n    def _set(self, i, obj):\n        with self._cond:\n            if self._index == i:\n                self._items.append(obj)\n                self._index += 1\n                while self._index in self._unsorted:\n                    obj = self._unsorted.pop(self._index)\n                    self._items.append(obj)\n                    self._index += 1\n                self._cond.notify()\n            else:\n                self._unsorted[i] = obj\n\n            if self._index == self._length:\n                del self._cache[self._job]\n\n    def _set_length(self, length):\n        with self._cond:\n            self._length = length\n            if self._index == self._length:\n                self._cond.notify()\n                del self._cache[self._job]\n\n#\n# Class whose instances are returned by `Pool.imap_unordered()`\n#\n\nclass IMapUnorderedIterator(IMapIterator):\n\n    def _set(self, i, obj):\n        with self._cond:\n            self._items.append(obj)\n            self._index += 1\n            self._cond.notify()\n            if self._index == self._length:\n                del self._cache[self._job]\n\n#\n#\n#\n\nclass ThreadPool(Pool):\n    _wrap_exception = False\n\n    @staticmethod\n    def Process(*args, **kwds):\n        from .dummy import Process\n        return Process(*args, **kwds)\n\n    def __init__(self, processes=None, initializer=None, initargs=()):\n        Pool.__init__(self, processes, initializer, initargs)\n\n    def _setup_queues(self):\n        self._inqueue = queue.Queue()\n        self._outqueue = queue.Queue()\n        self._quick_put = self._inqueue.put\n        self._quick_get = self._outqueue.get\n\n    @staticmethod\n    def _help_stuff_finish(inqueue, task_handler, size):\n        # put sentinels at head of inqueue to make workers finish\n        with inqueue.not_empty:\n            inqueue.queue.clear()\n            inqueue.queue.extend([None] * size)\n            inqueue.not_empty.notify_all()\n",803],"/usr/lib/python3.6/multiprocessing/reduction.py":["#\n# Module which deals with pickling of objects.\n#\n# multiprocessing/reduction.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\nfrom abc import ABCMeta, abstractmethod\nimport copyreg\nimport functools\nimport io\nimport os\nimport pickle\nimport socket\nimport sys\n\nfrom . import context\n\n__all__ = ['send_handle', 'recv_handle', 'ForkingPickler', 'register', 'dump']\n\n\nHAVE_SEND_HANDLE = (sys.platform == 'win32' or\n                    (hasattr(socket, 'CMSG_LEN') and\n                     hasattr(socket, 'SCM_RIGHTS') and\n                     hasattr(socket.socket, 'sendmsg')))\n\n#\n# Pickler subclass\n#\n\nclass ForkingPickler(pickle.Pickler):\n    '''Pickler subclass used by multiprocessing.'''\n    _extra_reducers = {}\n    _copyreg_dispatch_table = copyreg.dispatch_table\n\n    def __init__(self, *args):\n        super().__init__(*args)\n        self.dispatch_table = self._copyreg_dispatch_table.copy()\n        self.dispatch_table.update(self._extra_reducers)\n\n    @classmethod\n    def register(cls, type, reduce):\n        '''Register a reduce function for a type.'''\n        cls._extra_reducers[type] = reduce\n\n    @classmethod\n    def dumps(cls, obj, protocol=None):\n        buf = io.BytesIO()\n        cls(buf, protocol).dump(obj)\n        return buf.getbuffer()\n\n    loads = pickle.loads\n\nregister = ForkingPickler.register\n\ndef dump(obj, file, protocol=None):\n    '''Replacement for pickle.dump() using ForkingPickler.'''\n    ForkingPickler(file, protocol).dump(obj)\n\n#\n# Platform specific definitions\n#\n\nif sys.platform == 'win32':\n    # Windows\n    __all__ += ['DupHandle', 'duplicate', 'steal_handle']\n    import _winapi\n\n    def duplicate(handle, target_process=None, inheritable=False):\n        '''Duplicate a handle.  (target_process is a handle not a pid!)'''\n        if target_process is None:\n            target_process = _winapi.GetCurrentProcess()\n        return _winapi.DuplicateHandle(\n            _winapi.GetCurrentProcess(), handle, target_process,\n            0, inheritable, _winapi.DUPLICATE_SAME_ACCESS)\n\n    def steal_handle(source_pid, handle):\n        '''Steal a handle from process identified by source_pid.'''\n        source_process_handle = _winapi.OpenProcess(\n            _winapi.PROCESS_DUP_HANDLE, False, source_pid)\n        try:\n            return _winapi.DuplicateHandle(\n                source_process_handle, handle,\n                _winapi.GetCurrentProcess(), 0, False,\n                _winapi.DUPLICATE_SAME_ACCESS | _winapi.DUPLICATE_CLOSE_SOURCE)\n        finally:\n            _winapi.CloseHandle(source_process_handle)\n\n    def send_handle(conn, handle, destination_pid):\n        '''Send a handle over a local connection.'''\n        dh = DupHandle(handle, _winapi.DUPLICATE_SAME_ACCESS, destination_pid)\n        conn.send(dh)\n\n    def recv_handle(conn):\n        '''Receive a handle over a local connection.'''\n        return conn.recv().detach()\n\n    class DupHandle(object):\n        '''Picklable wrapper for a handle.'''\n        def __init__(self, handle, access, pid=None):\n            if pid is None:\n                # We just duplicate the handle in the current process and\n                # let the receiving process steal the handle.\n                pid = os.getpid()\n            proc = _winapi.OpenProcess(_winapi.PROCESS_DUP_HANDLE, False, pid)\n            try:\n                self._handle = _winapi.DuplicateHandle(\n                    _winapi.GetCurrentProcess(),\n                    handle, proc, access, False, 0)\n            finally:\n                _winapi.CloseHandle(proc)\n            self._access = access\n            self._pid = pid\n\n        def detach(self):\n            '''Get the handle.  This should only be called once.'''\n            # retrieve handle from process which currently owns it\n            if self._pid == os.getpid():\n                # The handle has already been duplicated for this process.\n                return self._handle\n            # We must steal the handle from the process whose pid is self._pid.\n            proc = _winapi.OpenProcess(_winapi.PROCESS_DUP_HANDLE, False,\n                                       self._pid)\n            try:\n                return _winapi.DuplicateHandle(\n                    proc, self._handle, _winapi.GetCurrentProcess(),\n                    self._access, False, _winapi.DUPLICATE_CLOSE_SOURCE)\n            finally:\n                _winapi.CloseHandle(proc)\n\nelse:\n    # Unix\n    __all__ += ['DupFd', 'sendfds', 'recvfds']\n    import array\n\n    # On MacOSX we should acknowledge receipt of fds -- see Issue14669\n    ACKNOWLEDGE = sys.platform == 'darwin'\n\n    def sendfds(sock, fds):\n        '''Send an array of fds over an AF_UNIX socket.'''\n        fds = array.array('i', fds)\n        msg = bytes([len(fds) % 256])\n        sock.sendmsg([msg], [(socket.SOL_SOCKET, socket.SCM_RIGHTS, fds)])\n        if ACKNOWLEDGE and sock.recv(1) != b'A':\n            raise RuntimeError('did not receive acknowledgement of fd')\n\n    def recvfds(sock, size):\n        '''Receive an array of fds over an AF_UNIX socket.'''\n        a = array.array('i')\n        bytes_size = a.itemsize * size\n        msg, ancdata, flags, addr = sock.recvmsg(1, socket.CMSG_SPACE(bytes_size))\n        if not msg and not ancdata:\n            raise EOFError\n        try:\n            if ACKNOWLEDGE:\n                sock.send(b'A')\n            if len(ancdata) != 1:\n                raise RuntimeError('received %d items of ancdata' %\n                                   len(ancdata))\n            cmsg_level, cmsg_type, cmsg_data = ancdata[0]\n            if (cmsg_level == socket.SOL_SOCKET and\n                cmsg_type == socket.SCM_RIGHTS):\n                if len(cmsg_data) % a.itemsize != 0:\n                    raise ValueError\n                a.frombytes(cmsg_data)\n                assert len(a) % 256 == msg[0]\n                return list(a)\n        except (ValueError, IndexError):\n            pass\n        raise RuntimeError('Invalid data received')\n\n    def send_handle(conn, handle, destination_pid):\n        '''Send a handle over a local connection.'''\n        with socket.fromfd(conn.fileno(), socket.AF_UNIX, socket.SOCK_STREAM) as s:\n            sendfds(s, [handle])\n\n    def recv_handle(conn):\n        '''Receive a handle over a local connection.'''\n        with socket.fromfd(conn.fileno(), socket.AF_UNIX, socket.SOCK_STREAM) as s:\n            return recvfds(s, 1)[0]\n\n    def DupFd(fd):\n        '''Return a wrapper for an fd.'''\n        popen_obj = context.get_spawning_popen()\n        if popen_obj is not None:\n            return popen_obj.DupFd(popen_obj.duplicate_for_child(fd))\n        elif HAVE_SEND_HANDLE:\n            from . import resource_sharer\n            return resource_sharer.DupFd(fd)\n        else:\n            raise ValueError('SCM_RIGHTS appears not to be available')\n\n#\n# Try making some callable types picklable\n#\n\ndef _reduce_method(m):\n    if m.__self__ is None:\n        return getattr, (m.__class__, m.__func__.__name__)\n    else:\n        return getattr, (m.__self__, m.__func__.__name__)\nclass _C:\n    def f(self):\n        pass\nregister(type(_C().f), _reduce_method)\n\n\ndef _reduce_method_descriptor(m):\n    return getattr, (m.__objclass__, m.__name__)\nregister(type(list.append), _reduce_method_descriptor)\nregister(type(int.__add__), _reduce_method_descriptor)\n\n\ndef _reduce_partial(p):\n    return _rebuild_partial, (p.func, p.args, p.keywords or {})\ndef _rebuild_partial(func, args, keywords):\n    return functools.partial(func, *args, **keywords)\nregister(functools.partial, _reduce_partial)\n\n#\n# Make sockets picklable\n#\n\nif sys.platform == 'win32':\n    def _reduce_socket(s):\n        from .resource_sharer import DupSocket\n        return _rebuild_socket, (DupSocket(s),)\n    def _rebuild_socket(ds):\n        return ds.detach()\n    register(socket.socket, _reduce_socket)\n\nelse:\n    def _reduce_socket(s):\n        df = DupFd(s.fileno())\n        return _rebuild_socket, (df, s.family, s.type, s.proto)\n    def _rebuild_socket(df, family, type, proto):\n        fd = df.detach()\n        return socket.socket(family, type, proto, fileno=fd)\n    register(socket.socket, _reduce_socket)\n\n\nclass AbstractReducer(metaclass=ABCMeta):\n    '''Abstract base class for use in implementing a Reduction class\n    suitable for use in replacing the standard reduction mechanism\n    used in multiprocessing.'''\n    ForkingPickler = ForkingPickler\n    register = register\n    dump = dump\n    send_handle = send_handle\n    recv_handle = recv_handle\n\n    if sys.platform == 'win32':\n        steal_handle = steal_handle\n        duplicate = duplicate\n        DupHandle = DupHandle\n    else:\n        sendfds = sendfds\n        recvfds = recvfds\n        DupFd = DupFd\n\n    _reduce_method = _reduce_method\n    _reduce_method_descriptor = _reduce_method_descriptor\n    _rebuild_partial = _rebuild_partial\n    _reduce_socket = _reduce_socket\n    _rebuild_socket = _rebuild_socket\n\n    def __init__(self, *args):\n        register(type(_C().f), _reduce_method)\n        register(type(list.append), _reduce_method_descriptor)\n        register(type(int.__add__), _reduce_method_descriptor)\n        register(functools.partial, _reduce_partial)\n        register(socket.socket, _reduce_socket)\n",274],"/usr/lib/python3.6/multiprocessing/process.py":["#\n# Module providing the `Process` class which emulates `threading.Thread`\n#\n# multiprocessing/process.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\n__all__ = ['BaseProcess', 'current_process', 'active_children']\n\n#\n# Imports\n#\n\nimport os\nimport sys\nimport signal\nimport itertools\nfrom _weakrefset import WeakSet\n\n#\n#\n#\n\ntry:\n    ORIGINAL_DIR = os.path.abspath(os.getcwd())\nexcept OSError:\n    ORIGINAL_DIR = None\n\n#\n# Public functions\n#\n\ndef current_process():\n    '''\n    Return process object representing the current process\n    '''\n    return _current_process\n\ndef active_children():\n    '''\n    Return list of process objects corresponding to live child processes\n    '''\n    _cleanup()\n    return list(_children)\n\n#\n#\n#\n\ndef _cleanup():\n    # check for processes which have finished\n    for p in list(_children):\n        if p._popen.poll() is not None:\n            _children.discard(p)\n\n#\n# The `Process` class\n#\n\nclass BaseProcess(object):\n    '''\n    Process objects represent activity that is run in a separate process\n\n    The class is analogous to `threading.Thread`\n    '''\n    def _Popen(self):\n        raise NotImplementedError\n\n    def __init__(self, group=None, target=None, name=None, args=(), kwargs={},\n                 *, daemon=None):\n        assert group is None, 'group argument must be None for now'\n        count = next(_process_counter)\n        self._identity = _current_process._identity + (count,)\n        self._config = _current_process._config.copy()\n        self._parent_pid = os.getpid()\n        self._popen = None\n        self._target = target\n        self._args = tuple(args)\n        self._kwargs = dict(kwargs)\n        self._name = name or type(self).__name__ + '-' + \\\n                     ':'.join(str(i) for i in self._identity)\n        if daemon is not None:\n            self.daemon = daemon\n        _dangling.add(self)\n\n    def run(self):\n        '''\n        Method to be run in sub-process; can be overridden in sub-class\n        '''\n        if self._target:\n            self._target(*self._args, **self._kwargs)\n\n    def start(self):\n        '''\n        Start child process\n        '''\n        assert self._popen is None, 'cannot start a process twice'\n        assert self._parent_pid == os.getpid(), \\\n               'can only start a process object created by current process'\n        assert not _current_process._config.get('daemon'), \\\n               'daemonic processes are not allowed to have children'\n        _cleanup()\n        self._popen = self._Popen(self)\n        self._sentinel = self._popen.sentinel\n        # Avoid a refcycle if the target function holds an indirect\n        # reference to the process object (see bpo-30775)\n        del self._target, self._args, self._kwargs\n        _children.add(self)\n\n    def terminate(self):\n        '''\n        Terminate process; sends SIGTERM signal or uses TerminateProcess()\n        '''\n        self._popen.terminate()\n\n    def join(self, timeout=None):\n        '''\n        Wait until child process terminates\n        '''\n        assert self._parent_pid == os.getpid(), 'can only join a child process'\n        assert self._popen is not None, 'can only join a started process'\n        res = self._popen.wait(timeout)\n        if res is not None:\n            _children.discard(self)\n\n    def is_alive(self):\n        '''\n        Return whether process is alive\n        '''\n        if self is _current_process:\n            return True\n        assert self._parent_pid == os.getpid(), 'can only test a child process'\n\n        if self._popen is None:\n            return False\n\n        returncode = self._popen.poll()\n        if returncode is None:\n            return True\n        else:\n            _children.discard(self)\n            return False\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, name):\n        assert isinstance(name, str), 'name must be a string'\n        self._name = name\n\n    @property\n    def daemon(self):\n        '''\n        Return whether process is a daemon\n        '''\n        return self._config.get('daemon', False)\n\n    @daemon.setter\n    def daemon(self, daemonic):\n        '''\n        Set whether process is a daemon\n        '''\n        assert self._popen is None, 'process has already started'\n        self._config['daemon'] = daemonic\n\n    @property\n    def authkey(self):\n        return self._config['authkey']\n\n    @authkey.setter\n    def authkey(self, authkey):\n        '''\n        Set authorization key of process\n        '''\n        self._config['authkey'] = AuthenticationString(authkey)\n\n    @property\n    def exitcode(self):\n        '''\n        Return exit code of process or `None` if it has yet to stop\n        '''\n        if self._popen is None:\n            return self._popen\n        return self._popen.poll()\n\n    @property\n    def ident(self):\n        '''\n        Return identifier (PID) of process or `None` if it has yet to start\n        '''\n        if self is _current_process:\n            return os.getpid()\n        else:\n            return self._popen and self._popen.pid\n\n    pid = ident\n\n    @property\n    def sentinel(self):\n        '''\n        Return a file descriptor (Unix) or handle (Windows) suitable for\n        waiting for process termination.\n        '''\n        try:\n            return self._sentinel\n        except AttributeError:\n            raise ValueError(\"process not started\")\n\n    def __repr__(self):\n        if self is _current_process:\n            status = 'started'\n        elif self._parent_pid != os.getpid():\n            status = 'unknown'\n        elif self._popen is None:\n            status = 'initial'\n        else:\n            if self._popen.poll() is not None:\n                status = self.exitcode\n            else:\n                status = 'started'\n\n        if type(status) is int:\n            if status == 0:\n                status = 'stopped'\n            else:\n                status = 'stopped[%s]' % _exitcode_to_name.get(status, status)\n\n        return '<%s(%s, %s%s)>' % (type(self).__name__, self._name,\n                                   status, self.daemon and ' daemon' or '')\n\n    ##\n\n    def _bootstrap(self):\n        from . import util, context\n        global _current_process, _process_counter, _children\n\n        try:\n            if self._start_method is not None:\n                context._force_start_method(self._start_method)\n            _process_counter = itertools.count(1)\n            _children = set()\n            util._close_stdin()\n            old_process = _current_process\n            _current_process = self\n            try:\n                util._finalizer_registry.clear()\n                util._run_after_forkers()\n            finally:\n                # delay finalization of the old process object until after\n                # _run_after_forkers() is executed\n                del old_process\n            util.info('child process calling self.run()')\n            try:\n                self.run()\n                exitcode = 0\n            finally:\n                util._exit_function()\n        except SystemExit as e:\n            if not e.args:\n                exitcode = 1\n            elif isinstance(e.args[0], int):\n                exitcode = e.args[0]\n            else:\n                sys.stderr.write(str(e.args[0]) + '\\n')\n                exitcode = 1\n        except:\n            exitcode = 1\n            import traceback\n            sys.stderr.write('Process %s:\\n' % self.name)\n            traceback.print_exc()\n        finally:\n            util.info('process exiting with exitcode %d' % exitcode)\n            util._flush_std_streams()\n\n        return exitcode\n\n#\n# We subclass bytes to avoid accidental transmission of auth keys over network\n#\n\nclass AuthenticationString(bytes):\n    def __reduce__(self):\n        from .context import get_spawning_popen\n        if get_spawning_popen() is None:\n            raise TypeError(\n                'Pickling an AuthenticationString object is '\n                'disallowed for security reasons'\n                )\n        return AuthenticationString, (bytes(self),)\n\n#\n# Create object representing the main process\n#\n\nclass _MainProcess(BaseProcess):\n\n    def __init__(self):\n        self._identity = ()\n        self._name = 'MainProcess'\n        self._parent_pid = None\n        self._popen = None\n        self._config = {'authkey': AuthenticationString(os.urandom(32)),\n                        'semprefix': '/mp'}\n        # Note that some versions of FreeBSD only allow named\n        # semaphores to have names of up to 14 characters.  Therefore\n        # we choose a short prefix.\n        #\n        # On MacOSX in a sandbox it may be necessary to use a\n        # different prefix -- see #19478.\n        #\n        # Everything in self._config will be inherited by descendant\n        # processes.\n\n\n_current_process = _MainProcess()\n_process_counter = itertools.count(1)\n_children = set()\ndel _MainProcess\n\n#\n# Give names to some return codes\n#\n\n_exitcode_to_name = {}\n\nfor name, signum in list(signal.__dict__.items()):\n    if name[:3]=='SIG' and '_' not in name:\n        _exitcode_to_name[-signum] = name\n\n# For debug and leak testing\n_dangling = WeakSet()\n",335],"/usr/lib/python3.6/multiprocessing/context.py":["import os\nimport sys\nimport threading\n\nfrom . import process\nfrom . import reduction\n\n__all__ = []            # things are copied from here to __init__.py\n\n#\n# Exceptions\n#\n\nclass ProcessError(Exception):\n    pass\n\nclass BufferTooShort(ProcessError):\n    pass\n\nclass TimeoutError(ProcessError):\n    pass\n\nclass AuthenticationError(ProcessError):\n    pass\n\n#\n# Base type for contexts\n#\n\nclass BaseContext(object):\n\n    ProcessError = ProcessError\n    BufferTooShort = BufferTooShort\n    TimeoutError = TimeoutError\n    AuthenticationError = AuthenticationError\n\n    current_process = staticmethod(process.current_process)\n    active_children = staticmethod(process.active_children)\n\n    def cpu_count(self):\n        '''Returns the number of CPUs in the system'''\n        num = os.cpu_count()\n        if num is None:\n            raise NotImplementedError('cannot determine number of cpus')\n        else:\n            return num\n\n    def Manager(self):\n        '''Returns a manager associated with a running server process\n\n        The managers methods such as `Lock()`, `Condition()` and `Queue()`\n        can be used to create shared objects.\n        '''\n        from .managers import SyncManager\n        m = SyncManager(ctx=self.get_context())\n        m.start()\n        return m\n\n    def Pipe(self, duplex=True):\n        '''Returns two connection object connected by a pipe'''\n        from .connection import Pipe\n        return Pipe(duplex)\n\n    def Lock(self):\n        '''Returns a non-recursive lock object'''\n        from .synchronize import Lock\n        return Lock(ctx=self.get_context())\n\n    def RLock(self):\n        '''Returns a recursive lock object'''\n        from .synchronize import RLock\n        return RLock(ctx=self.get_context())\n\n    def Condition(self, lock=None):\n        '''Returns a condition object'''\n        from .synchronize import Condition\n        return Condition(lock, ctx=self.get_context())\n\n    def Semaphore(self, value=1):\n        '''Returns a semaphore object'''\n        from .synchronize import Semaphore\n        return Semaphore(value, ctx=self.get_context())\n\n    def BoundedSemaphore(self, value=1):\n        '''Returns a bounded semaphore object'''\n        from .synchronize import BoundedSemaphore\n        return BoundedSemaphore(value, ctx=self.get_context())\n\n    def Event(self):\n        '''Returns an event object'''\n        from .synchronize import Event\n        return Event(ctx=self.get_context())\n\n    def Barrier(self, parties, action=None, timeout=None):\n        '''Returns a barrier object'''\n        from .synchronize import Barrier\n        return Barrier(parties, action, timeout, ctx=self.get_context())\n\n    def Queue(self, maxsize=0):\n        '''Returns a queue object'''\n        from .queues import Queue\n        return Queue(maxsize, ctx=self.get_context())\n\n    def JoinableQueue(self, maxsize=0):\n        '''Returns a queue object'''\n        from .queues import JoinableQueue\n        return JoinableQueue(maxsize, ctx=self.get_context())\n\n    def SimpleQueue(self):\n        '''Returns a queue object'''\n        from .queues import SimpleQueue\n        return SimpleQueue(ctx=self.get_context())\n\n    def Pool(self, processes=None, initializer=None, initargs=(),\n             maxtasksperchild=None):\n        '''Returns a process pool object'''\n        from .pool import Pool\n        return Pool(processes, initializer, initargs, maxtasksperchild,\n                    context=self.get_context())\n\n    def RawValue(self, typecode_or_type, *args):\n        '''Returns a shared object'''\n        from .sharedctypes import RawValue\n        return RawValue(typecode_or_type, *args)\n\n    def RawArray(self, typecode_or_type, size_or_initializer):\n        '''Returns a shared array'''\n        from .sharedctypes import RawArray\n        return RawArray(typecode_or_type, size_or_initializer)\n\n    def Value(self, typecode_or_type, *args, lock=True):\n        '''Returns a synchronized shared object'''\n        from .sharedctypes import Value\n        return Value(typecode_or_type, *args, lock=lock,\n                     ctx=self.get_context())\n\n    def Array(self, typecode_or_type, size_or_initializer, *, lock=True):\n        '''Returns a synchronized shared array'''\n        from .sharedctypes import Array\n        return Array(typecode_or_type, size_or_initializer, lock=lock,\n                     ctx=self.get_context())\n\n    def freeze_support(self):\n        '''Check whether this is a fake forked process in a frozen executable.\n        If so then run code specified by commandline and exit.\n        '''\n        if sys.platform == 'win32' and getattr(sys, 'frozen', False):\n            from .spawn import freeze_support\n            freeze_support()\n\n    def get_logger(self):\n        '''Return package logger -- if it does not already exist then\n        it is created.\n        '''\n        from .util import get_logger\n        return get_logger()\n\n    def log_to_stderr(self, level=None):\n        '''Turn on logging and add a handler which prints to stderr'''\n        from .util import log_to_stderr\n        return log_to_stderr(level)\n\n    def allow_connection_pickling(self):\n        '''Install support for sending connections and sockets\n        between processes\n        '''\n        # This is undocumented.  In previous versions of multiprocessing\n        # its only effect was to make socket objects inheritable on Windows.\n        from . import connection\n\n    def set_executable(self, executable):\n        '''Sets the path to a python.exe or pythonw.exe binary used to run\n        child processes instead of sys.executable when using the 'spawn'\n        start method.  Useful for people embedding Python.\n        '''\n        from .spawn import set_executable\n        set_executable(executable)\n\n    def set_forkserver_preload(self, module_names):\n        '''Set list of module names to try to load in forkserver process.\n        This is really just a hint.\n        '''\n        from .forkserver import set_forkserver_preload\n        set_forkserver_preload(module_names)\n\n    def get_context(self, method=None):\n        if method is None:\n            return self\n        try:\n            ctx = _concrete_contexts[method]\n        except KeyError:\n            raise ValueError('cannot find context for %r' % method)\n        ctx._check_available()\n        return ctx\n\n    def get_start_method(self, allow_none=False):\n        return self._name\n\n    def set_start_method(self, method, force=False):\n        raise ValueError('cannot set start method of concrete context')\n\n    @property\n    def reducer(self):\n        '''Controls how objects will be reduced to a form that can be\n        shared with other processes.'''\n        return globals().get('reduction')\n\n    @reducer.setter\n    def reducer(self, reduction):\n        globals()['reduction'] = reduction\n\n    def _check_available(self):\n        pass\n\n#\n# Type of default context -- underlying context can be set at most once\n#\n\nclass Process(process.BaseProcess):\n    _start_method = None\n    @staticmethod\n    def _Popen(process_obj):\n        return _default_context.get_context().Process._Popen(process_obj)\n\nclass DefaultContext(BaseContext):\n    Process = Process\n\n    def __init__(self, context):\n        self._default_context = context\n        self._actual_context = None\n\n    def get_context(self, method=None):\n        if method is None:\n            if self._actual_context is None:\n                self._actual_context = self._default_context\n            return self._actual_context\n        else:\n            return super().get_context(method)\n\n    def set_start_method(self, method, force=False):\n        if self._actual_context is not None and not force:\n            raise RuntimeError('context has already been set')\n        if method is None and force:\n            self._actual_context = None\n            return\n        self._actual_context = self.get_context(method)\n\n    def get_start_method(self, allow_none=False):\n        if self._actual_context is None:\n            if allow_none:\n                return None\n            self._actual_context = self._default_context\n        return self._actual_context._name\n\n    def get_all_start_methods(self):\n        if sys.platform == 'win32':\n            return ['spawn']\n        else:\n            if reduction.HAVE_SEND_HANDLE:\n                return ['fork', 'spawn', 'forkserver']\n            else:\n                return ['fork', 'spawn']\n\nDefaultContext.__all__ = list(x for x in dir(DefaultContext) if x[0] != '_')\n\n#\n# Context types for fixed start method\n#\n\nif sys.platform != 'win32':\n\n    class ForkProcess(process.BaseProcess):\n        _start_method = 'fork'\n        @staticmethod\n        def _Popen(process_obj):\n            from .popen_fork import Popen\n            return Popen(process_obj)\n\n    class SpawnProcess(process.BaseProcess):\n        _start_method = 'spawn'\n        @staticmethod\n        def _Popen(process_obj):\n            from .popen_spawn_posix import Popen\n            return Popen(process_obj)\n\n    class ForkServerProcess(process.BaseProcess):\n        _start_method = 'forkserver'\n        @staticmethod\n        def _Popen(process_obj):\n            from .popen_forkserver import Popen\n            return Popen(process_obj)\n\n    class ForkContext(BaseContext):\n        _name = 'fork'\n        Process = ForkProcess\n\n    class SpawnContext(BaseContext):\n        _name = 'spawn'\n        Process = SpawnProcess\n\n    class ForkServerContext(BaseContext):\n        _name = 'forkserver'\n        Process = ForkServerProcess\n        def _check_available(self):\n            if not reduction.HAVE_SEND_HANDLE:\n                raise ValueError('forkserver start method not available')\n\n    _concrete_contexts = {\n        'fork': ForkContext(),\n        'spawn': SpawnContext(),\n        'forkserver': ForkServerContext(),\n    }\n    _default_context = DefaultContext(_concrete_contexts['fork'])\n\nelse:\n\n    class SpawnProcess(process.BaseProcess):\n        _start_method = 'spawn'\n        @staticmethod\n        def _Popen(process_obj):\n            from .popen_spawn_win32 import Popen\n            return Popen(process_obj)\n\n    class SpawnContext(BaseContext):\n        _name = 'spawn'\n        Process = SpawnProcess\n\n    _concrete_contexts = {\n        'spawn': SpawnContext(),\n    }\n    _default_context = DefaultContext(_concrete_contexts['spawn'])\n\n#\n# Force the start method\n#\n\ndef _force_start_method(method):\n    _default_context._actual_context = _concrete_contexts[method]\n\n#\n# Check that the current thread is spawning a child process\n#\n\n_tls = threading.local()\n\ndef get_spawning_popen():\n    return getattr(_tls, 'spawning_popen', None)\n\ndef set_spawning_popen(popen):\n    _tls.spawning_popen = popen\n\ndef assert_spawning(obj):\n    if get_spawning_popen() is None:\n        raise RuntimeError(\n            '%s objects should only be shared between processes'\n            ' through inheritance' % type(obj).__name__\n            )\n",357],"/usr/lib/python3.6/random.py":["\"\"\"Random variable generators.\n\n    integers\n    --------\n           uniform within range\n\n    sequences\n    ---------\n           pick random element\n           pick random sample\n           pick weighted random sample\n           generate random permutation\n\n    distributions on the real line:\n    ------------------------------\n           uniform\n           triangular\n           normal (Gaussian)\n           lognormal\n           negative exponential\n           gamma\n           beta\n           pareto\n           Weibull\n\n    distributions on the circle (angles 0 to 2pi)\n    ---------------------------------------------\n           circular uniform\n           von Mises\n\nGeneral notes on the underlying Mersenne Twister core generator:\n\n* The period is 2**19937-1.\n* It is one of the most extensively tested generators in existence.\n* The random() method is implemented in C, executes in a single Python step,\n  and is, therefore, threadsafe.\n\n\"\"\"\n\nfrom warnings import warn as _warn\nfrom types import MethodType as _MethodType, BuiltinMethodType as _BuiltinMethodType\nfrom math import log as _log, exp as _exp, pi as _pi, e as _e, ceil as _ceil\nfrom math import sqrt as _sqrt, acos as _acos, cos as _cos, sin as _sin\nfrom os import urandom as _urandom\nfrom _collections_abc import Set as _Set, Sequence as _Sequence\nfrom hashlib import sha512 as _sha512\nimport itertools as _itertools\nimport bisect as _bisect\n\n__all__ = [\"Random\",\"seed\",\"random\",\"uniform\",\"randint\",\"choice\",\"sample\",\n           \"randrange\",\"shuffle\",\"normalvariate\",\"lognormvariate\",\n           \"expovariate\",\"vonmisesvariate\",\"gammavariate\",\"triangular\",\n           \"gauss\",\"betavariate\",\"paretovariate\",\"weibullvariate\",\n           \"getstate\",\"setstate\", \"getrandbits\", \"choices\",\n           \"SystemRandom\"]\n\nNV_MAGICCONST = 4 * _exp(-0.5)/_sqrt(2.0)\nTWOPI = 2.0*_pi\nLOG4 = _log(4.0)\nSG_MAGICCONST = 1.0 + _log(4.5)\nBPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\n\n\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\n\nimport _random\n\nclass Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.\n\n    Used to instantiate instances of Random to get generators that don't\n    share state.\n\n    Class Random can also be subclassed if you want to use a different basic\n    generator of your own devising: in that case, override the following\n    methods:  random(), seed(), getstate(), and setstate().\n    Optionally, implement a getrandbits() method so that randrange()\n    can cover arbitrarily large ranges.\n\n    \"\"\"\n\n    VERSION = 3     # used by getstate/setstate\n\n    def __init__(self, x=None):\n        \"\"\"Initialize an instance.\n\n        Optional argument x controls seeding, as for Random.seed().\n        \"\"\"\n\n        self.seed(x)\n        self.gauss_next = None\n\n    def seed(self, a=None, version=2):\n        \"\"\"Initialize internal state from hashable object.\n\n        None or no argument seeds from current time or from an operating\n        system specific randomness source if available.\n\n        If *a* is an int, all bits are used.\n\n        For version 2 (the default), all of the bits are used if *a* is a str,\n        bytes, or bytearray.  For version 1 (provided for reproducing random\n        sequences from older versions of Python), the algorithm for str and\n        bytes generates a narrower range of seeds.\n\n        \"\"\"\n\n        if version == 1 and isinstance(a, (str, bytes)):\n            a = a.decode('latin-1') if isinstance(a, bytes) else a\n            x = ord(a[0]) << 7 if a else 0\n            for c in map(ord, a):\n                x = ((1000003 * x) ^ c) & 0xFFFFFFFFFFFFFFFF\n            x ^= len(a)\n            a = -2 if x == -1 else x\n\n        if version == 2 and isinstance(a, (str, bytes, bytearray)):\n            if isinstance(a, str):\n                a = a.encode()\n            a += _sha512(a).digest()\n            a = int.from_bytes(a, 'big')\n\n        super().seed(a)\n        self.gauss_next = None\n\n    def getstate(self):\n        \"\"\"Return internal state; can be passed to setstate() later.\"\"\"\n        return self.VERSION, super().getstate(), self.gauss_next\n\n    def setstate(self, state):\n        \"\"\"Restore internal state from object returned by getstate().\"\"\"\n        version = state[0]\n        if version == 3:\n            version, internalstate, self.gauss_next = state\n            super().setstate(internalstate)\n        elif version == 2:\n            version, internalstate, self.gauss_next = state\n            # In version 2, the state was saved as signed ints, which causes\n            #   inconsistencies between 32/64-bit systems. The state is\n            #   really unsigned 32-bit ints, so we convert negative ints from\n            #   version 2 to positive longs for version 3.\n            try:\n                internalstate = tuple(x % (2**32) for x in internalstate)\n            except ValueError as e:\n                raise TypeError from e\n            super().setstate(internalstate)\n        else:\n            raise ValueError(\"state with version %s passed to \"\n                             \"Random.setstate() of version %s\" %\n                             (version, self.VERSION))\n\n## ---- Methods below this point do not need to be overridden when\n## ---- subclassing for the purpose of using a different core generator.\n\n## -------------------- pickle support  -------------------\n\n    # Issue 17489: Since __reduce__ was defined to fix #759889 this is no\n    # longer called; we leave it here because it has been here since random was\n    # rewritten back in 2001 and why risk breaking something.\n    def __getstate__(self): # for pickle\n        return self.getstate()\n\n    def __setstate__(self, state):  # for pickle\n        self.setstate(state)\n\n    def __reduce__(self):\n        return self.__class__, (), self.getstate()\n\n## -------------------- integer methods  -------------------\n\n    def randrange(self, start, stop=None, step=1, _int=int):\n        \"\"\"Choose a random item from range(start, stop[, step]).\n\n        This fixes the problem with randint() which includes the\n        endpoint; in Python this is usually not what you want.\n\n        \"\"\"\n\n        # This code is a bit messy to make it fast for the\n        # common case while still doing adequate error checking.\n        istart = _int(start)\n        if istart != start:\n            raise ValueError(\"non-integer arg 1 for randrange()\")\n        if stop is None:\n            if istart > 0:\n                return self._randbelow(istart)\n            raise ValueError(\"empty range for randrange()\")\n\n        # stop argument supplied.\n        istop = _int(stop)\n        if istop != stop:\n            raise ValueError(\"non-integer stop for randrange()\")\n        width = istop - istart\n        if step == 1 and width > 0:\n            return istart + self._randbelow(width)\n        if step == 1:\n            raise ValueError(\"empty range for randrange() (%d,%d, %d)\" % (istart, istop, width))\n\n        # Non-unit step argument supplied.\n        istep = _int(step)\n        if istep != step:\n            raise ValueError(\"non-integer step for randrange()\")\n        if istep > 0:\n            n = (width + istep - 1) // istep\n        elif istep < 0:\n            n = (width + istep + 1) // istep\n        else:\n            raise ValueError(\"zero step for randrange()\")\n\n        if n <= 0:\n            raise ValueError(\"empty range for randrange()\")\n\n        return istart + istep*self._randbelow(n)\n\n    def randint(self, a, b):\n        \"\"\"Return random integer in range [a, b], including both end points.\n        \"\"\"\n\n        return self.randrange(a, b+1)\n\n    def _randbelow(self, n, int=int, maxsize=1<<BPF, type=type,\n                   Method=_MethodType, BuiltinMethod=_BuiltinMethodType):\n        \"Return a random int in the range [0,n).  Raises ValueError if n==0.\"\n\n        random = self.random\n        getrandbits = self.getrandbits\n        # Only call self.getrandbits if the original random() builtin method\n        # has not been overridden or if a new getrandbits() was supplied.\n        if type(random) is BuiltinMethod or type(getrandbits) is Method:\n            k = n.bit_length()  # don't use (n-1) here because n can be 1\n            r = getrandbits(k)          # 0 <= r < 2**k\n            while r >= n:\n                r = getrandbits(k)\n            return r\n        # There's an overridden random() method but no new getrandbits() method,\n        # so we can only use random() from here.\n        if n >= maxsize:\n            _warn(\"Underlying random() generator does not supply \\n\"\n                \"enough bits to choose from a population range this large.\\n\"\n                \"To remove the range limitation, add a getrandbits() method.\")\n            return int(random() * n)\n        if n == 0:\n            raise ValueError(\"Boundary cannot be zero\")\n        rem = maxsize % n\n        limit = (maxsize - rem) / maxsize   # int(limit * maxsize) % n == 0\n        r = random()\n        while r >= limit:\n            r = random()\n        return int(r*maxsize) % n\n\n## -------------------- sequence methods  -------------------\n\n    def choice(self, seq):\n        \"\"\"Choose a random element from a non-empty sequence.\"\"\"\n        try:\n            i = self._randbelow(len(seq))\n        except ValueError:\n            raise IndexError('Cannot choose from an empty sequence') from None\n        return seq[i]\n\n    def shuffle(self, x, random=None):\n        \"\"\"Shuffle list x in place, and return None.\n\n        Optional argument random is a 0-argument function returning a\n        random float in [0.0, 1.0); if it is the default None, the\n        standard random.random will be used.\n\n        \"\"\"\n\n        if random is None:\n            randbelow = self._randbelow\n            for i in reversed(range(1, len(x))):\n                # pick an element in x[:i+1] with which to exchange x[i]\n                j = randbelow(i+1)\n                x[i], x[j] = x[j], x[i]\n        else:\n            _int = int\n            for i in reversed(range(1, len(x))):\n                # pick an element in x[:i+1] with which to exchange x[i]\n                j = _int(random() * (i+1))\n                x[i], x[j] = x[j], x[i]\n\n    def sample(self, population, k):\n        \"\"\"Chooses k unique random elements from a population sequence or set.\n\n        Returns a new list containing elements from the population while\n        leaving the original population unchanged.  The resulting list is\n        in selection order so that all sub-slices will also be valid random\n        samples.  This allows raffle winners (the sample) to be partitioned\n        into grand prize and second place winners (the subslices).\n\n        Members of the population need not be hashable or unique.  If the\n        population contains repeats, then each occurrence is a possible\n        selection in the sample.\n\n        To choose a sample in a range of integers, use range as an argument.\n        This is especially fast and space efficient for sampling from a\n        large population:   sample(range(10000000), 60)\n        \"\"\"\n\n        # Sampling without replacement entails tracking either potential\n        # selections (the pool) in a list or previous selections in a set.\n\n        # When the number of selections is small compared to the\n        # population, then tracking selections is efficient, requiring\n        # only a small set and an occasional reselection.  For\n        # a larger number of selections, the pool tracking method is\n        # preferred since the list takes less space than the\n        # set and it doesn't suffer from frequent reselections.\n\n        if isinstance(population, _Set):\n            population = tuple(population)\n        if not isinstance(population, _Sequence):\n            raise TypeError(\"Population must be a sequence or set.  For dicts, use list(d).\")\n        randbelow = self._randbelow\n        n = len(population)\n        if not 0 <= k <= n:\n            raise ValueError(\"Sample larger than population or is negative\")\n        result = [None] * k\n        setsize = 21        # size of a small set minus size of an empty list\n        if k > 5:\n            setsize += 4 ** _ceil(_log(k * 3, 4)) # table size for big sets\n        if n <= setsize:\n            # An n-length list is smaller than a k-length set\n            pool = list(population)\n            for i in range(k):         # invariant:  non-selected at [0,n-i)\n                j = randbelow(n-i)\n                result[i] = pool[j]\n                pool[j] = pool[n-i-1]   # move non-selected item into vacancy\n        else:\n            selected = set()\n            selected_add = selected.add\n            for i in range(k):\n                j = randbelow(n)\n                while j in selected:\n                    j = randbelow(n)\n                selected_add(j)\n                result[i] = population[j]\n        return result\n\n    def choices(self, population, weights=None, *, cum_weights=None, k=1):\n        \"\"\"Return a k sized list of population elements chosen with replacement.\n\n        If the relative weights or cumulative weights are not specified,\n        the selections are made with equal probability.\n\n        \"\"\"\n        random = self.random\n        if cum_weights is None:\n            if weights is None:\n                _int = int\n                total = len(population)\n                return [population[_int(random() * total)] for i in range(k)]\n            cum_weights = list(_itertools.accumulate(weights))\n        elif weights is not None:\n            raise TypeError('Cannot specify both weights and cumulative weights')\n        if len(cum_weights) != len(population):\n            raise ValueError('The number of weights does not match the population')\n        bisect = _bisect.bisect\n        total = cum_weights[-1]\n        hi = len(cum_weights) - 1\n        return [population[bisect(cum_weights, random() * total, 0, hi)]\n                for i in range(k)]\n\n## -------------------- real-valued distributions  -------------------\n\n## -------------------- uniform distribution -------------------\n\n    def uniform(self, a, b):\n        \"Get a random number in the range [a, b) or [a, b] depending on rounding.\"\n        return a + (b-a) * self.random()\n\n## -------------------- triangular --------------------\n\n    def triangular(self, low=0.0, high=1.0, mode=None):\n        \"\"\"Triangular distribution.\n\n        Continuous distribution bounded by given lower and upper limits,\n        and having a given mode value in-between.\n\n        http://en.wikipedia.org/wiki/Triangular_distribution\n\n        \"\"\"\n        u = self.random()\n        try:\n            c = 0.5 if mode is None else (mode - low) / (high - low)\n        except ZeroDivisionError:\n            return low\n        if u > c:\n            u = 1.0 - u\n            c = 1.0 - c\n            low, high = high, low\n        return low + (high - low) * (u * c) ** 0.5\n\n## -------------------- normal distribution --------------------\n\n    def normalvariate(self, mu, sigma):\n        \"\"\"Normal distribution.\n\n        mu is the mean, and sigma is the standard deviation.\n\n        \"\"\"\n        # mu = mean, sigma = standard deviation\n\n        # Uses Kinderman and Monahan method. Reference: Kinderman,\n        # A.J. and Monahan, J.F., \"Computer generation of random\n        # variables using the ratio of uniform deviates\", ACM Trans\n        # Math Software, 3, (1977), pp257-260.\n\n        random = self.random\n        while 1:\n            u1 = random()\n            u2 = 1.0 - random()\n            z = NV_MAGICCONST*(u1-0.5)/u2\n            zz = z*z/4.0\n            if zz <= -_log(u2):\n                break\n        return mu + z*sigma\n\n## -------------------- lognormal distribution --------------------\n\n    def lognormvariate(self, mu, sigma):\n        \"\"\"Log normal distribution.\n\n        If you take the natural logarithm of this distribution, you'll get a\n        normal distribution with mean mu and standard deviation sigma.\n        mu can have any value, and sigma must be greater than zero.\n\n        \"\"\"\n        return _exp(self.normalvariate(mu, sigma))\n\n## -------------------- exponential distribution --------------------\n\n    def expovariate(self, lambd):\n        \"\"\"Exponential distribution.\n\n        lambd is 1.0 divided by the desired mean.  It should be\n        nonzero.  (The parameter would be called \"lambda\", but that is\n        a reserved word in Python.)  Returned values range from 0 to\n        positive infinity if lambd is positive, and from negative\n        infinity to 0 if lambd is negative.\n\n        \"\"\"\n        # lambd: rate lambd = 1/mean\n        # ('lambda' is a Python reserved word)\n\n        # we use 1-random() instead of random() to preclude the\n        # possibility of taking the log of zero.\n        return -_log(1.0 - self.random())/lambd\n\n## -------------------- von Mises distribution --------------------\n\n    def vonmisesvariate(self, mu, kappa):\n        \"\"\"Circular data distribution.\n\n        mu is the mean angle, expressed in radians between 0 and 2*pi, and\n        kappa is the concentration parameter, which must be greater than or\n        equal to zero.  If kappa is equal to zero, this distribution reduces\n        to a uniform random angle over the range 0 to 2*pi.\n\n        \"\"\"\n        # mu:    mean angle (in radians between 0 and 2*pi)\n        # kappa: concentration parameter kappa (>= 0)\n        # if kappa = 0 generate uniform random angle\n\n        # Based upon an algorithm published in: Fisher, N.I.,\n        # \"Statistical Analysis of Circular Data\", Cambridge\n        # University Press, 1993.\n\n        # Thanks to Magnus Kessler for a correction to the\n        # implementation of step 4.\n\n        random = self.random\n        if kappa <= 1e-6:\n            return TWOPI * random()\n\n        s = 0.5 / kappa\n        r = s + _sqrt(1.0 + s * s)\n\n        while 1:\n            u1 = random()\n            z = _cos(_pi * u1)\n\n            d = z / (r + z)\n            u2 = random()\n            if u2 < 1.0 - d * d or u2 <= (1.0 - d) * _exp(d):\n                break\n\n        q = 1.0 / r\n        f = (q + z) / (1.0 + q * z)\n        u3 = random()\n        if u3 > 0.5:\n            theta = (mu + _acos(f)) % TWOPI\n        else:\n            theta = (mu - _acos(f)) % TWOPI\n\n        return theta\n\n## -------------------- gamma distribution --------------------\n\n    def gammavariate(self, alpha, beta):\n        \"\"\"Gamma distribution.  Not the gamma function!\n\n        Conditions on the parameters are alpha > 0 and beta > 0.\n\n        The probability distribution function is:\n\n                    x ** (alpha - 1) * math.exp(-x / beta)\n          pdf(x) =  --------------------------------------\n                      math.gamma(alpha) * beta ** alpha\n\n        \"\"\"\n\n        # alpha > 0, beta > 0, mean is alpha*beta, variance is alpha*beta**2\n\n        # Warning: a few older sources define the gamma distribution in terms\n        # of alpha > -1.0\n        if alpha <= 0.0 or beta <= 0.0:\n            raise ValueError('gammavariate: alpha and beta must be > 0.0')\n\n        random = self.random\n        if alpha > 1.0:\n\n            # Uses R.C.H. Cheng, \"The generation of Gamma\n            # variables with non-integral shape parameters\",\n            # Applied Statistics, (1977), 26, No. 1, p71-74\n\n            ainv = _sqrt(2.0 * alpha - 1.0)\n            bbb = alpha - LOG4\n            ccc = alpha + ainv\n\n            while 1:\n                u1 = random()\n                if not 1e-7 < u1 < .9999999:\n                    continue\n                u2 = 1.0 - random()\n                v = _log(u1/(1.0-u1))/ainv\n                x = alpha*_exp(v)\n                z = u1*u1*u2\n                r = bbb+ccc*v-x\n                if r + SG_MAGICCONST - 4.5*z >= 0.0 or r >= _log(z):\n                    return x * beta\n\n        elif alpha == 1.0:\n            # expovariate(1)\n            u = random()\n            while u <= 1e-7:\n                u = random()\n            return -_log(u) * beta\n\n        else:   # alpha is between 0 and 1 (exclusive)\n\n            # Uses ALGORITHM GS of Statistical Computing - Kennedy & Gentle\n\n            while 1:\n                u = random()\n                b = (_e + alpha)/_e\n                p = b*u\n                if p <= 1.0:\n                    x = p ** (1.0/alpha)\n                else:\n                    x = -_log((b-p)/alpha)\n                u1 = random()\n                if p > 1.0:\n                    if u1 <= x ** (alpha - 1.0):\n                        break\n                elif u1 <= _exp(-x):\n                    break\n            return x * beta\n\n## -------------------- Gauss (faster alternative) --------------------\n\n    def gauss(self, mu, sigma):\n        \"\"\"Gaussian distribution.\n\n        mu is the mean, and sigma is the standard deviation.  This is\n        slightly faster than the normalvariate() function.\n\n        Not thread-safe without a lock around calls.\n\n        \"\"\"\n\n        # When x and y are two variables from [0, 1), uniformly\n        # distributed, then\n        #\n        #    cos(2*pi*x)*sqrt(-2*log(1-y))\n        #    sin(2*pi*x)*sqrt(-2*log(1-y))\n        #\n        # are two *independent* variables with normal distribution\n        # (mu = 0, sigma = 1).\n        # (Lambert Meertens)\n        # (corrected version; bug discovered by Mike Miller, fixed by LM)\n\n        # Multithreading note: When two threads call this function\n        # simultaneously, it is possible that they will receive the\n        # same return value.  The window is very small though.  To\n        # avoid this, you have to use a lock around all calls.  (I\n        # didn't want to slow this down in the serial case by using a\n        # lock here.)\n\n        random = self.random\n        z = self.gauss_next\n        self.gauss_next = None\n        if z is None:\n            x2pi = random() * TWOPI\n            g2rad = _sqrt(-2.0 * _log(1.0 - random()))\n            z = _cos(x2pi) * g2rad\n            self.gauss_next = _sin(x2pi) * g2rad\n\n        return mu + z*sigma\n\n## -------------------- beta --------------------\n## See\n## http://mail.python.org/pipermail/python-bugs-list/2001-January/003752.html\n## for Ivan Frohne's insightful analysis of why the original implementation:\n##\n##    def betavariate(self, alpha, beta):\n##        # Discrete Event Simulation in C, pp 87-88.\n##\n##        y = self.expovariate(alpha)\n##        z = self.expovariate(1.0/beta)\n##        return z/(y+z)\n##\n## was dead wrong, and how it probably got that way.\n\n    def betavariate(self, alpha, beta):\n        \"\"\"Beta distribution.\n\n        Conditions on the parameters are alpha > 0 and beta > 0.\n        Returned values range between 0 and 1.\n\n        \"\"\"\n\n        # This version due to Janne Sinkkonen, and matches all the std\n        # texts (e.g., Knuth Vol 2 Ed 3 pg 134 \"the beta distribution\").\n        y = self.gammavariate(alpha, 1.0)\n        if y == 0:\n            return 0.0\n        else:\n            return y / (y + self.gammavariate(beta, 1.0))\n\n## -------------------- Pareto --------------------\n\n    def paretovariate(self, alpha):\n        \"\"\"Pareto distribution.  alpha is the shape parameter.\"\"\"\n        # Jain, pg. 495\n\n        u = 1.0 - self.random()\n        return 1.0 / u ** (1.0/alpha)\n\n## -------------------- Weibull --------------------\n\n    def weibullvariate(self, alpha, beta):\n        \"\"\"Weibull distribution.\n\n        alpha is the scale parameter and beta is the shape parameter.\n\n        \"\"\"\n        # Jain, pg. 499; bug fix courtesy Bill Arms\n\n        u = 1.0 - self.random()\n        return alpha * (-_log(u)) ** (1.0/beta)\n\n## --------------- Operating System Random Source  ------------------\n\nclass SystemRandom(Random):\n    \"\"\"Alternate random number generator using sources provided\n    by the operating system (such as /dev/urandom on Unix or\n    CryptGenRandom on Windows).\n\n     Not available on all systems (see os.urandom() for details).\n    \"\"\"\n\n    def random(self):\n        \"\"\"Get the next random number in the range [0.0, 1.0).\"\"\"\n        return (int.from_bytes(_urandom(7), 'big') >> 3) * RECIP_BPF\n\n    def getrandbits(self, k):\n        \"\"\"getrandbits(k) -> x.  Generates an int with k random bits.\"\"\"\n        if k <= 0:\n            raise ValueError('number of bits must be greater than zero')\n        if k != int(k):\n            raise TypeError('number of bits should be an integer')\n        numbytes = (k + 7) // 8                       # bits / 8 and rounded up\n        x = int.from_bytes(_urandom(numbytes), 'big')\n        return x >> (numbytes * 8 - k)                # trim excess bits\n\n    def seed(self, *args, **kwds):\n        \"Stub method.  Not used for a system random number generator.\"\n        return None\n\n    def _notimplemented(self, *args, **kwds):\n        \"Method should not be called for a system random number generator.\"\n        raise NotImplementedError('System entropy source does not have state.')\n    getstate = setstate = _notimplemented\n\n## -------------------- test program --------------------\n\ndef _test_generator(n, func, args):\n    import time\n    print(n, 'times', func.__name__)\n    total = 0.0\n    sqsum = 0.0\n    smallest = 1e10\n    largest = -1e10\n    t0 = time.time()\n    for i in range(n):\n        x = func(*args)\n        total += x\n        sqsum = sqsum + x*x\n        smallest = min(x, smallest)\n        largest = max(x, largest)\n    t1 = time.time()\n    print(round(t1-t0, 3), 'sec,', end=' ')\n    avg = total/n\n    stddev = _sqrt(sqsum/n - avg*avg)\n    print('avg %g, stddev %g, min %g, max %g\\n' % \\\n              (avg, stddev, smallest, largest))\n\n\ndef _test(N=2000):\n    _test_generator(N, random, ())\n    _test_generator(N, normalvariate, (0.0, 1.0))\n    _test_generator(N, lognormvariate, (0.0, 1.0))\n    _test_generator(N, vonmisesvariate, (0.0, 1.0))\n    _test_generator(N, gammavariate, (0.01, 1.0))\n    _test_generator(N, gammavariate, (0.1, 1.0))\n    _test_generator(N, gammavariate, (0.1, 2.0))\n    _test_generator(N, gammavariate, (0.5, 1.0))\n    _test_generator(N, gammavariate, (0.9, 1.0))\n    _test_generator(N, gammavariate, (1.0, 1.0))\n    _test_generator(N, gammavariate, (2.0, 1.0))\n    _test_generator(N, gammavariate, (20.0, 1.0))\n    _test_generator(N, gammavariate, (200.0, 1.0))\n    _test_generator(N, gauss, (0.0, 1.0))\n    _test_generator(N, betavariate, (3.0, 3.0))\n    _test_generator(N, triangular, (0.0, 1.0, 1.0/3.0))\n\n# Create one instance, seeded from current time, and export its methods\n# as module-level functions.  The functions share state across all uses\n#(both in the user's code and in the Python libraries), but that's fine\n# for most programs and is easier for the casual user than making them\n# instantiate their own Random() instance.\n\n_inst = Random()\nseed = _inst.seed\nrandom = _inst.random\nuniform = _inst.uniform\ntriangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\n\nif __name__ == '__main__':\n    _test()\n",772],"/usr/lib/python3.6/tempfile.py":["\"\"\"Temporary files.\n\nThis module provides generic, low- and high-level interfaces for\ncreating temporary files and directories.  All of the interfaces\nprovided by this module can be used without fear of race conditions\nexcept for 'mktemp'.  'mktemp' is subject to race conditions and\nshould not be used; it is provided for backward compatibility only.\n\nThe default path names are returned as str.  If you supply bytes as\ninput, all return values will be in bytes.  Ex:\n\n    >>> tempfile.mkstemp()\n    (4, '/tmp/tmptpu9nin8')\n    >>> tempfile.mkdtemp(suffix=b'')\n    b'/tmp/tmppbi8f0hy'\n\nThis module also provides some data items to the user:\n\n  TMP_MAX  - maximum number of names that will be tried before\n             giving up.\n  tempdir  - If this is set to a string before the first use of\n             any routine from this module, it will be considered as\n             another candidate location to store temporary files.\n\"\"\"\n\n__all__ = [\n    \"NamedTemporaryFile\", \"TemporaryFile\", # high level safe interfaces\n    \"SpooledTemporaryFile\", \"TemporaryDirectory\",\n    \"mkstemp\", \"mkdtemp\",                  # low level safe interfaces\n    \"mktemp\",                              # deprecated unsafe interface\n    \"TMP_MAX\", \"gettempprefix\",            # constants\n    \"tempdir\", \"gettempdir\",\n    \"gettempprefixb\", \"gettempdirb\",\n   ]\n\n\n# Imports.\n\nimport functools as _functools\nimport warnings as _warnings\nimport io as _io\nimport os as _os\ntry:\n  import shutil as _shutil\n  _rmtree = _shutil.rmtree\nexcept ImportError:\n  import sys as _sys\n  import stat as _stat\n  # version vulnerable to race conditions\n  def _rmtree_unsafe(path, onerror):\n    try:\n        if _os.path.islink(path):\n            # symlinks to directories are forbidden, see bug #1669\n            raise OSError(\"Cannot call rmtree on a symbolic link\")\n    except OSError:\n        onerror(_os.path.islink, path, _sys.exc_info())\n        # can't continue even if onerror hook returns\n        return\n    names = []\n    try:\n        names = _os.listdir(path)\n    except OSError:\n        onerror(_os.listdir, path, _sys.exc_info())\n    for name in names:\n        fullname = _os.path.join(path, name)\n        try:\n            mode = _os.lstat(fullname).st_mode\n        except OSError:\n            mode = 0\n        if _stat.S_ISDIR(mode):\n            _rmtree_unsafe(fullname, onerror)\n        else:\n            try:\n                _os.unlink(fullname)\n            except OSError:\n                onerror(_os.unlink, fullname, _sys.exc_info())\n    try:\n        _os.rmdir(path)\n    except OSError:\n        onerror(_os.rmdir, path, _sys.exc_info())\n\n  # Version using fd-based APIs to protect against races\n  def _rmtree_safe_fd(topfd, path, onerror):\n    names = []\n    try:\n        names = _os.listdir(topfd)\n    except OSError as err:\n        err.filename = path\n        onerror(_os.listdir, path, _sys.exc_info())\n    for name in names:\n        fullname = _os.path.join(path, name)\n        try:\n            orig_st = _os.stat(name, dir_fd=topfd, follow_symlinks=False)\n            mode = orig_st.st_mode\n        except OSError:\n            mode = 0\n        if _stat.S_ISDIR(mode):\n            try:\n                dirfd = _os.open(name, _os.O_RDONLY, dir_fd=topfd)\n            except OSError:\n                onerror(_os.open, fullname, _sys.exc_info())\n            else:\n                try:\n                    if _os.path.samestat(orig_st, _os.fstat(dirfd)):\n                        _rmtree_safe_fd(dirfd, fullname, onerror)\n                        try:\n                            _os.rmdir(name, dir_fd=topfd)\n                        except OSError:\n                            onerror(_os.rmdir, fullname, _sys.exc_info())\n                    else:\n                        try:\n                            # This can only happen if someone replaces\n                            # a directory with a symlink after the call to\n                            # stat.S_ISDIR above.\n                            raise OSError(\"Cannot call rmtree on a symbolic \"\n                                          \"link\")\n                        except OSError:\n                            onerror(_os.path.islink, fullname, _sys.exc_info())\n                finally:\n                    _os.close(dirfd)\n        else:\n            try:\n                _os.unlink(name, dir_fd=topfd)\n            except OSError:\n                onerror(_os.unlink, fullname, _sys.exc_info())\n\n  _use_fd_functions = ({_os.open, _os.stat, _os.unlink, _os.rmdir} <=\n                     _os.supports_dir_fd and\n                     _os.listdir in _os.supports_fd and\n                     _os.stat in _os.supports_follow_symlinks)\n\n  def _rmtree(path, ignore_errors=False, onerror=None):\n    \"\"\"Recursively delete a directory tree.\n\n    If ignore_errors is set, errors are ignored; otherwise, if onerror\n    is set, it is called to handle the error with arguments (func,\n    path, exc_info) where func is platform and implementation dependent;\n    path is the argument to that function that caused it to fail; and\n    exc_info is a tuple returned by sys.exc_info().  If ignore_errors\n    is false and onerror is None, an exception is raised.\n\n    \"\"\"\n    if ignore_errors:\n        def onerror(*args):\n            pass\n    elif onerror is None:\n        def onerror(*args):\n            raise\n    if _use_fd_functions:\n        # While the unsafe rmtree works fine on bytes, the fd based does not.\n        if isinstance(path, bytes):\n            path = _os.fsdecode(path)\n        # Note: To guard against symlink races, we use the standard\n        # lstat()/open()/fstat() trick.\n        try:\n            orig_st = _os.lstat(path)\n        except Exception:\n            onerror(_os.lstat, path, _sys.exc_info())\n            return\n        try:\n            fd = _os.open(path, _os.O_RDONLY)\n        except Exception:\n            onerror(_os.lstat, path, _sys.exc_info())\n            return\n        try:\n            if _os.path.samestat(orig_st, _os.fstat(fd)):\n                _rmtree_safe_fd(fd, path, onerror)\n                try:\n                    _os.rmdir(path)\n                except OSError:\n                    onerror(_os.rmdir, path, _sys.exc_info())\n            else:\n                try:\n                    # symlinks to directories are forbidden, see bug #1669\n                    raise OSError(\"Cannot call rmtree on a symbolic link\")\n                except OSError:\n                    onerror(_os.path.islink, path, _sys.exc_info())\n        finally:\n            _os.close(fd)\n    else:\n        return _rmtree_unsafe(path, onerror)\n\nimport errno as _errno\nfrom random import Random as _Random\nimport weakref as _weakref\n\ntry:\n    import _thread\nexcept ImportError:\n    import _dummy_thread as _thread\n_allocate_lock = _thread.allocate_lock\n\n_text_openflags = _os.O_RDWR | _os.O_CREAT | _os.O_EXCL\nif hasattr(_os, 'O_NOFOLLOW'):\n    _text_openflags |= _os.O_NOFOLLOW\n\n_bin_openflags = _text_openflags\nif hasattr(_os, 'O_BINARY'):\n    _bin_openflags |= _os.O_BINARY\n\nif hasattr(_os, 'TMP_MAX'):\n    TMP_MAX = _os.TMP_MAX\nelse:\n    TMP_MAX = 10000\n\n# This variable _was_ unused for legacy reasons, see issue 10354.\n# But as of 3.5 we actually use it at runtime so changing it would\n# have a possibly desirable side effect...  But we do not want to support\n# that as an API.  It is undocumented on purpose.  Do not depend on this.\ntemplate = \"tmp\"\n\n# Internal routines.\n\n_once_lock = _allocate_lock()\n\nif hasattr(_os, \"lstat\"):\n    _stat = _os.lstat\nelif hasattr(_os, \"stat\"):\n    _stat = _os.stat\nelse:\n    # Fallback.  All we need is something that raises OSError if the\n    # file doesn't exist.\n    def _stat(fn):\n        fd = _os.open(fn, _os.O_RDONLY)\n        _os.close(fd)\n\ndef _exists(fn):\n    try:\n        _stat(fn)\n    except OSError:\n        return False\n    else:\n        return True\n\n\ndef _infer_return_type(*args):\n    \"\"\"Look at the type of all args and divine their implied return type.\"\"\"\n    return_type = None\n    for arg in args:\n        if arg is None:\n            continue\n        if isinstance(arg, bytes):\n            if return_type is str:\n                raise TypeError(\"Can't mix bytes and non-bytes in \"\n                                \"path components.\")\n            return_type = bytes\n        else:\n            if return_type is bytes:\n                raise TypeError(\"Can't mix bytes and non-bytes in \"\n                                \"path components.\")\n            return_type = str\n    if return_type is None:\n        return str  # tempfile APIs return a str by default.\n    return return_type\n\n\ndef _sanitize_params(prefix, suffix, dir):\n    \"\"\"Common parameter processing for most APIs in this module.\"\"\"\n    output_type = _infer_return_type(prefix, suffix, dir)\n    if suffix is None:\n        suffix = output_type()\n    if prefix is None:\n        if output_type is str:\n            prefix = template\n        else:\n            prefix = _os.fsencode(template)\n    if dir is None:\n        if output_type is str:\n            dir = gettempdir()\n        else:\n            dir = gettempdirb()\n    return prefix, suffix, dir, output_type\n\n\nclass _RandomNameSequence:\n    \"\"\"An instance of _RandomNameSequence generates an endless\n    sequence of unpredictable strings which can safely be incorporated\n    into file names.  Each string is eight characters long.  Multiple\n    threads can safely use the same instance at the same time.\n\n    _RandomNameSequence is an iterator.\"\"\"\n\n    characters = \"abcdefghijklmnopqrstuvwxyz0123456789_\"\n\n    @property\n    def rng(self):\n        cur_pid = _os.getpid()\n        if cur_pid != getattr(self, '_rng_pid', None):\n            self._rng = _Random()\n            self._rng_pid = cur_pid\n        return self._rng\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        c = self.characters\n        choose = self.rng.choice\n        letters = [choose(c) for dummy in range(8)]\n        return ''.join(letters)\n\ndef _candidate_tempdir_list():\n    \"\"\"Generate a list of candidate temporary directories which\n    _get_default_tempdir will try.\"\"\"\n\n    dirlist = []\n\n    # First, try the environment.\n    for envname in 'TMPDIR', 'TEMP', 'TMP':\n        dirname = _os.getenv(envname)\n        if dirname: dirlist.append(dirname)\n\n    # Failing that, try OS-specific locations.\n    if _os.name == 'nt':\n        dirlist.extend([ _os.path.expanduser(r'~\\AppData\\Local\\Temp'),\n                         _os.path.expandvars(r'%SYSTEMROOT%\\Temp'),\n                         r'c:\\temp', r'c:\\tmp', r'\\temp', r'\\tmp' ])\n    else:\n        dirlist.extend([ '/tmp', '/var/tmp', '/usr/tmp' ])\n\n    # As a last resort, the current directory.\n    try:\n        dirlist.append(_os.getcwd())\n    except (AttributeError, OSError):\n        dirlist.append(_os.curdir)\n\n    return dirlist\n\ndef _get_default_tempdir():\n    \"\"\"Calculate the default directory to use for temporary files.\n    This routine should be called exactly once.\n\n    We determine whether or not a candidate temp dir is usable by\n    trying to create and write to a file in that directory.  If this\n    is successful, the test file is deleted.  To prevent denial of\n    service, the name of the test file must be randomized.\"\"\"\n\n    namer = _RandomNameSequence()\n    dirlist = _candidate_tempdir_list()\n\n    for dir in dirlist:\n        if dir != _os.curdir:\n            dir = _os.path.abspath(dir)\n        # Try only a few names per directory.\n        for seq in range(100):\n            name = next(namer)\n            filename = _os.path.join(dir, name)\n            try:\n                fd = _os.open(filename, _bin_openflags, 0o600)\n                try:\n                    try:\n                        with _io.open(fd, 'wb', closefd=False) as fp:\n                            fp.write(b'blat')\n                    finally:\n                        _os.close(fd)\n                finally:\n                    _os.unlink(filename)\n                return dir\n            except FileExistsError:\n                pass\n            except PermissionError:\n                # This exception is thrown when a directory with the chosen name\n                # already exists on windows.\n                if (_os.name == 'nt' and _os.path.isdir(dir) and\n                    _os.access(dir, _os.W_OK)):\n                    continue\n                break   # no point trying more names in this directory\n            except OSError:\n                break   # no point trying more names in this directory\n    raise FileNotFoundError(_errno.ENOENT,\n                            \"No usable temporary directory found in %s\" %\n                            dirlist)\n\n_name_sequence = None\n\ndef _get_candidate_names():\n    \"\"\"Common setup sequence for all user-callable interfaces.\"\"\"\n\n    global _name_sequence\n    if _name_sequence is None:\n        _once_lock.acquire()\n        try:\n            if _name_sequence is None:\n                _name_sequence = _RandomNameSequence()\n        finally:\n            _once_lock.release()\n    return _name_sequence\n\n\ndef _mkstemp_inner(dir, pre, suf, flags, output_type):\n    \"\"\"Code common to mkstemp, TemporaryFile, and NamedTemporaryFile.\"\"\"\n\n    names = _get_candidate_names()\n    if output_type is bytes:\n        names = map(_os.fsencode, names)\n\n    for seq in range(TMP_MAX):\n        name = next(names)\n        file = _os.path.join(dir, pre + name + suf)\n        try:\n            fd = _os.open(file, flags, 0o600)\n        except FileExistsError:\n            continue    # try again\n        except PermissionError:\n            # This exception is thrown when a directory with the chosen name\n            # already exists on windows.\n            if (_os.name == 'nt' and _os.path.isdir(dir) and\n                _os.access(dir, _os.W_OK)):\n                continue\n            else:\n                raise\n        return (fd, _os.path.abspath(file))\n\n    raise FileExistsError(_errno.EEXIST,\n                          \"No usable temporary file name found\")\n\n\n# User visible interfaces.\n\ndef gettempprefix():\n    \"\"\"The default prefix for temporary directories.\"\"\"\n    return template\n\ndef gettempprefixb():\n    \"\"\"The default prefix for temporary directories as bytes.\"\"\"\n    return _os.fsencode(gettempprefix())\n\ntempdir = None\n\ndef gettempdir():\n    \"\"\"Accessor for tempfile.tempdir.\"\"\"\n    global tempdir\n    if tempdir is None:\n        _once_lock.acquire()\n        try:\n            if tempdir is None:\n                tempdir = _get_default_tempdir()\n        finally:\n            _once_lock.release()\n    return tempdir\n\ndef gettempdirb():\n    \"\"\"A bytes version of tempfile.gettempdir().\"\"\"\n    return _os.fsencode(gettempdir())\n\ndef mkstemp(suffix=None, prefix=None, dir=None, text=False):\n    \"\"\"User-callable function to create and return a unique temporary\n    file.  The return value is a pair (fd, name) where fd is the\n    file descriptor returned by os.open, and name is the filename.\n\n    If 'suffix' is not None, the file name will end with that suffix,\n    otherwise there will be no suffix.\n\n    If 'prefix' is not None, the file name will begin with that prefix,\n    otherwise a default prefix is used.\n\n    If 'dir' is not None, the file will be created in that directory,\n    otherwise a default directory is used.\n\n    If 'text' is specified and true, the file is opened in text\n    mode.  Else (the default) the file is opened in binary mode.  On\n    some operating systems, this makes no difference.\n\n    If any of 'suffix', 'prefix' and 'dir' are not None, they must be the\n    same type.  If they are bytes, the returned name will be bytes; str\n    otherwise.\n\n    The file is readable and writable only by the creating user ID.\n    If the operating system uses permission bits to indicate whether a\n    file is executable, the file is executable by no one. The file\n    descriptor is not inherited by children of this process.\n\n    Caller is responsible for deleting the file when done with it.\n    \"\"\"\n\n    prefix, suffix, dir, output_type = _sanitize_params(prefix, suffix, dir)\n\n    if text:\n        flags = _text_openflags\n    else:\n        flags = _bin_openflags\n\n    return _mkstemp_inner(dir, prefix, suffix, flags, output_type)\n\n\ndef mkdtemp(suffix=None, prefix=None, dir=None):\n    \"\"\"User-callable function to create and return a unique temporary\n    directory.  The return value is the pathname of the directory.\n\n    Arguments are as for mkstemp, except that the 'text' argument is\n    not accepted.\n\n    The directory is readable, writable, and searchable only by the\n    creating user.\n\n    Caller is responsible for deleting the directory when done with it.\n    \"\"\"\n\n    prefix, suffix, dir, output_type = _sanitize_params(prefix, suffix, dir)\n\n    names = _get_candidate_names()\n    if output_type is bytes:\n        names = map(_os.fsencode, names)\n\n    for seq in range(TMP_MAX):\n        name = next(names)\n        file = _os.path.join(dir, prefix + name + suffix)\n        try:\n            _os.mkdir(file, 0o700)\n        except FileExistsError:\n            continue    # try again\n        except PermissionError:\n            # This exception is thrown when a directory with the chosen name\n            # already exists on windows.\n            if (_os.name == 'nt' and _os.path.isdir(dir) and\n                _os.access(dir, _os.W_OK)):\n                continue\n            else:\n                raise\n        return file\n\n    raise FileExistsError(_errno.EEXIST,\n                          \"No usable temporary directory name found\")\n\ndef mktemp(suffix=\"\", prefix=template, dir=None):\n    \"\"\"User-callable function to return a unique temporary file name.  The\n    file is not created.\n\n    Arguments are similar to mkstemp, except that the 'text' argument is\n    not accepted, and suffix=None, prefix=None and bytes file names are not\n    supported.\n\n    THIS FUNCTION IS UNSAFE AND SHOULD NOT BE USED.  The file name may\n    refer to a file that did not exist at some point, but by the time\n    you get around to creating it, someone else may have beaten you to\n    the punch.\n    \"\"\"\n\n##    from warnings import warn as _warn\n##    _warn(\"mktemp is a potential security risk to your program\",\n##          RuntimeWarning, stacklevel=2)\n\n    if dir is None:\n        dir = gettempdir()\n\n    names = _get_candidate_names()\n    for seq in range(TMP_MAX):\n        name = next(names)\n        file = _os.path.join(dir, prefix + name + suffix)\n        if not _exists(file):\n            return file\n\n    raise FileExistsError(_errno.EEXIST,\n                          \"No usable temporary filename found\")\n\n\nclass _TemporaryFileCloser:\n    \"\"\"A separate object allowing proper closing of a temporary file's\n    underlying file object, without adding a __del__ method to the\n    temporary file.\"\"\"\n\n    file = None  # Set here since __del__ checks it\n    close_called = False\n\n    def __init__(self, file, name, delete=True):\n        self.file = file\n        self.name = name\n        self.delete = delete\n\n    # NT provides delete-on-close as a primitive, so we don't need\n    # the wrapper to do anything special.  We still use it so that\n    # file.name is useful (i.e. not \"(fdopen)\") with NamedTemporaryFile.\n    if _os.name != 'nt':\n        # Cache the unlinker so we don't get spurious errors at\n        # shutdown when the module-level \"os\" is None'd out.  Note\n        # that this must be referenced as self.unlink, because the\n        # name TemporaryFileWrapper may also get None'd out before\n        # __del__ is called.\n\n        def close(self, unlink=_os.unlink):\n            if not self.close_called and self.file is not None:\n                self.close_called = True\n                try:\n                    self.file.close()\n                finally:\n                    if self.delete:\n                        unlink(self.name)\n\n        # Need to ensure the file is deleted on __del__\n        def __del__(self):\n            self.close()\n\n    else:\n        def close(self):\n            if not self.close_called:\n                self.close_called = True\n                self.file.close()\n\n\nclass _TemporaryFileWrapper:\n    \"\"\"Temporary file wrapper\n\n    This class provides a wrapper around files opened for\n    temporary use.  In particular, it seeks to automatically\n    remove the file when it is no longer needed.\n    \"\"\"\n\n    def __init__(self, file, name, delete=True):\n        self.file = file\n        self.name = name\n        self.delete = delete\n        self._closer = _TemporaryFileCloser(file, name, delete)\n\n    def __getattr__(self, name):\n        # Attribute lookups are delegated to the underlying file\n        # and cached for non-numeric results\n        # (i.e. methods are cached, closed and friends are not)\n        file = self.__dict__['file']\n        a = getattr(file, name)\n        if hasattr(a, '__call__'):\n            func = a\n            @_functools.wraps(func)\n            def func_wrapper(*args, **kwargs):\n                return func(*args, **kwargs)\n            # Avoid closing the file as long as the wrapper is alive,\n            # see issue #18879.\n            func_wrapper._closer = self._closer\n            a = func_wrapper\n        if not isinstance(a, int):\n            setattr(self, name, a)\n        return a\n\n    # The underlying __enter__ method returns the wrong object\n    # (self.file) so override it to return the wrapper\n    def __enter__(self):\n        self.file.__enter__()\n        return self\n\n    # Need to trap __exit__ as well to ensure the file gets\n    # deleted when used in a with statement\n    def __exit__(self, exc, value, tb):\n        result = self.file.__exit__(exc, value, tb)\n        self.close()\n        return result\n\n    def close(self):\n        \"\"\"\n        Close the temporary file, possibly deleting it.\n        \"\"\"\n        self._closer.close()\n\n    # iter() doesn't use __getattr__ to find the __iter__ method\n    def __iter__(self):\n        # Don't return iter(self.file), but yield from it to avoid closing\n        # file as long as it's being used as iterator (see issue #23700).  We\n        # can't use 'yield from' here because iter(file) returns the file\n        # object itself, which has a close method, and thus the file would get\n        # closed when the generator is finalized, due to PEP380 semantics.\n        for line in self.file:\n            yield line\n\n\ndef NamedTemporaryFile(mode='w+b', buffering=-1, encoding=None,\n                       newline=None, suffix=None, prefix=None,\n                       dir=None, delete=True):\n    \"\"\"Create and return a temporary file.\n    Arguments:\n    'prefix', 'suffix', 'dir' -- as for mkstemp.\n    'mode' -- the mode argument to io.open (default \"w+b\").\n    'buffering' -- the buffer size argument to io.open (default -1).\n    'encoding' -- the encoding argument to io.open (default None)\n    'newline' -- the newline argument to io.open (default None)\n    'delete' -- whether the file is deleted on close (default True).\n    The file is created as mkstemp() would do it.\n\n    Returns an object with a file-like interface; the name of the file\n    is accessible as its 'name' attribute.  The file will be automatically\n    deleted when it is closed unless the 'delete' argument is set to False.\n    \"\"\"\n\n    prefix, suffix, dir, output_type = _sanitize_params(prefix, suffix, dir)\n\n    flags = _bin_openflags\n\n    # Setting O_TEMPORARY in the flags causes the OS to delete\n    # the file when it is closed.  This is only supported by Windows.\n    if _os.name == 'nt' and delete:\n        flags |= _os.O_TEMPORARY\n\n    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)\n    try:\n        file = _io.open(fd, mode, buffering=buffering,\n                        newline=newline, encoding=encoding)\n\n        return _TemporaryFileWrapper(file, name, delete)\n    except BaseException:\n        _os.unlink(name)\n        _os.close(fd)\n        raise\n\nif _os.name != 'posix' or _os.sys.platform == 'cygwin':\n    # On non-POSIX and Cygwin systems, assume that we cannot unlink a file\n    # while it is open.\n    TemporaryFile = NamedTemporaryFile\n\nelse:\n    # Is the O_TMPFILE flag available and does it work?\n    # The flag is set to False if os.open(dir, os.O_TMPFILE) raises an\n    # IsADirectoryError exception\n    _O_TMPFILE_WORKS = hasattr(_os, 'O_TMPFILE')\n\n    def TemporaryFile(mode='w+b', buffering=-1, encoding=None,\n                      newline=None, suffix=None, prefix=None,\n                      dir=None):\n        \"\"\"Create and return a temporary file.\n        Arguments:\n        'prefix', 'suffix', 'dir' -- as for mkstemp.\n        'mode' -- the mode argument to io.open (default \"w+b\").\n        'buffering' -- the buffer size argument to io.open (default -1).\n        'encoding' -- the encoding argument to io.open (default None)\n        'newline' -- the newline argument to io.open (default None)\n        The file is created as mkstemp() would do it.\n\n        Returns an object with a file-like interface.  The file has no\n        name, and will cease to exist when it is closed.\n        \"\"\"\n        global _O_TMPFILE_WORKS\n\n        prefix, suffix, dir, output_type = _sanitize_params(prefix, suffix, dir)\n\n        flags = _bin_openflags\n        if _O_TMPFILE_WORKS:\n            try:\n                flags2 = (flags | _os.O_TMPFILE) & ~_os.O_CREAT\n                fd = _os.open(dir, flags2, 0o600)\n            except IsADirectoryError:\n                # Linux kernel older than 3.11 ignores the O_TMPFILE flag:\n                # O_TMPFILE is read as O_DIRECTORY. Trying to open a directory\n                # with O_RDWR|O_DIRECTORY fails with IsADirectoryError, a\n                # directory cannot be open to write. Set flag to False to not\n                # try again.\n                _O_TMPFILE_WORKS = False\n            except OSError:\n                # The filesystem of the directory does not support O_TMPFILE.\n                # For example, OSError(95, 'Operation not supported').\n                #\n                # On Linux kernel older than 3.11, trying to open a regular\n                # file (or a symbolic link to a regular file) with O_TMPFILE\n                # fails with NotADirectoryError, because O_TMPFILE is read as\n                # O_DIRECTORY.\n                pass\n            else:\n                try:\n                    return _io.open(fd, mode, buffering=buffering,\n                                    newline=newline, encoding=encoding)\n                except:\n                    _os.close(fd)\n                    raise\n            # Fallback to _mkstemp_inner().\n\n        (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)\n        try:\n            _os.unlink(name)\n            return _io.open(fd, mode, buffering=buffering,\n                            newline=newline, encoding=encoding)\n        except:\n            _os.close(fd)\n            raise\n\nclass SpooledTemporaryFile:\n    \"\"\"Temporary file wrapper, specialized to switch from BytesIO\n    or StringIO to a real file when it exceeds a certain size or\n    when a fileno is needed.\n    \"\"\"\n    _rolled = False\n\n    def __init__(self, max_size=0, mode='w+b', buffering=-1,\n                 encoding=None, newline=None,\n                 suffix=None, prefix=None, dir=None):\n        if 'b' in mode:\n            self._file = _io.BytesIO()\n        else:\n            # Setting newline=\"\\n\" avoids newline translation;\n            # this is important because otherwise on Windows we'd\n            # get double newline translation upon rollover().\n            self._file = _io.StringIO(newline=\"\\n\")\n        self._max_size = max_size\n        self._rolled = False\n        self._TemporaryFileArgs = {'mode': mode, 'buffering': buffering,\n                                   'suffix': suffix, 'prefix': prefix,\n                                   'encoding': encoding, 'newline': newline,\n                                   'dir': dir}\n\n    def _check(self, file):\n        if self._rolled: return\n        max_size = self._max_size\n        if max_size and file.tell() > max_size:\n            self.rollover()\n\n    def rollover(self):\n        if self._rolled: return\n        file = self._file\n        newfile = self._file = TemporaryFile(**self._TemporaryFileArgs)\n        del self._TemporaryFileArgs\n\n        newfile.write(file.getvalue())\n        newfile.seek(file.tell(), 0)\n\n        self._rolled = True\n\n    # The method caching trick from NamedTemporaryFile\n    # won't work here, because _file may change from a\n    # BytesIO/StringIO instance to a real file. So we list\n    # all the methods directly.\n\n    # Context management protocol\n    def __enter__(self):\n        if self._file.closed:\n            raise ValueError(\"Cannot enter context with closed file\")\n        return self\n\n    def __exit__(self, exc, value, tb):\n        self._file.close()\n\n    # file protocol\n    def __iter__(self):\n        return self._file.__iter__()\n\n    def close(self):\n        self._file.close()\n\n    @property\n    def closed(self):\n        return self._file.closed\n\n    @property\n    def encoding(self):\n        try:\n            return self._file.encoding\n        except AttributeError:\n            if 'b' in self._TemporaryFileArgs['mode']:\n                raise\n            return self._TemporaryFileArgs['encoding']\n\n    def fileno(self):\n        self.rollover()\n        return self._file.fileno()\n\n    def flush(self):\n        self._file.flush()\n\n    def isatty(self):\n        return self._file.isatty()\n\n    @property\n    def mode(self):\n        try:\n            return self._file.mode\n        except AttributeError:\n            return self._TemporaryFileArgs['mode']\n\n    @property\n    def name(self):\n        try:\n            return self._file.name\n        except AttributeError:\n            return None\n\n    @property\n    def newlines(self):\n        try:\n            return self._file.newlines\n        except AttributeError:\n            if 'b' in self._TemporaryFileArgs['mode']:\n                raise\n            return self._TemporaryFileArgs['newline']\n\n    def read(self, *args):\n        return self._file.read(*args)\n\n    def readline(self, *args):\n        return self._file.readline(*args)\n\n    def readlines(self, *args):\n        return self._file.readlines(*args)\n\n    def seek(self, *args):\n        self._file.seek(*args)\n\n    @property\n    def softspace(self):\n        return self._file.softspace\n\n    def tell(self):\n        return self._file.tell()\n\n    def truncate(self, size=None):\n        if size is None:\n            self._file.truncate()\n        else:\n            if size > self._max_size:\n                self.rollover()\n            self._file.truncate(size)\n\n    def write(self, s):\n        file = self._file\n        rv = file.write(s)\n        self._check(file)\n        return rv\n\n    def writelines(self, iterable):\n        file = self._file\n        rv = file.writelines(iterable)\n        self._check(file)\n        return rv\n\n\nclass TemporaryDirectory(object):\n    \"\"\"Create and return a temporary directory.  This has the same\n    behavior as mkdtemp but can be used as a context manager.  For\n    example:\n\n        with TemporaryDirectory() as tmpdir:\n            ...\n\n    Upon exiting the context, the directory and everything contained\n    in it are removed.\n    \"\"\"\n\n    def __init__(self, suffix=None, prefix=None, dir=None):\n        self.name = mkdtemp(suffix, prefix, dir)\n        self._finalizer = _weakref.finalize(\n            self, self._cleanup, self.name,\n            warn_message=\"Implicitly cleaning up {!r}\".format(self))\n\n    @classmethod\n    def _cleanup(cls, name, warn_message):\n        _rmtree(name)\n        _warnings.warn(warn_message, ResourceWarning)\n\n    def __repr__(self):\n        return \"<{} {!r}>\".format(self.__class__.__name__, self.name)\n\n    def __enter__(self):\n        return self.name\n\n    def __exit__(self, exc, value, tb):\n        self.cleanup()\n\n    def cleanup(self):\n        if self._finalizer.detach():\n            _rmtree(self.name)\n",952],"/usr/lib/python3.6/weakref.py":["\"\"\"Weak reference support for Python.\n\nThis module is an implementation of PEP 205:\n\nhttp://www.python.org/dev/peps/pep-0205/\n\"\"\"\n\n# Naming convention: Variables named \"wr\" are weak reference objects;\n# they are called this instead of \"ref\" to avoid name collisions with\n# the module-global ref() function imported from _weakref.\n\nfrom _weakref import (\n     getweakrefcount,\n     getweakrefs,\n     ref,\n     proxy,\n     CallableProxyType,\n     ProxyType,\n     ReferenceType,\n     _remove_dead_weakref)\n\nfrom _weakrefset import WeakSet, _IterationGuard\n\nimport collections  # Import after _weakref to avoid circular import.\nimport sys\nimport itertools\n\nProxyTypes = (ProxyType, CallableProxyType)\n\n__all__ = [\"ref\", \"proxy\", \"getweakrefcount\", \"getweakrefs\",\n           \"WeakKeyDictionary\", \"ReferenceType\", \"ProxyType\",\n           \"CallableProxyType\", \"ProxyTypes\", \"WeakValueDictionary\",\n           \"WeakSet\", \"WeakMethod\", \"finalize\"]\n\n\nclass WeakMethod(ref):\n    \"\"\"\n    A custom `weakref.ref` subclass which simulates a weak reference to\n    a bound method, working around the lifetime problem of bound methods.\n    \"\"\"\n\n    __slots__ = \"_func_ref\", \"_meth_type\", \"_alive\", \"__weakref__\"\n\n    def __new__(cls, meth, callback=None):\n        try:\n            obj = meth.__self__\n            func = meth.__func__\n        except AttributeError:\n            raise TypeError(\"argument should be a bound method, not {}\"\n                            .format(type(meth))) from None\n        def _cb(arg):\n            # The self-weakref trick is needed to avoid creating a reference\n            # cycle.\n            self = self_wr()\n            if self._alive:\n                self._alive = False\n                if callback is not None:\n                    callback(self)\n        self = ref.__new__(cls, obj, _cb)\n        self._func_ref = ref(func, _cb)\n        self._meth_type = type(meth)\n        self._alive = True\n        self_wr = ref(self)\n        return self\n\n    def __call__(self):\n        obj = super().__call__()\n        func = self._func_ref()\n        if obj is None or func is None:\n            return None\n        return self._meth_type(func, obj)\n\n    def __eq__(self, other):\n        if isinstance(other, WeakMethod):\n            if not self._alive or not other._alive:\n                return self is other\n            return ref.__eq__(self, other) and self._func_ref == other._func_ref\n        return False\n\n    def __ne__(self, other):\n        if isinstance(other, WeakMethod):\n            if not self._alive or not other._alive:\n                return self is not other\n            return ref.__ne__(self, other) or self._func_ref != other._func_ref\n        return True\n\n    __hash__ = ref.__hash__\n\n\nclass WeakValueDictionary(collections.MutableMapping):\n    \"\"\"Mapping class that references values weakly.\n\n    Entries in the dictionary will be discarded when no strong\n    reference to the value exists anymore\n    \"\"\"\n    # We inherit the constructor without worrying about the input\n    # dictionary; since it uses our .update() method, we get the right\n    # checks (if the other dictionary is a WeakValueDictionary,\n    # objects are unwrapped on the way out, and we always wrap on the\n    # way in).\n\n    def __init__(*args, **kw):\n        if not args:\n            raise TypeError(\"descriptor '__init__' of 'WeakValueDictionary' \"\n                            \"object needs an argument\")\n        self, *args = args\n        if len(args) > 1:\n            raise TypeError('expected at most 1 arguments, got %d' % len(args))\n        def remove(wr, selfref=ref(self), _atomic_removal=_remove_dead_weakref):\n            self = selfref()\n            if self is not None:\n                if self._iterating:\n                    self._pending_removals.append(wr.key)\n                else:\n                    # Atomic removal is necessary since this function\n                    # can be called asynchronously by the GC\n                    _atomic_removal(d, wr.key)\n        self._remove = remove\n        # A list of keys to be removed\n        self._pending_removals = []\n        self._iterating = set()\n        self.data = d = {}\n        self.update(*args, **kw)\n\n    def _commit_removals(self):\n        l = self._pending_removals\n        d = self.data\n        # We shouldn't encounter any KeyError, because this method should\n        # always be called *before* mutating the dict.\n        while l:\n            key = l.pop()\n            _remove_dead_weakref(d, key)\n\n    def __getitem__(self, key):\n        if self._pending_removals:\n            self._commit_removals()\n        o = self.data[key]()\n        if o is None:\n            raise KeyError(key)\n        else:\n            return o\n\n    def __delitem__(self, key):\n        if self._pending_removals:\n            self._commit_removals()\n        del self.data[key]\n\n    def __len__(self):\n        if self._pending_removals:\n            self._commit_removals()\n        return len(self.data)\n\n    def __contains__(self, key):\n        if self._pending_removals:\n            self._commit_removals()\n        try:\n            o = self.data[key]()\n        except KeyError:\n            return False\n        return o is not None\n\n    def __repr__(self):\n        return \"<%s at %#x>\" % (self.__class__.__name__, id(self))\n\n    def __setitem__(self, key, value):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data[key] = KeyedRef(value, self._remove, key)\n\n    def copy(self):\n        if self._pending_removals:\n            self._commit_removals()\n        new = WeakValueDictionary()\n        for key, wr in self.data.items():\n            o = wr()\n            if o is not None:\n                new[key] = o\n        return new\n\n    __copy__ = copy\n\n    def __deepcopy__(self, memo):\n        from copy import deepcopy\n        if self._pending_removals:\n            self._commit_removals()\n        new = self.__class__()\n        for key, wr in self.data.items():\n            o = wr()\n            if o is not None:\n                new[deepcopy(key, memo)] = o\n        return new\n\n    def get(self, key, default=None):\n        if self._pending_removals:\n            self._commit_removals()\n        try:\n            wr = self.data[key]\n        except KeyError:\n            return default\n        else:\n            o = wr()\n            if o is None:\n                # This should only happen\n                return default\n            else:\n                return o\n\n    def items(self):\n        if self._pending_removals:\n            self._commit_removals()\n        with _IterationGuard(self):\n            for k, wr in self.data.items():\n                v = wr()\n                if v is not None:\n                    yield k, v\n\n    def keys(self):\n        if self._pending_removals:\n            self._commit_removals()\n        with _IterationGuard(self):\n            for k, wr in self.data.items():\n                if wr() is not None:\n                    yield k\n\n    __iter__ = keys\n\n    def itervaluerefs(self):\n        \"\"\"Return an iterator that yields the weak references to the values.\n\n        The references are not guaranteed to be 'live' at the time\n        they are used, so the result of calling the references needs\n        to be checked before being used.  This can be used to avoid\n        creating references that will cause the garbage collector to\n        keep the values around longer than needed.\n\n        \"\"\"\n        if self._pending_removals:\n            self._commit_removals()\n        with _IterationGuard(self):\n            yield from self.data.values()\n\n    def values(self):\n        if self._pending_removals:\n            self._commit_removals()\n        with _IterationGuard(self):\n            for wr in self.data.values():\n                obj = wr()\n                if obj is not None:\n                    yield obj\n\n    def popitem(self):\n        if self._pending_removals:\n            self._commit_removals()\n        while True:\n            key, wr = self.data.popitem()\n            o = wr()\n            if o is not None:\n                return key, o\n\n    def pop(self, key, *args):\n        if self._pending_removals:\n            self._commit_removals()\n        try:\n            o = self.data.pop(key)()\n        except KeyError:\n            o = None\n        if o is None:\n            if args:\n                return args[0]\n            else:\n                raise KeyError(key)\n        else:\n            return o\n\n    def setdefault(self, key, default=None):\n        try:\n            o = self.data[key]()\n        except KeyError:\n            o = None\n        if o is None:\n            if self._pending_removals:\n                self._commit_removals()\n            self.data[key] = KeyedRef(default, self._remove, key)\n            return default\n        else:\n            return o\n\n    def update(*args, **kwargs):\n        if not args:\n            raise TypeError(\"descriptor 'update' of 'WeakValueDictionary' \"\n                            \"object needs an argument\")\n        self, *args = args\n        if len(args) > 1:\n            raise TypeError('expected at most 1 arguments, got %d' % len(args))\n        dict = args[0] if args else None\n        if self._pending_removals:\n            self._commit_removals()\n        d = self.data\n        if dict is not None:\n            if not hasattr(dict, \"items\"):\n                dict = type({})(dict)\n            for key, o in dict.items():\n                d[key] = KeyedRef(o, self._remove, key)\n        if len(kwargs):\n            self.update(kwargs)\n\n    def valuerefs(self):\n        \"\"\"Return a list of weak references to the values.\n\n        The references are not guaranteed to be 'live' at the time\n        they are used, so the result of calling the references needs\n        to be checked before being used.  This can be used to avoid\n        creating references that will cause the garbage collector to\n        keep the values around longer than needed.\n\n        \"\"\"\n        if self._pending_removals:\n            self._commit_removals()\n        return list(self.data.values())\n\n\nclass KeyedRef(ref):\n    \"\"\"Specialized reference that includes a key corresponding to the value.\n\n    This is used in the WeakValueDictionary to avoid having to create\n    a function object for each key stored in the mapping.  A shared\n    callback object can use the 'key' attribute of a KeyedRef instead\n    of getting a reference to the key from an enclosing scope.\n\n    \"\"\"\n\n    __slots__ = \"key\",\n\n    def __new__(type, ob, callback, key):\n        self = ref.__new__(type, ob, callback)\n        self.key = key\n        return self\n\n    def __init__(self, ob, callback, key):\n        super().__init__(ob, callback)\n\n\nclass WeakKeyDictionary(collections.MutableMapping):\n    \"\"\" Mapping class that references keys weakly.\n\n    Entries in the dictionary will be discarded when there is no\n    longer a strong reference to the key. This can be used to\n    associate additional data with an object owned by other parts of\n    an application without adding attributes to those objects. This\n    can be especially useful with objects that override attribute\n    accesses.\n    \"\"\"\n\n    def __init__(self, dict=None):\n        self.data = {}\n        def remove(k, selfref=ref(self)):\n            self = selfref()\n            if self is not None:\n                if self._iterating:\n                    self._pending_removals.append(k)\n                else:\n                    del self.data[k]\n        self._remove = remove\n        # A list of dead weakrefs (keys to be removed)\n        self._pending_removals = []\n        self._iterating = set()\n        self._dirty_len = False\n        if dict is not None:\n            self.update(dict)\n\n    def _commit_removals(self):\n        # NOTE: We don't need to call this method before mutating the dict,\n        # because a dead weakref never compares equal to a live weakref,\n        # even if they happened to refer to equal objects.\n        # However, it means keys may already have been removed.\n        l = self._pending_removals\n        d = self.data\n        while l:\n            try:\n                del d[l.pop()]\n            except KeyError:\n                pass\n\n    def _scrub_removals(self):\n        d = self.data\n        self._pending_removals = [k for k in self._pending_removals if k in d]\n        self._dirty_len = False\n\n    def __delitem__(self, key):\n        self._dirty_len = True\n        del self.data[ref(key)]\n\n    def __getitem__(self, key):\n        return self.data[ref(key)]\n\n    def __len__(self):\n        if self._dirty_len and self._pending_removals:\n            # self._pending_removals may still contain keys which were\n            # explicitly removed, we have to scrub them (see issue #21173).\n            self._scrub_removals()\n        return len(self.data) - len(self._pending_removals)\n\n    def __repr__(self):\n        return \"<%s at %#x>\" % (self.__class__.__name__, id(self))\n\n    def __setitem__(self, key, value):\n        self.data[ref(key, self._remove)] = value\n\n    def copy(self):\n        new = WeakKeyDictionary()\n        for key, value in self.data.items():\n            o = key()\n            if o is not None:\n                new[o] = value\n        return new\n\n    __copy__ = copy\n\n    def __deepcopy__(self, memo):\n        from copy import deepcopy\n        new = self.__class__()\n        for key, value in self.data.items():\n            o = key()\n            if o is not None:\n                new[o] = deepcopy(value, memo)\n        return new\n\n    def get(self, key, default=None):\n        return self.data.get(ref(key),default)\n\n    def __contains__(self, key):\n        try:\n            wr = ref(key)\n        except TypeError:\n            return False\n        return wr in self.data\n\n    def items(self):\n        with _IterationGuard(self):\n            for wr, value in self.data.items():\n                key = wr()\n                if key is not None:\n                    yield key, value\n\n    def keys(self):\n        with _IterationGuard(self):\n            for wr in self.data:\n                obj = wr()\n                if obj is not None:\n                    yield obj\n\n    __iter__ = keys\n\n    def values(self):\n        with _IterationGuard(self):\n            for wr, value in self.data.items():\n                if wr() is not None:\n                    yield value\n\n    def keyrefs(self):\n        \"\"\"Return a list of weak references to the keys.\n\n        The references are not guaranteed to be 'live' at the time\n        they are used, so the result of calling the references needs\n        to be checked before being used.  This can be used to avoid\n        creating references that will cause the garbage collector to\n        keep the keys around longer than needed.\n\n        \"\"\"\n        return list(self.data)\n\n    def popitem(self):\n        self._dirty_len = True\n        while True:\n            key, value = self.data.popitem()\n            o = key()\n            if o is not None:\n                return o, value\n\n    def pop(self, key, *args):\n        self._dirty_len = True\n        return self.data.pop(ref(key), *args)\n\n    def setdefault(self, key, default=None):\n        return self.data.setdefault(ref(key, self._remove),default)\n\n    def update(self, dict=None, **kwargs):\n        d = self.data\n        if dict is not None:\n            if not hasattr(dict, \"items\"):\n                dict = type({})(dict)\n            for key, value in dict.items():\n                d[ref(key, self._remove)] = value\n        if len(kwargs):\n            self.update(kwargs)\n\n\nclass finalize:\n    \"\"\"Class for finalization of weakrefable objects\n\n    finalize(obj, func, *args, **kwargs) returns a callable finalizer\n    object which will be called when obj is garbage collected. The\n    first time the finalizer is called it evaluates func(*arg, **kwargs)\n    and returns the result. After this the finalizer is dead, and\n    calling it just returns None.\n\n    When the program exits any remaining finalizers for which the\n    atexit attribute is true will be run in reverse order of creation.\n    By default atexit is true.\n    \"\"\"\n\n    # Finalizer objects don't have any state of their own.  They are\n    # just used as keys to lookup _Info objects in the registry.  This\n    # ensures that they cannot be part of a ref-cycle.\n\n    __slots__ = ()\n    _registry = {}\n    _shutdown = False\n    _index_iter = itertools.count()\n    _dirty = False\n    _registered_with_atexit = False\n\n    class _Info:\n        __slots__ = (\"weakref\", \"func\", \"args\", \"kwargs\", \"atexit\", \"index\")\n\n    def __init__(self, obj, func, *args, **kwargs):\n        if not self._registered_with_atexit:\n            # We may register the exit function more than once because\n            # of a thread race, but that is harmless\n            import atexit\n            atexit.register(self._exitfunc)\n            finalize._registered_with_atexit = True\n        info = self._Info()\n        info.weakref = ref(obj, self)\n        info.func = func\n        info.args = args\n        info.kwargs = kwargs or None\n        info.atexit = True\n        info.index = next(self._index_iter)\n        self._registry[self] = info\n        finalize._dirty = True\n\n    def __call__(self, _=None):\n        \"\"\"If alive then mark as dead and return func(*args, **kwargs);\n        otherwise return None\"\"\"\n        info = self._registry.pop(self, None)\n        if info and not self._shutdown:\n            return info.func(*info.args, **(info.kwargs or {}))\n\n    def detach(self):\n        \"\"\"If alive then mark as dead and return (obj, func, args, kwargs);\n        otherwise return None\"\"\"\n        info = self._registry.get(self)\n        obj = info and info.weakref()\n        if obj is not None and self._registry.pop(self, None):\n            return (obj, info.func, info.args, info.kwargs or {})\n\n    def peek(self):\n        \"\"\"If alive then return (obj, func, args, kwargs);\n        otherwise return None\"\"\"\n        info = self._registry.get(self)\n        obj = info and info.weakref()\n        if obj is not None:\n            return (obj, info.func, info.args, info.kwargs or {})\n\n    @property\n    def alive(self):\n        \"\"\"Whether finalizer is alive\"\"\"\n        return self in self._registry\n\n    @property\n    def atexit(self):\n        \"\"\"Whether finalizer should be called at exit\"\"\"\n        info = self._registry.get(self)\n        return bool(info) and info.atexit\n\n    @atexit.setter\n    def atexit(self, value):\n        info = self._registry.get(self)\n        if info:\n            info.atexit = bool(value)\n\n    def __repr__(self):\n        info = self._registry.get(self)\n        obj = info and info.weakref()\n        if obj is None:\n            return '<%s object at %#x; dead>' % (type(self).__name__, id(self))\n        else:\n            return '<%s object at %#x; for %r at %#x>' % \\\n                (type(self).__name__, id(self), type(obj).__name__, id(obj))\n\n    @classmethod\n    def _select_for_exit(cls):\n        # Return live finalizers marked for exit, oldest first\n        L = [(f,i) for (f,i) in cls._registry.items() if i.atexit]\n        L.sort(key=lambda item:item[1].index)\n        return [f for (f,i) in L]\n\n    @classmethod\n    def _exitfunc(cls):\n        # At shutdown invoke finalizers for which atexit is true.\n        # This is called once all other non-daemonic threads have been\n        # joined.\n        reenable_gc = False\n        try:\n            if cls._registry:\n                import gc\n                if gc.isenabled():\n                    reenable_gc = True\n                    gc.disable()\n                pending = None\n                while True:\n                    if pending is None or finalize._dirty:\n                        pending = cls._select_for_exit()\n                        finalize._dirty = False\n                    if not pending:\n                        break\n                    f = pending.pop()\n                    try:\n                        # gc is disabled, so (assuming no daemonic\n                        # threads) the following is the only line in\n                        # this function which might trigger creation\n                        # of a new finalizer\n                        f()\n                    except Exception:\n                        sys.excepthook(*sys.exc_info())\n                    assert f not in cls._registry\n        finally:\n            # prevent any more finalizers from executing during shutdown\n            finalize._shutdown = True\n            if reenable_gc:\n                gc.enable()\n",632],"/usr/lib/python3.6/queue.py":["'''A multi-producer, multi-consumer queue.'''\n\ntry:\n    import threading\nexcept ImportError:\n    import dummy_threading as threading\nfrom collections import deque\nfrom heapq import heappush, heappop\nfrom time import monotonic as time\n\n__all__ = ['Empty', 'Full', 'Queue', 'PriorityQueue', 'LifoQueue']\n\nclass Empty(Exception):\n    'Exception raised by Queue.get(block=0)/get_nowait().'\n    pass\n\nclass Full(Exception):\n    'Exception raised by Queue.put(block=0)/put_nowait().'\n    pass\n\nclass Queue:\n    '''Create a queue object with a given maximum size.\n\n    If maxsize is <= 0, the queue size is infinite.\n    '''\n\n    def __init__(self, maxsize=0):\n        self.maxsize = maxsize\n        self._init(maxsize)\n\n        # mutex must be held whenever the queue is mutating.  All methods\n        # that acquire mutex must release it before returning.  mutex\n        # is shared between the three conditions, so acquiring and\n        # releasing the conditions also acquires and releases mutex.\n        self.mutex = threading.Lock()\n\n        # Notify not_empty whenever an item is added to the queue; a\n        # thread waiting to get is notified then.\n        self.not_empty = threading.Condition(self.mutex)\n\n        # Notify not_full whenever an item is removed from the queue;\n        # a thread waiting to put is notified then.\n        self.not_full = threading.Condition(self.mutex)\n\n        # Notify all_tasks_done whenever the number of unfinished tasks\n        # drops to zero; thread waiting to join() is notified to resume\n        self.all_tasks_done = threading.Condition(self.mutex)\n        self.unfinished_tasks = 0\n\n    def task_done(self):\n        '''Indicate that a formerly enqueued task is complete.\n\n        Used by Queue consumer threads.  For each get() used to fetch a task,\n        a subsequent call to task_done() tells the queue that the processing\n        on the task is complete.\n\n        If a join() is currently blocking, it will resume when all items\n        have been processed (meaning that a task_done() call was received\n        for every item that had been put() into the queue).\n\n        Raises a ValueError if called more times than there were items\n        placed in the queue.\n        '''\n        with self.all_tasks_done:\n            unfinished = self.unfinished_tasks - 1\n            if unfinished <= 0:\n                if unfinished < 0:\n                    raise ValueError('task_done() called too many times')\n                self.all_tasks_done.notify_all()\n            self.unfinished_tasks = unfinished\n\n    def join(self):\n        '''Blocks until all items in the Queue have been gotten and processed.\n\n        The count of unfinished tasks goes up whenever an item is added to the\n        queue. The count goes down whenever a consumer thread calls task_done()\n        to indicate the item was retrieved and all work on it is complete.\n\n        When the count of unfinished tasks drops to zero, join() unblocks.\n        '''\n        with self.all_tasks_done:\n            while self.unfinished_tasks:\n                self.all_tasks_done.wait()\n\n    def qsize(self):\n        '''Return the approximate size of the queue (not reliable!).'''\n        with self.mutex:\n            return self._qsize()\n\n    def empty(self):\n        '''Return True if the queue is empty, False otherwise (not reliable!).\n\n        This method is likely to be removed at some point.  Use qsize() == 0\n        as a direct substitute, but be aware that either approach risks a race\n        condition where a queue can grow before the result of empty() or\n        qsize() can be used.\n\n        To create code that needs to wait for all queued tasks to be\n        completed, the preferred technique is to use the join() method.\n        '''\n        with self.mutex:\n            return not self._qsize()\n\n    def full(self):\n        '''Return True if the queue is full, False otherwise (not reliable!).\n\n        This method is likely to be removed at some point.  Use qsize() >= n\n        as a direct substitute, but be aware that either approach risks a race\n        condition where a queue can shrink before the result of full() or\n        qsize() can be used.\n        '''\n        with self.mutex:\n            return 0 < self.maxsize <= self._qsize()\n\n    def put(self, item, block=True, timeout=None):\n        '''Put an item into the queue.\n\n        If optional args 'block' is true and 'timeout' is None (the default),\n        block if necessary until a free slot is available. If 'timeout' is\n        a non-negative number, it blocks at most 'timeout' seconds and raises\n        the Full exception if no free slot was available within that time.\n        Otherwise ('block' is false), put an item on the queue if a free slot\n        is immediately available, else raise the Full exception ('timeout'\n        is ignored in that case).\n        '''\n        with self.not_full:\n            if self.maxsize > 0:\n                if not block:\n                    if self._qsize() >= self.maxsize:\n                        raise Full\n                elif timeout is None:\n                    while self._qsize() >= self.maxsize:\n                        self.not_full.wait()\n                elif timeout < 0:\n                    raise ValueError(\"'timeout' must be a non-negative number\")\n                else:\n                    endtime = time() + timeout\n                    while self._qsize() >= self.maxsize:\n                        remaining = endtime - time()\n                        if remaining <= 0.0:\n                            raise Full\n                        self.not_full.wait(remaining)\n            self._put(item)\n            self.unfinished_tasks += 1\n            self.not_empty.notify()\n\n    def get(self, block=True, timeout=None):\n        '''Remove and return an item from the queue.\n\n        If optional args 'block' is true and 'timeout' is None (the default),\n        block if necessary until an item is available. If 'timeout' is\n        a non-negative number, it blocks at most 'timeout' seconds and raises\n        the Empty exception if no item was available within that time.\n        Otherwise ('block' is false), return an item if one is immediately\n        available, else raise the Empty exception ('timeout' is ignored\n        in that case).\n        '''\n        with self.not_empty:\n            if not block:\n                if not self._qsize():\n                    raise Empty\n            elif timeout is None:\n                while not self._qsize():\n                    self.not_empty.wait()\n            elif timeout < 0:\n                raise ValueError(\"'timeout' must be a non-negative number\")\n            else:\n                endtime = time() + timeout\n                while not self._qsize():\n                    remaining = endtime - time()\n                    if remaining <= 0.0:\n                        raise Empty\n                    self.not_empty.wait(remaining)\n            item = self._get()\n            self.not_full.notify()\n            return item\n\n    def put_nowait(self, item):\n        '''Put an item into the queue without blocking.\n\n        Only enqueue the item if a free slot is immediately available.\n        Otherwise raise the Full exception.\n        '''\n        return self.put(item, block=False)\n\n    def get_nowait(self):\n        '''Remove and return an item from the queue without blocking.\n\n        Only get an item if one is immediately available. Otherwise\n        raise the Empty exception.\n        '''\n        return self.get(block=False)\n\n    # Override these methods to implement other queue organizations\n    # (e.g. stack or priority queue).\n    # These will only be called with appropriate locks held\n\n    # Initialize the queue representation\n    def _init(self, maxsize):\n        self.queue = deque()\n\n    def _qsize(self):\n        return len(self.queue)\n\n    # Put a new item in the queue\n    def _put(self, item):\n        self.queue.append(item)\n\n    # Get an item from the queue\n    def _get(self):\n        return self.queue.popleft()\n\n\nclass PriorityQueue(Queue):\n    '''Variant of Queue that retrieves open entries in priority order (lowest first).\n\n    Entries are typically tuples of the form:  (priority number, data).\n    '''\n\n    def _init(self, maxsize):\n        self.queue = []\n\n    def _qsize(self):\n        return len(self.queue)\n\n    def _put(self, item):\n        heappush(self.queue, item)\n\n    def _get(self):\n        return heappop(self.queue)\n\n\nclass LifoQueue(Queue):\n    '''Variant of Queue that retrieves most recently added entries first.'''\n\n    def _init(self, maxsize):\n        self.queue = []\n\n    def _qsize(self):\n        return len(self.queue)\n\n    def _put(self, item):\n        self.queue.append(item)\n\n    def _get(self):\n        return self.queue.pop()\n",246],"/usr/lib/python3.6/threading.py":["\"\"\"Thread module emulating a subset of Java's threading model.\"\"\"\n\nimport sys as _sys\nimport _thread\n\nfrom time import monotonic as _time\nfrom traceback import format_exc as _format_exc\nfrom _weakrefset import WeakSet\nfrom itertools import islice as _islice, count as _count\ntry:\n    from _collections import deque as _deque\nexcept ImportError:\n    from collections import deque as _deque\n\n# Note regarding PEP 8 compliant names\n#  This threading model was originally inspired by Java, and inherited\n# the convention of camelCase function and method names from that\n# language. Those original names are not in any imminent danger of\n# being deprecated (even for Py3k),so this module provides them as an\n# alias for the PEP 8 compliant names\n# Note that using the new PEP 8 compliant names facilitates substitution\n# with the multiprocessing module, which doesn't provide the old\n# Java inspired names.\n\n__all__ = ['get_ident', 'active_count', 'Condition', 'current_thread',\n           'enumerate', 'main_thread', 'TIMEOUT_MAX',\n           'Event', 'Lock', 'RLock', 'Semaphore', 'BoundedSemaphore', 'Thread',\n           'Barrier', 'BrokenBarrierError', 'Timer', 'ThreadError',\n           'setprofile', 'settrace', 'local', 'stack_size']\n\n# Rename some stuff so \"from threading import *\" is safe\n_start_new_thread = _thread.start_new_thread\n_allocate_lock = _thread.allocate_lock\n_set_sentinel = _thread._set_sentinel\nget_ident = _thread.get_ident\nThreadError = _thread.error\ntry:\n    _CRLock = _thread.RLock\nexcept AttributeError:\n    _CRLock = None\nTIMEOUT_MAX = _thread.TIMEOUT_MAX\ndel _thread\n\n\n# Support for profile and trace hooks\n\n_profile_hook = None\n_trace_hook = None\n\ndef setprofile(func):\n    \"\"\"Set a profile function for all threads started from the threading module.\n\n    The func will be passed to sys.setprofile() for each thread, before its\n    run() method is called.\n\n    \"\"\"\n    global _profile_hook\n    _profile_hook = func\n\ndef settrace(func):\n    \"\"\"Set a trace function for all threads started from the threading module.\n\n    The func will be passed to sys.settrace() for each thread, before its run()\n    method is called.\n\n    \"\"\"\n    global _trace_hook\n    _trace_hook = func\n\n# Synchronization classes\n\nLock = _allocate_lock\n\ndef RLock(*args, **kwargs):\n    \"\"\"Factory function that returns a new reentrant lock.\n\n    A reentrant lock must be released by the thread that acquired it. Once a\n    thread has acquired a reentrant lock, the same thread may acquire it again\n    without blocking; the thread must release it once for each time it has\n    acquired it.\n\n    \"\"\"\n    if _CRLock is None:\n        return _PyRLock(*args, **kwargs)\n    return _CRLock(*args, **kwargs)\n\nclass _RLock:\n    \"\"\"This class implements reentrant lock objects.\n\n    A reentrant lock must be released by the thread that acquired it. Once a\n    thread has acquired a reentrant lock, the same thread may acquire it\n    again without blocking; the thread must release it once for each time it\n    has acquired it.\n\n    \"\"\"\n\n    def __init__(self):\n        self._block = _allocate_lock()\n        self._owner = None\n        self._count = 0\n\n    def __repr__(self):\n        owner = self._owner\n        try:\n            owner = _active[owner].name\n        except KeyError:\n            pass\n        return \"<%s %s.%s object owner=%r count=%d at %s>\" % (\n            \"locked\" if self._block.locked() else \"unlocked\",\n            self.__class__.__module__,\n            self.__class__.__qualname__,\n            owner,\n            self._count,\n            hex(id(self))\n        )\n\n    def acquire(self, blocking=True, timeout=-1):\n        \"\"\"Acquire a lock, blocking or non-blocking.\n\n        When invoked without arguments: if this thread already owns the lock,\n        increment the recursion level by one, and return immediately. Otherwise,\n        if another thread owns the lock, block until the lock is unlocked. Once\n        the lock is unlocked (not owned by any thread), then grab ownership, set\n        the recursion level to one, and return. If more than one thread is\n        blocked waiting until the lock is unlocked, only one at a time will be\n        able to grab ownership of the lock. There is no return value in this\n        case.\n\n        When invoked with the blocking argument set to true, do the same thing\n        as when called without arguments, and return true.\n\n        When invoked with the blocking argument set to false, do not block. If a\n        call without an argument would block, return false immediately;\n        otherwise, do the same thing as when called without arguments, and\n        return true.\n\n        When invoked with the floating-point timeout argument set to a positive\n        value, block for at most the number of seconds specified by timeout\n        and as long as the lock cannot be acquired.  Return true if the lock has\n        been acquired, false if the timeout has elapsed.\n\n        \"\"\"\n        me = get_ident()\n        if self._owner == me:\n            self._count += 1\n            return 1\n        rc = self._block.acquire(blocking, timeout)\n        if rc:\n            self._owner = me\n            self._count = 1\n        return rc\n\n    __enter__ = acquire\n\n    def release(self):\n        \"\"\"Release a lock, decrementing the recursion level.\n\n        If after the decrement it is zero, reset the lock to unlocked (not owned\n        by any thread), and if any other threads are blocked waiting for the\n        lock to become unlocked, allow exactly one of them to proceed. If after\n        the decrement the recursion level is still nonzero, the lock remains\n        locked and owned by the calling thread.\n\n        Only call this method when the calling thread owns the lock. A\n        RuntimeError is raised if this method is called when the lock is\n        unlocked.\n\n        There is no return value.\n\n        \"\"\"\n        if self._owner != get_ident():\n            raise RuntimeError(\"cannot release un-acquired lock\")\n        self._count = count = self._count - 1\n        if not count:\n            self._owner = None\n            self._block.release()\n\n    def __exit__(self, t, v, tb):\n        self.release()\n\n    # Internal methods used by condition variables\n\n    def _acquire_restore(self, state):\n        self._block.acquire()\n        self._count, self._owner = state\n\n    def _release_save(self):\n        if self._count == 0:\n            raise RuntimeError(\"cannot release un-acquired lock\")\n        count = self._count\n        self._count = 0\n        owner = self._owner\n        self._owner = None\n        self._block.release()\n        return (count, owner)\n\n    def _is_owned(self):\n        return self._owner == get_ident()\n\n_PyRLock = _RLock\n\n\nclass Condition:\n    \"\"\"Class that implements a condition variable.\n\n    A condition variable allows one or more threads to wait until they are\n    notified by another thread.\n\n    If the lock argument is given and not None, it must be a Lock or RLock\n    object, and it is used as the underlying lock. Otherwise, a new RLock object\n    is created and used as the underlying lock.\n\n    \"\"\"\n\n    def __init__(self, lock=None):\n        if lock is None:\n            lock = RLock()\n        self._lock = lock\n        # Export the lock's acquire() and release() methods\n        self.acquire = lock.acquire\n        self.release = lock.release\n        # If the lock defines _release_save() and/or _acquire_restore(),\n        # these override the default implementations (which just call\n        # release() and acquire() on the lock).  Ditto for _is_owned().\n        try:\n            self._release_save = lock._release_save\n        except AttributeError:\n            pass\n        try:\n            self._acquire_restore = lock._acquire_restore\n        except AttributeError:\n            pass\n        try:\n            self._is_owned = lock._is_owned\n        except AttributeError:\n            pass\n        self._waiters = _deque()\n\n    def __enter__(self):\n        return self._lock.__enter__()\n\n    def __exit__(self, *args):\n        return self._lock.__exit__(*args)\n\n    def __repr__(self):\n        return \"<Condition(%s, %d)>\" % (self._lock, len(self._waiters))\n\n    def _release_save(self):\n        self._lock.release()           # No state to save\n\n    def _acquire_restore(self, x):\n        self._lock.acquire()           # Ignore saved state\n\n    def _is_owned(self):\n        # Return True if lock is owned by current_thread.\n        # This method is called only if _lock doesn't have _is_owned().\n        if self._lock.acquire(0):\n            self._lock.release()\n            return False\n        else:\n            return True\n\n    def wait(self, timeout=None):\n        \"\"\"Wait until notified or until a timeout occurs.\n\n        If the calling thread has not acquired the lock when this method is\n        called, a RuntimeError is raised.\n\n        This method releases the underlying lock, and then blocks until it is\n        awakened by a notify() or notify_all() call for the same condition\n        variable in another thread, or until the optional timeout occurs. Once\n        awakened or timed out, it re-acquires the lock and returns.\n\n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n\n        When the underlying lock is an RLock, it is not released using its\n        release() method, since this may not actually unlock the lock when it\n        was acquired multiple times recursively. Instead, an internal interface\n        of the RLock class is used, which really unlocks it even when it has\n        been recursively acquired several times. Another internal interface is\n        then used to restore the recursion level when the lock is reacquired.\n\n        \"\"\"\n        if not self._is_owned():\n            raise RuntimeError(\"cannot wait on un-acquired lock\")\n        waiter = _allocate_lock()\n        waiter.acquire()\n        self._waiters.append(waiter)\n        saved_state = self._release_save()\n        gotit = False\n        try:    # restore state no matter what (e.g., KeyboardInterrupt)\n            if timeout is None:\n                waiter.acquire()\n                gotit = True\n            else:\n                if timeout > 0:\n                    gotit = waiter.acquire(True, timeout)\n                else:\n                    gotit = waiter.acquire(False)\n            return gotit\n        finally:\n            self._acquire_restore(saved_state)\n            if not gotit:\n                try:\n                    self._waiters.remove(waiter)\n                except ValueError:\n                    pass\n\n    def wait_for(self, predicate, timeout=None):\n        \"\"\"Wait until a condition evaluates to True.\n\n        predicate should be a callable which result will be interpreted as a\n        boolean value.  A timeout may be provided giving the maximum time to\n        wait.\n\n        \"\"\"\n        endtime = None\n        waittime = timeout\n        result = predicate()\n        while not result:\n            if waittime is not None:\n                if endtime is None:\n                    endtime = _time() + waittime\n                else:\n                    waittime = endtime - _time()\n                    if waittime <= 0:\n                        break\n            self.wait(waittime)\n            result = predicate()\n        return result\n\n    def notify(self, n=1):\n        \"\"\"Wake up one or more threads waiting on this condition, if any.\n\n        If the calling thread has not acquired the lock when this method is\n        called, a RuntimeError is raised.\n\n        This method wakes up at most n of the threads waiting for the condition\n        variable; it is a no-op if no threads are waiting.\n\n        \"\"\"\n        if not self._is_owned():\n            raise RuntimeError(\"cannot notify on un-acquired lock\")\n        all_waiters = self._waiters\n        waiters_to_notify = _deque(_islice(all_waiters, n))\n        if not waiters_to_notify:\n            return\n        for waiter in waiters_to_notify:\n            waiter.release()\n            try:\n                all_waiters.remove(waiter)\n            except ValueError:\n                pass\n\n    def notify_all(self):\n        \"\"\"Wake up all threads waiting on this condition.\n\n        If the calling thread has not acquired the lock when this method\n        is called, a RuntimeError is raised.\n\n        \"\"\"\n        self.notify(len(self._waiters))\n\n    notifyAll = notify_all\n\n\nclass Semaphore:\n    \"\"\"This class implements semaphore objects.\n\n    Semaphores manage a counter representing the number of release() calls minus\n    the number of acquire() calls, plus an initial value. The acquire() method\n    blocks if necessary until it can return without making the counter\n    negative. If not given, value defaults to 1.\n\n    \"\"\"\n\n    # After Tim Peters' semaphore class, but not quite the same (no maximum)\n\n    def __init__(self, value=1):\n        if value < 0:\n            raise ValueError(\"semaphore initial value must be >= 0\")\n        self._cond = Condition(Lock())\n        self._value = value\n\n    def acquire(self, blocking=True, timeout=None):\n        \"\"\"Acquire a semaphore, decrementing the internal counter by one.\n\n        When invoked without arguments: if the internal counter is larger than\n        zero on entry, decrement it by one and return immediately. If it is zero\n        on entry, block, waiting until some other thread has called release() to\n        make it larger than zero. This is done with proper interlocking so that\n        if multiple acquire() calls are blocked, release() will wake exactly one\n        of them up. The implementation may pick one at random, so the order in\n        which blocked threads are awakened should not be relied on. There is no\n        return value in this case.\n\n        When invoked with blocking set to true, do the same thing as when called\n        without arguments, and return true.\n\n        When invoked with blocking set to false, do not block. If a call without\n        an argument would block, return false immediately; otherwise, do the\n        same thing as when called without arguments, and return true.\n\n        When invoked with a timeout other than None, it will block for at\n        most timeout seconds.  If acquire does not complete successfully in\n        that interval, return false.  Return true otherwise.\n\n        \"\"\"\n        if not blocking and timeout is not None:\n            raise ValueError(\"can't specify timeout for non-blocking acquire\")\n        rc = False\n        endtime = None\n        with self._cond:\n            while self._value == 0:\n                if not blocking:\n                    break\n                if timeout is not None:\n                    if endtime is None:\n                        endtime = _time() + timeout\n                    else:\n                        timeout = endtime - _time()\n                        if timeout <= 0:\n                            break\n                self._cond.wait(timeout)\n            else:\n                self._value -= 1\n                rc = True\n        return rc\n\n    __enter__ = acquire\n\n    def release(self):\n        \"\"\"Release a semaphore, incrementing the internal counter by one.\n\n        When the counter is zero on entry and another thread is waiting for it\n        to become larger than zero again, wake up that thread.\n\n        \"\"\"\n        with self._cond:\n            self._value += 1\n            self._cond.notify()\n\n    def __exit__(self, t, v, tb):\n        self.release()\n\n\nclass BoundedSemaphore(Semaphore):\n    \"\"\"Implements a bounded semaphore.\n\n    A bounded semaphore checks to make sure its current value doesn't exceed its\n    initial value. If it does, ValueError is raised. In most situations\n    semaphores are used to guard resources with limited capacity.\n\n    If the semaphore is released too many times it's a sign of a bug. If not\n    given, value defaults to 1.\n\n    Like regular semaphores, bounded semaphores manage a counter representing\n    the number of release() calls minus the number of acquire() calls, plus an\n    initial value. The acquire() method blocks if necessary until it can return\n    without making the counter negative. If not given, value defaults to 1.\n\n    \"\"\"\n\n    def __init__(self, value=1):\n        Semaphore.__init__(self, value)\n        self._initial_value = value\n\n    def release(self):\n        \"\"\"Release a semaphore, incrementing the internal counter by one.\n\n        When the counter is zero on entry and another thread is waiting for it\n        to become larger than zero again, wake up that thread.\n\n        If the number of releases exceeds the number of acquires,\n        raise a ValueError.\n\n        \"\"\"\n        with self._cond:\n            if self._value >= self._initial_value:\n                raise ValueError(\"Semaphore released too many times\")\n            self._value += 1\n            self._cond.notify()\n\n\nclass Event:\n    \"\"\"Class implementing event objects.\n\n    Events manage a flag that can be set to true with the set() method and reset\n    to false with the clear() method. The wait() method blocks until the flag is\n    true.  The flag is initially false.\n\n    \"\"\"\n\n    # After Tim Peters' event class (without is_posted())\n\n    def __init__(self):\n        self._cond = Condition(Lock())\n        self._flag = False\n\n    def _reset_internal_locks(self):\n        # private!  called by Thread._reset_internal_locks by _after_fork()\n        self._cond.__init__(Lock())\n\n    def is_set(self):\n        \"\"\"Return true if and only if the internal flag is true.\"\"\"\n        return self._flag\n\n    isSet = is_set\n\n    def set(self):\n        \"\"\"Set the internal flag to true.\n\n        All threads waiting for it to become true are awakened. Threads\n        that call wait() once the flag is true will not block at all.\n\n        \"\"\"\n        with self._cond:\n            self._flag = True\n            self._cond.notify_all()\n\n    def clear(self):\n        \"\"\"Reset the internal flag to false.\n\n        Subsequently, threads calling wait() will block until set() is called to\n        set the internal flag to true again.\n\n        \"\"\"\n        with self._cond:\n            self._flag = False\n\n    def wait(self, timeout=None):\n        \"\"\"Block until the internal flag is true.\n\n        If the internal flag is true on entry, return immediately. Otherwise,\n        block until another thread calls set() to set the flag to true, or until\n        the optional timeout occurs.\n\n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n\n        This method returns the internal flag on exit, so it will always return\n        True except if a timeout is given and the operation times out.\n\n        \"\"\"\n        with self._cond:\n            signaled = self._flag\n            if not signaled:\n                signaled = self._cond.wait(timeout)\n            return signaled\n\n\n# A barrier class.  Inspired in part by the pthread_barrier_* api and\n# the CyclicBarrier class from Java.  See\n# http://sourceware.org/pthreads-win32/manual/pthread_barrier_init.html and\n# http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/\n#        CyclicBarrier.html\n# for information.\n# We maintain two main states, 'filling' and 'draining' enabling the barrier\n# to be cyclic.  Threads are not allowed into it until it has fully drained\n# since the previous cycle.  In addition, a 'resetting' state exists which is\n# similar to 'draining' except that threads leave with a BrokenBarrierError,\n# and a 'broken' state in which all threads get the exception.\nclass Barrier:\n    \"\"\"Implements a Barrier.\n\n    Useful for synchronizing a fixed number of threads at known synchronization\n    points.  Threads block on 'wait()' and are simultaneously once they have all\n    made that call.\n\n    \"\"\"\n\n    def __init__(self, parties, action=None, timeout=None):\n        \"\"\"Create a barrier, initialised to 'parties' threads.\n\n        'action' is a callable which, when supplied, will be called by one of\n        the threads after they have all entered the barrier and just prior to\n        releasing them all. If a 'timeout' is provided, it is uses as the\n        default for all subsequent 'wait()' calls.\n\n        \"\"\"\n        self._cond = Condition(Lock())\n        self._action = action\n        self._timeout = timeout\n        self._parties = parties\n        self._state = 0 #0 filling, 1, draining, -1 resetting, -2 broken\n        self._count = 0\n\n    def wait(self, timeout=None):\n        \"\"\"Wait for the barrier.\n\n        When the specified number of threads have started waiting, they are all\n        simultaneously awoken. If an 'action' was provided for the barrier, one\n        of the threads will have executed that callback prior to returning.\n        Returns an individual index number from 0 to 'parties-1'.\n\n        \"\"\"\n        if timeout is None:\n            timeout = self._timeout\n        with self._cond:\n            self._enter() # Block while the barrier drains.\n            index = self._count\n            self._count += 1\n            try:\n                if index + 1 == self._parties:\n                    # We release the barrier\n                    self._release()\n                else:\n                    # We wait until someone releases us\n                    self._wait(timeout)\n                return index\n            finally:\n                self._count -= 1\n                # Wake up any threads waiting for barrier to drain.\n                self._exit()\n\n    # Block until the barrier is ready for us, or raise an exception\n    # if it is broken.\n    def _enter(self):\n        while self._state in (-1, 1):\n            # It is draining or resetting, wait until done\n            self._cond.wait()\n        #see if the barrier is in a broken state\n        if self._state < 0:\n            raise BrokenBarrierError\n        assert self._state == 0\n\n    # Optionally run the 'action' and release the threads waiting\n    # in the barrier.\n    def _release(self):\n        try:\n            if self._action:\n                self._action()\n            # enter draining state\n            self._state = 1\n            self._cond.notify_all()\n        except:\n            #an exception during the _action handler.  Break and reraise\n            self._break()\n            raise\n\n    # Wait in the barrier until we are released.  Raise an exception\n    # if the barrier is reset or broken.\n    def _wait(self, timeout):\n        if not self._cond.wait_for(lambda : self._state != 0, timeout):\n            #timed out.  Break the barrier\n            self._break()\n            raise BrokenBarrierError\n        if self._state < 0:\n            raise BrokenBarrierError\n        assert self._state == 1\n\n    # If we are the last thread to exit the barrier, signal any threads\n    # waiting for the barrier to drain.\n    def _exit(self):\n        if self._count == 0:\n            if self._state in (-1, 1):\n                #resetting or draining\n                self._state = 0\n                self._cond.notify_all()\n\n    def reset(self):\n        \"\"\"Reset the barrier to the initial state.\n\n        Any threads currently waiting will get the BrokenBarrier exception\n        raised.\n\n        \"\"\"\n        with self._cond:\n            if self._count > 0:\n                if self._state == 0:\n                    #reset the barrier, waking up threads\n                    self._state = -1\n                elif self._state == -2:\n                    #was broken, set it to reset state\n                    #which clears when the last thread exits\n                    self._state = -1\n            else:\n                self._state = 0\n            self._cond.notify_all()\n\n    def abort(self):\n        \"\"\"Place the barrier into a 'broken' state.\n\n        Useful in case of error.  Any currently waiting threads and threads\n        attempting to 'wait()' will have BrokenBarrierError raised.\n\n        \"\"\"\n        with self._cond:\n            self._break()\n\n    def _break(self):\n        # An internal error was detected.  The barrier is set to\n        # a broken state all parties awakened.\n        self._state = -2\n        self._cond.notify_all()\n\n    @property\n    def parties(self):\n        \"\"\"Return the number of threads required to trip the barrier.\"\"\"\n        return self._parties\n\n    @property\n    def n_waiting(self):\n        \"\"\"Return the number of threads currently waiting at the barrier.\"\"\"\n        # We don't need synchronization here since this is an ephemeral result\n        # anyway.  It returns the correct value in the steady state.\n        if self._state == 0:\n            return self._count\n        return 0\n\n    @property\n    def broken(self):\n        \"\"\"Return True if the barrier is in a broken state.\"\"\"\n        return self._state == -2\n\n# exception raised by the Barrier class\nclass BrokenBarrierError(RuntimeError):\n    pass\n\n\n# Helper to generate new thread names\n_counter = _count().__next__\n_counter() # Consume 0 so first non-main thread has id 1.\ndef _newname(template=\"Thread-%d\"):\n    return template % _counter()\n\n# Active thread administration\n_active_limbo_lock = _allocate_lock()\n_active = {}    # maps thread id to Thread object\n_limbo = {}\n_dangling = WeakSet()\n\n# Main class for threads\n\nclass Thread:\n    \"\"\"A class that represents a thread of control.\n\n    This class can be safely subclassed in a limited fashion. There are two ways\n    to specify the activity: by passing a callable object to the constructor, or\n    by overriding the run() method in a subclass.\n\n    \"\"\"\n\n    _initialized = False\n    # Need to store a reference to sys.exc_info for printing\n    # out exceptions when a thread tries to use a global var. during interp.\n    # shutdown and thus raises an exception about trying to perform some\n    # operation on/with a NoneType\n    _exc_info = _sys.exc_info\n    # Keep sys.exc_clear too to clear the exception just before\n    # allowing .join() to return.\n    #XXX __exc_clear = _sys.exc_clear\n\n    def __init__(self, group=None, target=None, name=None,\n                 args=(), kwargs=None, *, daemon=None):\n        \"\"\"This constructor should always be called with keyword arguments. Arguments are:\n\n        *group* should be None; reserved for future extension when a ThreadGroup\n        class is implemented.\n\n        *target* is the callable object to be invoked by the run()\n        method. Defaults to None, meaning nothing is called.\n\n        *name* is the thread name. By default, a unique name is constructed of\n        the form \"Thread-N\" where N is a small decimal number.\n\n        *args* is the argument tuple for the target invocation. Defaults to ().\n\n        *kwargs* is a dictionary of keyword arguments for the target\n        invocation. Defaults to {}.\n\n        If a subclass overrides the constructor, it must make sure to invoke\n        the base class constructor (Thread.__init__()) before doing anything\n        else to the thread.\n\n        \"\"\"\n        assert group is None, \"group argument must be None for now\"\n        if kwargs is None:\n            kwargs = {}\n        self._target = target\n        self._name = str(name or _newname())\n        self._args = args\n        self._kwargs = kwargs\n        if daemon is not None:\n            self._daemonic = daemon\n        else:\n            self._daemonic = current_thread().daemon\n        self._ident = None\n        self._tstate_lock = None\n        self._started = Event()\n        self._is_stopped = False\n        self._initialized = True\n        # sys.stderr is not stored in the class like\n        # sys.exc_info since it can be changed between instances\n        self._stderr = _sys.stderr\n        # For debugging and _after_fork()\n        _dangling.add(self)\n\n    def _reset_internal_locks(self, is_alive):\n        # private!  Called by _after_fork() to reset our internal locks as\n        # they may be in an invalid state leading to a deadlock or crash.\n        self._started._reset_internal_locks()\n        if is_alive:\n            self._set_tstate_lock()\n        else:\n            # The thread isn't alive after fork: it doesn't have a tstate\n            # anymore.\n            self._is_stopped = True\n            self._tstate_lock = None\n\n    def __repr__(self):\n        assert self._initialized, \"Thread.__init__() was not called\"\n        status = \"initial\"\n        if self._started.is_set():\n            status = \"started\"\n        self.is_alive() # easy way to get ._is_stopped set when appropriate\n        if self._is_stopped:\n            status = \"stopped\"\n        if self._daemonic:\n            status += \" daemon\"\n        if self._ident is not None:\n            status += \" %s\" % self._ident\n        return \"<%s(%s, %s)>\" % (self.__class__.__name__, self._name, status)\n\n    def start(self):\n        \"\"\"Start the thread's activity.\n\n        It must be called at most once per thread object. It arranges for the\n        object's run() method to be invoked in a separate thread of control.\n\n        This method will raise a RuntimeError if called more than once on the\n        same thread object.\n\n        \"\"\"\n        if not self._initialized:\n            raise RuntimeError(\"thread.__init__() not called\")\n\n        if self._started.is_set():\n            raise RuntimeError(\"threads can only be started once\")\n        with _active_limbo_lock:\n            _limbo[self] = self\n        try:\n            _start_new_thread(self._bootstrap, ())\n        except Exception:\n            with _active_limbo_lock:\n                del _limbo[self]\n            raise\n        self._started.wait()\n\n    def run(self):\n        \"\"\"Method representing the thread's activity.\n\n        You may override this method in a subclass. The standard run() method\n        invokes the callable object passed to the object's constructor as the\n        target argument, if any, with sequential and keyword arguments taken\n        from the args and kwargs arguments, respectively.\n\n        \"\"\"\n        try:\n            if self._target:\n                self._target(*self._args, **self._kwargs)\n        finally:\n            # Avoid a refcycle if the thread is running a function with\n            # an argument that has a member that points to the thread.\n            del self._target, self._args, self._kwargs\n\n    def _bootstrap(self):\n        # Wrapper around the real bootstrap code that ignores\n        # exceptions during interpreter cleanup.  Those typically\n        # happen when a daemon thread wakes up at an unfortunate\n        # moment, finds the world around it destroyed, and raises some\n        # random exception *** while trying to report the exception in\n        # _bootstrap_inner() below ***.  Those random exceptions\n        # don't help anybody, and they confuse users, so we suppress\n        # them.  We suppress them only when it appears that the world\n        # indeed has already been destroyed, so that exceptions in\n        # _bootstrap_inner() during normal business hours are properly\n        # reported.  Also, we only suppress them for daemonic threads;\n        # if a non-daemonic encounters this, something else is wrong.\n        try:\n            self._bootstrap_inner()\n        except:\n            if self._daemonic and _sys is None:\n                return\n            raise\n\n    def _set_ident(self):\n        self._ident = get_ident()\n\n    def _set_tstate_lock(self):\n        \"\"\"\n        Set a lock object which will be released by the interpreter when\n        the underlying thread state (see pystate.h) gets deleted.\n        \"\"\"\n        self._tstate_lock = _set_sentinel()\n        self._tstate_lock.acquire()\n\n    def _bootstrap_inner(self):\n        try:\n            self._set_ident()\n            self._set_tstate_lock()\n            self._started.set()\n            with _active_limbo_lock:\n                _active[self._ident] = self\n                del _limbo[self]\n\n            if _trace_hook:\n                _sys.settrace(_trace_hook)\n            if _profile_hook:\n                _sys.setprofile(_profile_hook)\n\n            try:\n                self.run()\n            except SystemExit:\n                pass\n            except:\n                # If sys.stderr is no more (most likely from interpreter\n                # shutdown) use self._stderr.  Otherwise still use sys (as in\n                # _sys) in case sys.stderr was redefined since the creation of\n                # self.\n                if _sys and _sys.stderr is not None:\n                    print(\"Exception in thread %s:\\n%s\" %\n                          (self.name, _format_exc()), file=_sys.stderr)\n                elif self._stderr is not None:\n                    # Do the best job possible w/o a huge amt. of code to\n                    # approximate a traceback (code ideas from\n                    # Lib/traceback.py)\n                    exc_type, exc_value, exc_tb = self._exc_info()\n                    try:\n                        print((\n                            \"Exception in thread \" + self.name +\n                            \" (most likely raised during interpreter shutdown):\"), file=self._stderr)\n                        print((\n                            \"Traceback (most recent call last):\"), file=self._stderr)\n                        while exc_tb:\n                            print((\n                                '  File \"%s\", line %s, in %s' %\n                                (exc_tb.tb_frame.f_code.co_filename,\n                                    exc_tb.tb_lineno,\n                                    exc_tb.tb_frame.f_code.co_name)), file=self._stderr)\n                            exc_tb = exc_tb.tb_next\n                        print((\"%s: %s\" % (exc_type, exc_value)), file=self._stderr)\n                    # Make sure that exc_tb gets deleted since it is a memory\n                    # hog; deleting everything else is just for thoroughness\n                    finally:\n                        del exc_type, exc_value, exc_tb\n            finally:\n                # Prevent a race in\n                # test_threading.test_no_refcycle_through_target when\n                # the exception keeps the target alive past when we\n                # assert that it's dead.\n                #XXX self._exc_clear()\n                pass\n        finally:\n            with _active_limbo_lock:\n                try:\n                    # We don't call self._delete() because it also\n                    # grabs _active_limbo_lock.\n                    del _active[get_ident()]\n                except:\n                    pass\n\n    def _stop(self):\n        # After calling ._stop(), .is_alive() returns False and .join() returns\n        # immediately.  ._tstate_lock must be released before calling ._stop().\n        #\n        # Normal case:  C code at the end of the thread's life\n        # (release_sentinel in _threadmodule.c) releases ._tstate_lock, and\n        # that's detected by our ._wait_for_tstate_lock(), called by .join()\n        # and .is_alive().  Any number of threads _may_ call ._stop()\n        # simultaneously (for example, if multiple threads are blocked in\n        # .join() calls), and they're not serialized.  That's harmless -\n        # they'll just make redundant rebindings of ._is_stopped and\n        # ._tstate_lock.  Obscure:  we rebind ._tstate_lock last so that the\n        # \"assert self._is_stopped\" in ._wait_for_tstate_lock() always works\n        # (the assert is executed only if ._tstate_lock is None).\n        #\n        # Special case:  _main_thread releases ._tstate_lock via this\n        # module's _shutdown() function.\n        lock = self._tstate_lock\n        if lock is not None:\n            assert not lock.locked()\n        self._is_stopped = True\n        self._tstate_lock = None\n\n    def _delete(self):\n        \"Remove current thread from the dict of currently running threads.\"\n\n        # Notes about running with _dummy_thread:\n        #\n        # Must take care to not raise an exception if _dummy_thread is being\n        # used (and thus this module is being used as an instance of\n        # dummy_threading).  _dummy_thread.get_ident() always returns -1 since\n        # there is only one thread if _dummy_thread is being used.  Thus\n        # len(_active) is always <= 1 here, and any Thread instance created\n        # overwrites the (if any) thread currently registered in _active.\n        #\n        # An instance of _MainThread is always created by 'threading'.  This\n        # gets overwritten the instant an instance of Thread is created; both\n        # threads return -1 from _dummy_thread.get_ident() and thus have the\n        # same key in the dict.  So when the _MainThread instance created by\n        # 'threading' tries to clean itself up when atexit calls this method\n        # it gets a KeyError if another Thread instance was created.\n        #\n        # This all means that KeyError from trying to delete something from\n        # _active if dummy_threading is being used is a red herring.  But\n        # since it isn't if dummy_threading is *not* being used then don't\n        # hide the exception.\n\n        try:\n            with _active_limbo_lock:\n                del _active[get_ident()]\n                # There must not be any python code between the previous line\n                # and after the lock is released.  Otherwise a tracing function\n                # could try to acquire the lock again in the same thread, (in\n                # current_thread()), and would block.\n        except KeyError:\n            if 'dummy_threading' not in _sys.modules:\n                raise\n\n    def join(self, timeout=None):\n        \"\"\"Wait until the thread terminates.\n\n        This blocks the calling thread until the thread whose join() method is\n        called terminates -- either normally or through an unhandled exception\n        or until the optional timeout occurs.\n\n        When the timeout argument is present and not None, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof). As join() always returns None, you must call\n        isAlive() after join() to decide whether a timeout happened -- if the\n        thread is still alive, the join() call timed out.\n\n        When the timeout argument is not present or None, the operation will\n        block until the thread terminates.\n\n        A thread can be join()ed many times.\n\n        join() raises a RuntimeError if an attempt is made to join the current\n        thread as that would cause a deadlock. It is also an error to join() a\n        thread before it has been started and attempts to do so raises the same\n        exception.\n\n        \"\"\"\n        if not self._initialized:\n            raise RuntimeError(\"Thread.__init__() not called\")\n        if not self._started.is_set():\n            raise RuntimeError(\"cannot join thread before it is started\")\n        if self is current_thread():\n            raise RuntimeError(\"cannot join current thread\")\n\n        if timeout is None:\n            self._wait_for_tstate_lock()\n        else:\n            # the behavior of a negative timeout isn't documented, but\n            # historically .join(timeout=x) for x<0 has acted as if timeout=0\n            self._wait_for_tstate_lock(timeout=max(timeout, 0))\n\n    def _wait_for_tstate_lock(self, block=True, timeout=-1):\n        # Issue #18808: wait for the thread state to be gone.\n        # At the end of the thread's life, after all knowledge of the thread\n        # is removed from C data structures, C code releases our _tstate_lock.\n        # This method passes its arguments to _tstate_lock.acquire().\n        # If the lock is acquired, the C code is done, and self._stop() is\n        # called.  That sets ._is_stopped to True, and ._tstate_lock to None.\n        lock = self._tstate_lock\n        if lock is None:  # already determined that the C code is done\n            assert self._is_stopped\n        elif lock.acquire(block, timeout):\n            lock.release()\n            self._stop()\n\n    @property\n    def name(self):\n        \"\"\"A string used for identification purposes only.\n\n        It has no semantics. Multiple threads may be given the same name. The\n        initial name is set by the constructor.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        return self._name\n\n    @name.setter\n    def name(self, name):\n        assert self._initialized, \"Thread.__init__() not called\"\n        self._name = str(name)\n\n    @property\n    def ident(self):\n        \"\"\"Thread identifier of this thread or None if it has not been started.\n\n        This is a nonzero integer. See the get_ident() function. Thread\n        identifiers may be recycled when a thread exits and another thread is\n        created. The identifier is available even after the thread has exited.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        return self._ident\n\n    def is_alive(self):\n        \"\"\"Return whether the thread is alive.\n\n        This method returns True just before the run() method starts until just\n        after the run() method terminates. The module function enumerate()\n        returns a list of all alive threads.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        if self._is_stopped or not self._started.is_set():\n            return False\n        self._wait_for_tstate_lock(False)\n        return not self._is_stopped\n\n    isAlive = is_alive\n\n    @property\n    def daemon(self):\n        \"\"\"A boolean value indicating whether this thread is a daemon thread.\n\n        This must be set before start() is called, otherwise RuntimeError is\n        raised. Its initial value is inherited from the creating thread; the\n        main thread is not a daemon thread and therefore all threads created in\n        the main thread default to daemon = False.\n\n        The entire Python program exits when no alive non-daemon threads are\n        left.\n\n        \"\"\"\n        assert self._initialized, \"Thread.__init__() not called\"\n        return self._daemonic\n\n    @daemon.setter\n    def daemon(self, daemonic):\n        if not self._initialized:\n            raise RuntimeError(\"Thread.__init__() not called\")\n        if self._started.is_set():\n            raise RuntimeError(\"cannot set daemon status of active thread\")\n        self._daemonic = daemonic\n\n    def isDaemon(self):\n        return self.daemon\n\n    def setDaemon(self, daemonic):\n        self.daemon = daemonic\n\n    def getName(self):\n        return self.name\n\n    def setName(self, name):\n        self.name = name\n\n# The timer class was contributed by Itamar Shtull-Trauring\n\nclass Timer(Thread):\n    \"\"\"Call a function after a specified number of seconds:\n\n            t = Timer(30.0, f, args=None, kwargs=None)\n            t.start()\n            t.cancel()     # stop the timer's action if it's still waiting\n\n    \"\"\"\n\n    def __init__(self, interval, function, args=None, kwargs=None):\n        Thread.__init__(self)\n        self.interval = interval\n        self.function = function\n        self.args = args if args is not None else []\n        self.kwargs = kwargs if kwargs is not None else {}\n        self.finished = Event()\n\n    def cancel(self):\n        \"\"\"Stop the timer if it hasn't finished yet.\"\"\"\n        self.finished.set()\n\n    def run(self):\n        self.finished.wait(self.interval)\n        if not self.finished.is_set():\n            self.function(*self.args, **self.kwargs)\n        self.finished.set()\n\n\n# Special thread class to represent the main thread\n\nclass _MainThread(Thread):\n\n    def __init__(self):\n        Thread.__init__(self, name=\"MainThread\", daemon=False)\n        self._set_tstate_lock()\n        self._started.set()\n        self._set_ident()\n        with _active_limbo_lock:\n            _active[self._ident] = self\n\n\n# Dummy thread class to represent threads not started here.\n# These aren't garbage collected when they die, nor can they be waited for.\n# If they invoke anything in threading.py that calls current_thread(), they\n# leave an entry in the _active dict forever after.\n# Their purpose is to return *something* from current_thread().\n# They are marked as daemon threads so we won't wait for them\n# when we exit (conform previous semantics).\n\nclass _DummyThread(Thread):\n\n    def __init__(self):\n        Thread.__init__(self, name=_newname(\"Dummy-%d\"), daemon=True)\n\n        self._started.set()\n        self._set_ident()\n        with _active_limbo_lock:\n            _active[self._ident] = self\n\n    def _stop(self):\n        pass\n\n    def is_alive(self):\n        assert not self._is_stopped and self._started.is_set()\n        return True\n\n    def join(self, timeout=None):\n        assert False, \"cannot join a dummy thread\"\n\n\n# Global API functions\n\ndef current_thread():\n    \"\"\"Return the current Thread object, corresponding to the caller's thread of control.\n\n    If the caller's thread of control was not created through the threading\n    module, a dummy thread object with limited functionality is returned.\n\n    \"\"\"\n    try:\n        return _active[get_ident()]\n    except KeyError:\n        return _DummyThread()\n\ncurrentThread = current_thread\n\ndef active_count():\n    \"\"\"Return the number of Thread objects currently alive.\n\n    The returned count is equal to the length of the list returned by\n    enumerate().\n\n    \"\"\"\n    with _active_limbo_lock:\n        return len(_active) + len(_limbo)\n\nactiveCount = active_count\n\ndef _enumerate():\n    # Same as enumerate(), but without the lock. Internal use only.\n    return list(_active.values()) + list(_limbo.values())\n\ndef enumerate():\n    \"\"\"Return a list of all Thread objects currently alive.\n\n    The list includes daemonic threads, dummy thread objects created by\n    current_thread(), and the main thread. It excludes terminated threads and\n    threads that have not yet been started.\n\n    \"\"\"\n    with _active_limbo_lock:\n        return list(_active.values()) + list(_limbo.values())\n\nfrom _thread import stack_size\n\n# Create the main thread object,\n# and make it available for the interpreter\n# (Py_Main) as threading._shutdown.\n\n_main_thread = _MainThread()\n\ndef _shutdown():\n    # Obscure:  other threads may be waiting to join _main_thread.  That's\n    # dubious, but some code does it.  We can't wait for C code to release\n    # the main thread's tstate_lock - that won't happen until the interpreter\n    # is nearly dead.  So we release it here.  Note that just calling _stop()\n    # isn't enough:  other threads may already be waiting on _tstate_lock.\n    tlock = _main_thread._tstate_lock\n    # The main thread isn't finished yet, so its thread state lock can't have\n    # been released.\n    assert tlock is not None\n    assert tlock.locked()\n    tlock.release()\n    _main_thread._stop()\n    t = _pickSomeNonDaemonThread()\n    while t:\n        t.join()\n        t = _pickSomeNonDaemonThread()\n\ndef _pickSomeNonDaemonThread():\n    for t in enumerate():\n        if not t.daemon and t.is_alive():\n            return t\n    return None\n\ndef main_thread():\n    \"\"\"Return the main thread object.\n\n    In normal conditions, the main thread is the thread from which the\n    Python interpreter was started.\n    \"\"\"\n    return _main_thread\n\n# get thread-local implementation, either from the thread\n# module, or from the python fallback\n\ntry:\n    from _thread import _local as local\nexcept ImportError:\n    from _threading_local import local\n\n\ndef _after_fork():\n    # This function is called by Python/ceval.c:PyEval_ReInitThreads which\n    # is called from PyOS_AfterFork.  Here we cleanup threading module state\n    # that should not exist after a fork.\n\n    # Reset _active_limbo_lock, in case we forked while the lock was held\n    # by another (non-forked) thread.  http://bugs.python.org/issue874900\n    global _active_limbo_lock, _main_thread\n    _active_limbo_lock = _allocate_lock()\n\n    # fork() only copied the current thread; clear references to others.\n    new_active = {}\n    current = current_thread()\n    _main_thread = current\n    with _active_limbo_lock:\n        # Dangling thread instances must still have their locks reset,\n        # because someone may join() them.\n        threads = set(_enumerate())\n        threads.update(_dangling)\n        for thread in threads:\n            # Any lock/condition variable may be currently locked or in an\n            # invalid state, so we reinitialize them.\n            if thread is current:\n                # There is only one active thread. We reset the ident to\n                # its new value since it can have changed.\n                thread._reset_internal_locks(True)\n                ident = get_ident()\n                thread._ident = ident\n                new_active[ident] = thread\n            else:\n                # All the others are already stopped.\n                thread._reset_internal_locks(False)\n                thread._stop()\n\n        _limbo.clear()\n        _active.clear()\n        _active.update(new_active)\n        assert len(_active) == 1\n",1357],"/usr/lib/python3.6/_weakrefset.py":["# Access WeakSet through the weakref module.\n# This code is separated-out because it is needed\n# by abc.py to load everything else at startup.\n\nfrom _weakref import ref\n\n__all__ = ['WeakSet']\n\n\nclass _IterationGuard:\n    # This context manager registers itself in the current iterators of the\n    # weak container, such as to delay all removals until the context manager\n    # exits.\n    # This technique should be relatively thread-safe (since sets are).\n\n    def __init__(self, weakcontainer):\n        # Don't create cycles\n        self.weakcontainer = ref(weakcontainer)\n\n    def __enter__(self):\n        w = self.weakcontainer()\n        if w is not None:\n            w._iterating.add(self)\n        return self\n\n    def __exit__(self, e, t, b):\n        w = self.weakcontainer()\n        if w is not None:\n            s = w._iterating\n            s.remove(self)\n            if not s:\n                w._commit_removals()\n\n\nclass WeakSet:\n    def __init__(self, data=None):\n        self.data = set()\n        def _remove(item, selfref=ref(self)):\n            self = selfref()\n            if self is not None:\n                if self._iterating:\n                    self._pending_removals.append(item)\n                else:\n                    self.data.discard(item)\n        self._remove = _remove\n        # A list of keys to be removed\n        self._pending_removals = []\n        self._iterating = set()\n        if data is not None:\n            self.update(data)\n\n    def _commit_removals(self):\n        l = self._pending_removals\n        discard = self.data.discard\n        while l:\n            discard(l.pop())\n\n    def __iter__(self):\n        with _IterationGuard(self):\n            for itemref in self.data:\n                item = itemref()\n                if item is not None:\n                    # Caveat: the iterator will keep a strong reference to\n                    # `item` until it is resumed or closed.\n                    yield item\n\n    def __len__(self):\n        return len(self.data) - len(self._pending_removals)\n\n    def __contains__(self, item):\n        try:\n            wr = ref(item)\n        except TypeError:\n            return False\n        return wr in self.data\n\n    def __reduce__(self):\n        return (self.__class__, (list(self),),\n                getattr(self, '__dict__', None))\n\n    def add(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.add(ref(item, self._remove))\n\n    def clear(self):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.clear()\n\n    def copy(self):\n        return self.__class__(self)\n\n    def pop(self):\n        if self._pending_removals:\n            self._commit_removals()\n        while True:\n            try:\n                itemref = self.data.pop()\n            except KeyError:\n                raise KeyError('pop from empty WeakSet')\n            item = itemref()\n            if item is not None:\n                return item\n\n    def remove(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.remove(ref(item))\n\n    def discard(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.discard(ref(item))\n\n    def update(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        for element in other:\n            self.add(element)\n\n    def __ior__(self, other):\n        self.update(other)\n        return self\n\n    def difference(self, other):\n        newset = self.copy()\n        newset.difference_update(other)\n        return newset\n    __sub__ = difference\n\n    def difference_update(self, other):\n        self.__isub__(other)\n    def __isub__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        if self is other:\n            self.data.clear()\n        else:\n            self.data.difference_update(ref(item) for item in other)\n        return self\n\n    def intersection(self, other):\n        return self.__class__(item for item in other if item in self)\n    __and__ = intersection\n\n    def intersection_update(self, other):\n        self.__iand__(other)\n    def __iand__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.intersection_update(ref(item) for item in other)\n        return self\n\n    def issubset(self, other):\n        return self.data.issubset(ref(item) for item in other)\n    __le__ = issubset\n\n    def __lt__(self, other):\n        return self.data < set(ref(item) for item in other)\n\n    def issuperset(self, other):\n        return self.data.issuperset(ref(item) for item in other)\n    __ge__ = issuperset\n\n    def __gt__(self, other):\n        return self.data > set(ref(item) for item in other)\n\n    def __eq__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return self.data == set(ref(item) for item in other)\n\n    def symmetric_difference(self, other):\n        newset = self.copy()\n        newset.symmetric_difference_update(other)\n        return newset\n    __xor__ = symmetric_difference\n\n    def symmetric_difference_update(self, other):\n        self.__ixor__(other)\n    def __ixor__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        if self is other:\n            self.data.clear()\n        else:\n            self.data.symmetric_difference_update(ref(item, self._remove) for item in other)\n        return self\n\n    def union(self, other):\n        return self.__class__(e for s in (self, other) for e in s)\n    __or__ = union\n\n    def isdisjoint(self, other):\n        return len(self.intersection(other)) == 0\n",196],"/usr/lib/python3.6/multiprocessing/popen_fork.py":["import os\nimport sys\nimport signal\n\nfrom . import util\n\n__all__ = ['Popen']\n\n#\n# Start child process using fork\n#\n\nclass Popen(object):\n    method = 'fork'\n\n    def __init__(self, process_obj):\n        util._flush_std_streams()\n        self.returncode = None\n        self._launch(process_obj)\n\n    def duplicate_for_child(self, fd):\n        return fd\n\n    def poll(self, flag=os.WNOHANG):\n        if self.returncode is None:\n            while True:\n                try:\n                    pid, sts = os.waitpid(self.pid, flag)\n                except OSError as e:\n                    # Child process not yet created. See #1731717\n                    # e.errno == errno.ECHILD == 10\n                    return None\n                else:\n                    break\n            if pid == self.pid:\n                if os.WIFSIGNALED(sts):\n                    self.returncode = -os.WTERMSIG(sts)\n                else:\n                    assert os.WIFEXITED(sts)\n                    self.returncode = os.WEXITSTATUS(sts)\n        return self.returncode\n\n    def wait(self, timeout=None):\n        if self.returncode is None:\n            if timeout is not None:\n                from multiprocessing.connection import wait\n                if not wait([self.sentinel], timeout):\n                    return None\n            # This shouldn't block if wait() returned successfully.\n            return self.poll(os.WNOHANG if timeout == 0.0 else 0)\n        return self.returncode\n\n    def terminate(self):\n        if self.returncode is None:\n            try:\n                os.kill(self.pid, signal.SIGTERM)\n            except ProcessLookupError:\n                pass\n            except OSError:\n                if self.wait(timeout=0.1) is None:\n                    raise\n\n    def _launch(self, process_obj):\n        code = 1\n        parent_r, child_w = os.pipe()\n        self.pid = os.fork()\n        if self.pid == 0:\n            try:\n                os.close(parent_r)\n                if 'random' in sys.modules:\n                    import random\n                    random.seed()\n                code = process_obj._bootstrap()\n            finally:\n                os._exit(code)\n        else:\n            os.close(child_w)\n            util.Finalize(self, os.close, (parent_r,))\n            self.sentinel = parent_r\n",79],"/usr/lib/python3.6/selectors.py":["\"\"\"Selectors module.\n\nThis module allows high-level and efficient I/O multiplexing, built upon the\n`select` module primitives.\n\"\"\"\n\n\nfrom abc import ABCMeta, abstractmethod\nfrom collections import namedtuple, Mapping\nimport math\nimport select\nimport sys\n\n\n# generic events, that must be mapped to implementation-specific ones\nEVENT_READ = (1 << 0)\nEVENT_WRITE = (1 << 1)\n\n\ndef _fileobj_to_fd(fileobj):\n    \"\"\"Return a file descriptor from a file object.\n\n    Parameters:\n    fileobj -- file object or file descriptor\n\n    Returns:\n    corresponding file descriptor\n\n    Raises:\n    ValueError if the object is invalid\n    \"\"\"\n    if isinstance(fileobj, int):\n        fd = fileobj\n    else:\n        try:\n            fd = int(fileobj.fileno())\n        except (AttributeError, TypeError, ValueError):\n            raise ValueError(\"Invalid file object: \"\n                             \"{!r}\".format(fileobj)) from None\n    if fd < 0:\n        raise ValueError(\"Invalid file descriptor: {}\".format(fd))\n    return fd\n\n\nSelectorKey = namedtuple('SelectorKey', ['fileobj', 'fd', 'events', 'data'])\n\nSelectorKey.__doc__ = \"\"\"SelectorKey(fileobj, fd, events, data)\n\n    Object used to associate a file object to its backing\n    file descriptor, selected event mask, and attached data.\n\"\"\"\nif sys.version_info >= (3, 5):\n    SelectorKey.fileobj.__doc__ = 'File object registered.'\n    SelectorKey.fd.__doc__ = 'Underlying file descriptor.'\n    SelectorKey.events.__doc__ = 'Events that must be waited for on this file object.'\n    SelectorKey.data.__doc__ = ('''Optional opaque data associated to this file object.\n    For example, this could be used to store a per-client session ID.''')\n\nclass _SelectorMapping(Mapping):\n    \"\"\"Mapping of file objects to selector keys.\"\"\"\n\n    def __init__(self, selector):\n        self._selector = selector\n\n    def __len__(self):\n        return len(self._selector._fd_to_key)\n\n    def __getitem__(self, fileobj):\n        try:\n            fd = self._selector._fileobj_lookup(fileobj)\n            return self._selector._fd_to_key[fd]\n        except KeyError:\n            raise KeyError(\"{!r} is not registered\".format(fileobj)) from None\n\n    def __iter__(self):\n        return iter(self._selector._fd_to_key)\n\n\nclass BaseSelector(metaclass=ABCMeta):\n    \"\"\"Selector abstract base class.\n\n    A selector supports registering file objects to be monitored for specific\n    I/O events.\n\n    A file object is a file descriptor or any object with a `fileno()` method.\n    An arbitrary object can be attached to the file object, which can be used\n    for example to store context information, a callback, etc.\n\n    A selector can use various implementations (select(), poll(), epoll()...)\n    depending on the platform. The default `Selector` class uses the most\n    efficient implementation on the current platform.\n    \"\"\"\n\n    @abstractmethod\n    def register(self, fileobj, events, data=None):\n        \"\"\"Register a file object.\n\n        Parameters:\n        fileobj -- file object or file descriptor\n        events  -- events to monitor (bitwise mask of EVENT_READ|EVENT_WRITE)\n        data    -- attached data\n\n        Returns:\n        SelectorKey instance\n\n        Raises:\n        ValueError if events is invalid\n        KeyError if fileobj is already registered\n        OSError if fileobj is closed or otherwise is unacceptable to\n                the underlying system call (if a system call is made)\n\n        Note:\n        OSError may or may not be raised\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def unregister(self, fileobj):\n        \"\"\"Unregister a file object.\n\n        Parameters:\n        fileobj -- file object or file descriptor\n\n        Returns:\n        SelectorKey instance\n\n        Raises:\n        KeyError if fileobj is not registered\n\n        Note:\n        If fileobj is registered but has since been closed this does\n        *not* raise OSError (even if the wrapped syscall does)\n        \"\"\"\n        raise NotImplementedError\n\n    def modify(self, fileobj, events, data=None):\n        \"\"\"Change a registered file object monitored events or attached data.\n\n        Parameters:\n        fileobj -- file object or file descriptor\n        events  -- events to monitor (bitwise mask of EVENT_READ|EVENT_WRITE)\n        data    -- attached data\n\n        Returns:\n        SelectorKey instance\n\n        Raises:\n        Anything that unregister() or register() raises\n        \"\"\"\n        self.unregister(fileobj)\n        return self.register(fileobj, events, data)\n\n    @abstractmethod\n    def select(self, timeout=None):\n        \"\"\"Perform the actual selection, until some monitored file objects are\n        ready or a timeout expires.\n\n        Parameters:\n        timeout -- if timeout > 0, this specifies the maximum wait time, in\n                   seconds\n                   if timeout <= 0, the select() call won't block, and will\n                   report the currently ready file objects\n                   if timeout is None, select() will block until a monitored\n                   file object becomes ready\n\n        Returns:\n        list of (key, events) for ready file objects\n        `events` is a bitwise mask of EVENT_READ|EVENT_WRITE\n        \"\"\"\n        raise NotImplementedError\n\n    def close(self):\n        \"\"\"Close the selector.\n\n        This must be called to make sure that any underlying resource is freed.\n        \"\"\"\n        pass\n\n    def get_key(self, fileobj):\n        \"\"\"Return the key associated to a registered file object.\n\n        Returns:\n        SelectorKey for this file object\n        \"\"\"\n        mapping = self.get_map()\n        if mapping is None:\n            raise RuntimeError('Selector is closed')\n        try:\n            return mapping[fileobj]\n        except KeyError:\n            raise KeyError(\"{!r} is not registered\".format(fileobj)) from None\n\n    @abstractmethod\n    def get_map(self):\n        \"\"\"Return a mapping of file objects to selector keys.\"\"\"\n        raise NotImplementedError\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args):\n        self.close()\n\n\nclass _BaseSelectorImpl(BaseSelector):\n    \"\"\"Base selector implementation.\"\"\"\n\n    def __init__(self):\n        # this maps file descriptors to keys\n        self._fd_to_key = {}\n        # read-only mapping returned by get_map()\n        self._map = _SelectorMapping(self)\n\n    def _fileobj_lookup(self, fileobj):\n        \"\"\"Return a file descriptor from a file object.\n\n        This wraps _fileobj_to_fd() to do an exhaustive search in case\n        the object is invalid but we still have it in our map.  This\n        is used by unregister() so we can unregister an object that\n        was previously registered even if it is closed.  It is also\n        used by _SelectorMapping.\n        \"\"\"\n        try:\n            return _fileobj_to_fd(fileobj)\n        except ValueError:\n            # Do an exhaustive search.\n            for key in self._fd_to_key.values():\n                if key.fileobj is fileobj:\n                    return key.fd\n            # Raise ValueError after all.\n            raise\n\n    def register(self, fileobj, events, data=None):\n        if (not events) or (events & ~(EVENT_READ | EVENT_WRITE)):\n            raise ValueError(\"Invalid events: {!r}\".format(events))\n\n        key = SelectorKey(fileobj, self._fileobj_lookup(fileobj), events, data)\n\n        if key.fd in self._fd_to_key:\n            raise KeyError(\"{!r} (FD {}) is already registered\"\n                           .format(fileobj, key.fd))\n\n        self._fd_to_key[key.fd] = key\n        return key\n\n    def unregister(self, fileobj):\n        try:\n            key = self._fd_to_key.pop(self._fileobj_lookup(fileobj))\n        except KeyError:\n            raise KeyError(\"{!r} is not registered\".format(fileobj)) from None\n        return key\n\n    def modify(self, fileobj, events, data=None):\n        # TODO: Subclasses can probably optimize this even further.\n        try:\n            key = self._fd_to_key[self._fileobj_lookup(fileobj)]\n        except KeyError:\n            raise KeyError(\"{!r} is not registered\".format(fileobj)) from None\n        if events != key.events:\n            self.unregister(fileobj)\n            key = self.register(fileobj, events, data)\n        elif data != key.data:\n            # Use a shortcut to update the data.\n            key = key._replace(data=data)\n            self._fd_to_key[key.fd] = key\n        return key\n\n    def close(self):\n        self._fd_to_key.clear()\n        self._map = None\n\n    def get_map(self):\n        return self._map\n\n    def _key_from_fd(self, fd):\n        \"\"\"Return the key associated to a given file descriptor.\n\n        Parameters:\n        fd -- file descriptor\n\n        Returns:\n        corresponding key, or None if not found\n        \"\"\"\n        try:\n            return self._fd_to_key[fd]\n        except KeyError:\n            return None\n\n\nclass SelectSelector(_BaseSelectorImpl):\n    \"\"\"Select-based selector.\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self._readers = set()\n        self._writers = set()\n\n    def register(self, fileobj, events, data=None):\n        key = super().register(fileobj, events, data)\n        if events & EVENT_READ:\n            self._readers.add(key.fd)\n        if events & EVENT_WRITE:\n            self._writers.add(key.fd)\n        return key\n\n    def unregister(self, fileobj):\n        key = super().unregister(fileobj)\n        self._readers.discard(key.fd)\n        self._writers.discard(key.fd)\n        return key\n\n    if sys.platform == 'win32':\n        def _select(self, r, w, _, timeout=None):\n            r, w, x = select.select(r, w, w, timeout)\n            return r, w + x, []\n    else:\n        _select = select.select\n\n    def select(self, timeout=None):\n        timeout = None if timeout is None else max(timeout, 0)\n        ready = []\n        try:\n            r, w, _ = self._select(self._readers, self._writers, [], timeout)\n        except InterruptedError:\n            return ready\n        r = set(r)\n        w = set(w)\n        for fd in r | w:\n            events = 0\n            if fd in r:\n                events |= EVENT_READ\n            if fd in w:\n                events |= EVENT_WRITE\n\n            key = self._key_from_fd(fd)\n            if key:\n                ready.append((key, events & key.events))\n        return ready\n\n\nif hasattr(select, 'poll'):\n\n    class PollSelector(_BaseSelectorImpl):\n        \"\"\"Poll-based selector.\"\"\"\n\n        def __init__(self):\n            super().__init__()\n            self._poll = select.poll()\n\n        def register(self, fileobj, events, data=None):\n            key = super().register(fileobj, events, data)\n            poll_events = 0\n            if events & EVENT_READ:\n                poll_events |= select.POLLIN\n            if events & EVENT_WRITE:\n                poll_events |= select.POLLOUT\n            self._poll.register(key.fd, poll_events)\n            return key\n\n        def unregister(self, fileobj):\n            key = super().unregister(fileobj)\n            self._poll.unregister(key.fd)\n            return key\n\n        def select(self, timeout=None):\n            if timeout is None:\n                timeout = None\n            elif timeout <= 0:\n                timeout = 0\n            else:\n                # poll() has a resolution of 1 millisecond, round away from\n                # zero to wait *at least* timeout seconds.\n                timeout = math.ceil(timeout * 1e3)\n            ready = []\n            try:\n                fd_event_list = self._poll.poll(timeout)\n            except InterruptedError:\n                return ready\n            for fd, event in fd_event_list:\n                events = 0\n                if event & ~select.POLLIN:\n                    events |= EVENT_WRITE\n                if event & ~select.POLLOUT:\n                    events |= EVENT_READ\n\n                key = self._key_from_fd(fd)\n                if key:\n                    ready.append((key, events & key.events))\n            return ready\n\n\nif hasattr(select, 'epoll'):\n\n    class EpollSelector(_BaseSelectorImpl):\n        \"\"\"Epoll-based selector.\"\"\"\n\n        def __init__(self):\n            super().__init__()\n            self._epoll = select.epoll()\n\n        def fileno(self):\n            return self._epoll.fileno()\n\n        def register(self, fileobj, events, data=None):\n            key = super().register(fileobj, events, data)\n            epoll_events = 0\n            if events & EVENT_READ:\n                epoll_events |= select.EPOLLIN\n            if events & EVENT_WRITE:\n                epoll_events |= select.EPOLLOUT\n            try:\n                self._epoll.register(key.fd, epoll_events)\n            except BaseException:\n                super().unregister(fileobj)\n                raise\n            return key\n\n        def unregister(self, fileobj):\n            key = super().unregister(fileobj)\n            try:\n                self._epoll.unregister(key.fd)\n            except OSError:\n                # This can happen if the FD was closed since it\n                # was registered.\n                pass\n            return key\n\n        def select(self, timeout=None):\n            if timeout is None:\n                timeout = -1\n            elif timeout <= 0:\n                timeout = 0\n            else:\n                # epoll_wait() has a resolution of 1 millisecond, round away\n                # from zero to wait *at least* timeout seconds.\n                timeout = math.ceil(timeout * 1e3) * 1e-3\n\n            # epoll_wait() expects `maxevents` to be greater than zero;\n            # we want to make sure that `select()` can be called when no\n            # FD is registered.\n            max_ev = max(len(self._fd_to_key), 1)\n\n            ready = []\n            try:\n                fd_event_list = self._epoll.poll(timeout, max_ev)\n            except InterruptedError:\n                return ready\n            for fd, event in fd_event_list:\n                events = 0\n                if event & ~select.EPOLLIN:\n                    events |= EVENT_WRITE\n                if event & ~select.EPOLLOUT:\n                    events |= EVENT_READ\n\n                key = self._key_from_fd(fd)\n                if key:\n                    ready.append((key, events & key.events))\n            return ready\n\n        def close(self):\n            self._epoll.close()\n            super().close()\n\n\nif hasattr(select, 'devpoll'):\n\n    class DevpollSelector(_BaseSelectorImpl):\n        \"\"\"Solaris /dev/poll selector.\"\"\"\n\n        def __init__(self):\n            super().__init__()\n            self._devpoll = select.devpoll()\n\n        def fileno(self):\n            return self._devpoll.fileno()\n\n        def register(self, fileobj, events, data=None):\n            key = super().register(fileobj, events, data)\n            poll_events = 0\n            if events & EVENT_READ:\n                poll_events |= select.POLLIN\n            if events & EVENT_WRITE:\n                poll_events |= select.POLLOUT\n            self._devpoll.register(key.fd, poll_events)\n            return key\n\n        def unregister(self, fileobj):\n            key = super().unregister(fileobj)\n            self._devpoll.unregister(key.fd)\n            return key\n\n        def select(self, timeout=None):\n            if timeout is None:\n                timeout = None\n            elif timeout <= 0:\n                timeout = 0\n            else:\n                # devpoll() has a resolution of 1 millisecond, round away from\n                # zero to wait *at least* timeout seconds.\n                timeout = math.ceil(timeout * 1e3)\n            ready = []\n            try:\n                fd_event_list = self._devpoll.poll(timeout)\n            except InterruptedError:\n                return ready\n            for fd, event in fd_event_list:\n                events = 0\n                if event & ~select.POLLIN:\n                    events |= EVENT_WRITE\n                if event & ~select.POLLOUT:\n                    events |= EVENT_READ\n\n                key = self._key_from_fd(fd)\n                if key:\n                    ready.append((key, events & key.events))\n            return ready\n\n        def close(self):\n            self._devpoll.close()\n            super().close()\n\n\nif hasattr(select, 'kqueue'):\n\n    class KqueueSelector(_BaseSelectorImpl):\n        \"\"\"Kqueue-based selector.\"\"\"\n\n        def __init__(self):\n            super().__init__()\n            self._kqueue = select.kqueue()\n\n        def fileno(self):\n            return self._kqueue.fileno()\n\n        def register(self, fileobj, events, data=None):\n            key = super().register(fileobj, events, data)\n            try:\n                if events & EVENT_READ:\n                    kev = select.kevent(key.fd, select.KQ_FILTER_READ,\n                                        select.KQ_EV_ADD)\n                    self._kqueue.control([kev], 0, 0)\n                if events & EVENT_WRITE:\n                    kev = select.kevent(key.fd, select.KQ_FILTER_WRITE,\n                                        select.KQ_EV_ADD)\n                    self._kqueue.control([kev], 0, 0)\n            except BaseException:\n                super().unregister(fileobj)\n                raise\n            return key\n\n        def unregister(self, fileobj):\n            key = super().unregister(fileobj)\n            if key.events & EVENT_READ:\n                kev = select.kevent(key.fd, select.KQ_FILTER_READ,\n                                    select.KQ_EV_DELETE)\n                try:\n                    self._kqueue.control([kev], 0, 0)\n                except OSError:\n                    # This can happen if the FD was closed since it\n                    # was registered.\n                    pass\n            if key.events & EVENT_WRITE:\n                kev = select.kevent(key.fd, select.KQ_FILTER_WRITE,\n                                    select.KQ_EV_DELETE)\n                try:\n                    self._kqueue.control([kev], 0, 0)\n                except OSError:\n                    # See comment above.\n                    pass\n            return key\n\n        def select(self, timeout=None):\n            timeout = None if timeout is None else max(timeout, 0)\n            max_ev = len(self._fd_to_key)\n            ready = []\n            try:\n                kev_list = self._kqueue.control(None, max_ev, timeout)\n            except InterruptedError:\n                return ready\n            for kev in kev_list:\n                fd = kev.ident\n                flag = kev.filter\n                events = 0\n                if flag == select.KQ_FILTER_READ:\n                    events |= EVENT_READ\n                if flag == select.KQ_FILTER_WRITE:\n                    events |= EVENT_WRITE\n\n                key = self._key_from_fd(fd)\n                if key:\n                    ready.append((key, events & key.events))\n            return ready\n\n        def close(self):\n            self._kqueue.close()\n            super().close()\n\n\n# Choose the best implementation, roughly:\n#    epoll|kqueue|devpoll > poll > select.\n# select() also can't accept a FD > FD_SETSIZE (usually around 1024)\nif 'KqueueSelector' in globals():\n    DefaultSelector = KqueueSelector\nelif 'EpollSelector' in globals():\n    DefaultSelector = EpollSelector\nelif 'DevpollSelector' in globals():\n    DefaultSelector = DevpollSelector\nelif 'PollSelector' in globals():\n    DefaultSelector = PollSelector\nelse:\n    DefaultSelector = SelectSelector\n",611]},"functions":{"_after_fork (/usr/lib/python3.6/multiprocessing/synchronize.py:71)":["/usr/lib/python3.6/multiprocessing/synchronize.py",71],"_run_after_forkers (/usr/lib/python3.6/multiprocessing/util.py:127)":["/usr/lib/python3.6/multiprocessing/util.py",127],"info (/usr/lib/python3.6/multiprocessing/util.py:52)":["/usr/lib/python3.6/multiprocessing/util.py",52],"_close (/usr/lib/python3.6/multiprocessing/connection.py:360)":["/usr/lib/python3.6/multiprocessing/connection.py",360],"close (/usr/lib/python3.6/multiprocessing/connection.py:173)":["/usr/lib/python3.6/multiprocessing/connection.py",173],"__enter__ (/usr/lib/python3.6/multiprocessing/synchronize.py:94)":["/usr/lib/python3.6/multiprocessing/synchronize.py",94],"_check_closed (/usr/lib/python3.6/multiprocessing/connection.py:134)":["/usr/lib/python3.6/multiprocessing/connection.py",134],"_check_readable (/usr/lib/python3.6/multiprocessing/connection.py:138)":["/usr/lib/python3.6/multiprocessing/connection.py",138],"_recv (/usr/lib/python3.6/multiprocessing/connection.py:374)":["/usr/lib/python3.6/multiprocessing/connection.py",374],"_recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:406)":["/usr/lib/python3.6/multiprocessing/connection.py",406],"recv_bytes (/usr/lib/python3.6/multiprocessing/connection.py:208)":["/usr/lib/python3.6/multiprocessing/connection.py",208],"__exit__ (/usr/lib/python3.6/multiprocessing/synchronize.py:97)":["/usr/lib/python3.6/multiprocessing/synchronize.py",97],"get (/usr/lib/python3.6/multiprocessing/queues.py:333)":["/usr/lib/python3.6/multiprocessing/queues.py",333],"f (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:5)":["/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py",5],"mapstar (/usr/lib/python3.6/multiprocessing/pool.py:43)":["/usr/lib/python3.6/multiprocessing/pool.py",43],"__init__ (/usr/lib/python3.6/multiprocessing/reduction.py:38)":["/usr/lib/python3.6/multiprocessing/reduction.py",38],"dumps (/usr/lib/python3.6/multiprocessing/reduction.py:48)":["/usr/lib/python3.6/multiprocessing/reduction.py",48],"_check_writable (/usr/lib/python3.6/multiprocessing/connection.py:142)":["/usr/lib/python3.6/multiprocessing/connection.py",142],"_send (/usr/lib/python3.6/multiprocessing/connection.py:365)":["/usr/lib/python3.6/multiprocessing/connection.py",365],"_send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:390)":["/usr/lib/python3.6/multiprocessing/connection.py",390],"send_bytes (/usr/lib/python3.6/multiprocessing/connection.py:181)":["/usr/lib/python3.6/multiprocessing/connection.py",181],"put (/usr/lib/python3.6/multiprocessing/queues.py:339)":["/usr/lib/python3.6/multiprocessing/queues.py",339],"debug (/usr/lib/python3.6/multiprocessing/util.py:48)":["/usr/lib/python3.6/multiprocessing/util.py",48],"worker (/usr/lib/python3.6/multiprocessing/pool.py:93)":["/usr/lib/python3.6/multiprocessing/pool.py",93],"run (/usr/lib/python3.6/multiprocessing/process.py:88)":["/usr/lib/python3.6/multiprocessing/process.py",88],"<lambda> (/usr/lib/python3.6/multiprocessing/util.py:246)":["/usr/lib/python3.6/multiprocessing/util.py",246],"<listcomp> (/usr/lib/python3.6/multiprocessing/util.py:253)":["/usr/lib/python3.6/multiprocessing/util.py",253],"sub_debug (/usr/lib/python3.6/multiprocessing/util.py:44)":["/usr/lib/python3.6/multiprocessing/util.py",44],"RemoteTraceback (/usr/lib/python3.6/multiprocessing/pool.py:53)":["/usr/lib/python3.6/multiprocessing/pool.py",53],"ExceptionWithTraceback (/usr/lib/python3.6/multiprocessing/pool.py:59)":["/usr/lib/python3.6/multiprocessing/pool.py",59],"MaybeEncodingError (/usr/lib/python3.6/multiprocessing/pool.py:76)":["/usr/lib/python3.6/multiprocessing/pool.py",76],"Pool (/usr/lib/python3.6/multiprocessing/pool.py:144)":["/usr/lib/python3.6/multiprocessing/pool.py",144],"ApplyResult (/usr/lib/python3.6/multiprocessing/pool.py:617)":["/usr/lib/python3.6/multiprocessing/pool.py",617],"MapResult (/usr/lib/python3.6/multiprocessing/pool.py:661)":["/usr/lib/python3.6/multiprocessing/pool.py",661],"IMapIterator (/usr/lib/python3.6/multiprocessing/pool.py:702)":["/usr/lib/python3.6/multiprocessing/pool.py",702],"IMapUnorderedIterator (/usr/lib/python3.6/multiprocessing/pool.py:766)":["/usr/lib/python3.6/multiprocessing/pool.py",766],"ThreadPool (/usr/lib/python3.6/multiprocessing/pool.py:780)":["/usr/lib/python3.6/multiprocessing/pool.py",780],"<module> (/usr/lib/python3.6/multiprocessing/pool.py:10)":["/usr/lib/python3.6/multiprocessing/pool.py",10],"get_context (/usr/lib/python3.6/multiprocessing/context.py:232)":["/usr/lib/python3.6/multiprocessing/context.py",232],"Queue (/usr/lib/python3.6/multiprocessing/queues.py:34)":["/usr/lib/python3.6/multiprocessing/queues.py",34],"JoinableQueue (/usr/lib/python3.6/multiprocessing/queues.py:269)":["/usr/lib/python3.6/multiprocessing/queues.py",269],"SimpleQueue (/usr/lib/python3.6/multiprocessing/queues.py:311)":["/usr/lib/python3.6/multiprocessing/queues.py",311],"<module> (/usr/lib/python3.6/multiprocessing/queues.py:10)":["/usr/lib/python3.6/multiprocessing/queues.py",10],"get_context (/usr/lib/python3.6/multiprocessing/context.py:186)":["/usr/lib/python3.6/multiprocessing/context.py",186],"__init__ (/usr/lib/python3.6/multiprocessing/connection.py:117)":["/usr/lib/python3.6/multiprocessing/connection.py",117],"Pipe (/usr/lib/python3.6/multiprocessing/connection.py:501)":["/usr/lib/python3.6/multiprocessing/connection.py",501],"SemLock (/usr/lib/python3.6/multiprocessing/synchronize.py:46)":["/usr/lib/python3.6/multiprocessing/synchronize.py",46],"Semaphore (/usr/lib/python3.6/multiprocessing/synchronize.py:123)":["/usr/lib/python3.6/multiprocessing/synchronize.py",123],"BoundedSemaphore (/usr/lib/python3.6/multiprocessing/synchronize.py:142)":["/usr/lib/python3.6/multiprocessing/synchronize.py",142],"Lock (/usr/lib/python3.6/multiprocessing/synchronize.py:159)":["/usr/lib/python3.6/multiprocessing/synchronize.py",159],"RLock (/usr/lib/python3.6/multiprocessing/synchronize.py:184)":["/usr/lib/python3.6/multiprocessing/synchronize.py",184],"Condition (/usr/lib/python3.6/multiprocessing/synchronize.py:210)":["/usr/lib/python3.6/multiprocessing/synchronize.py",210],"Event (/usr/lib/python3.6/multiprocessing/synchronize.py:332)":["/usr/lib/python3.6/multiprocessing/synchronize.py",332],"Barrier (/usr/lib/python3.6/multiprocessing/synchronize.py:371)":["/usr/lib/python3.6/multiprocessing/synchronize.py",371],"<module> (/usr/lib/python3.6/multiprocessing/synchronize.py:11)":["/usr/lib/python3.6/multiprocessing/synchronize.py",11],"get_start_method (/usr/lib/python3.6/multiprocessing/context.py:196)":["/usr/lib/python3.6/multiprocessing/context.py",196],"current_process (/usr/lib/python3.6/multiprocessing/process.py:35)":["/usr/lib/python3.6/multiprocessing/process.py",35],"seed (/usr/lib/python3.6/random.py:96)":["/usr/lib/python3.6/random.py",96],"__init__ (/usr/lib/python3.6/random.py:87)":["/usr/lib/python3.6/random.py",87],"rng (/usr/lib/python3.6/tempfile.py:285)":["/usr/lib/python3.6/tempfile.py",285],"_randbelow (/usr/lib/python3.6/random.py:223)":["/usr/lib/python3.6/random.py",223],"choice (/usr/lib/python3.6/random.py:255)":["/usr/lib/python3.6/random.py",255],"<listcomp> (/usr/lib/python3.6/tempfile.py:299)":["/usr/lib/python3.6/tempfile.py",299],"__next__ (/usr/lib/python3.6/tempfile.py:296)":["/usr/lib/python3.6/tempfile.py",296],"_make_name (/usr/lib/python3.6/multiprocessing/synchronize.py:114)":["/usr/lib/python3.6/multiprocessing/synchronize.py",114],"_make_methods (/usr/lib/python3.6/multiprocessing/synchronize.py:90)":["/usr/lib/python3.6/multiprocessing/synchronize.py",90],"__new__ (/usr/lib/python3.6/weakref.py:334)":["/usr/lib/python3.6/weakref.py",334],"__init__ (/usr/lib/python3.6/weakref.py:339)":["/usr/lib/python3.6/weakref.py",339],"__setitem__ (/usr/lib/python3.6/weakref.py:165)":["/usr/lib/python3.6/weakref.py",165],"register_after_fork (/usr/lib/python3.6/multiprocessing/util.py:136)":["/usr/lib/python3.6/multiprocessing/util.py",136],"__init__ (/usr/lib/python3.6/multiprocessing/synchronize.py:50)":["/usr/lib/python3.6/multiprocessing/synchronize.py",50],"__init__ (/usr/lib/python3.6/multiprocessing/synchronize.py:161)":["/usr/lib/python3.6/multiprocessing/synchronize.py",161],"Lock (/usr/lib/python3.6/multiprocessing/context.py:64)":["/usr/lib/python3.6/multiprocessing/context.py",64],"__init__ (/usr/lib/python3.6/multiprocessing/queues.py:313)":["/usr/lib/python3.6/multiprocessing/queues.py",313],"SimpleQueue (/usr/lib/python3.6/multiprocessing/context.py:109)":["/usr/lib/python3.6/multiprocessing/context.py",109],"_setup_queues (/usr/lib/python3.6/multiprocessing/pool.py:248)":["/usr/lib/python3.6/multiprocessing/pool.py",248],"_init (/usr/lib/python3.6/queue.py:199)":["/usr/lib/python3.6/queue.py",199],"__init__ (/usr/lib/python3.6/threading.py:215)":["/usr/lib/python3.6/threading.py",215],"__init__ (/usr/lib/python3.6/queue.py:27)":["/usr/lib/python3.6/queue.py",27],"<genexpr> (/usr/lib/python3.6/multiprocessing/process.py:83)":["/usr/lib/python3.6/multiprocessing/process.py",83],"add (/usr/lib/python3.6/_weakrefset.py:81)":["/usr/lib/python3.6/_weakrefset.py",81],"__init__ (/usr/lib/python3.6/multiprocessing/process.py:71)":["/usr/lib/python3.6/multiprocessing/process.py",71],"Process (/usr/lib/python3.6/multiprocessing/pool.py:150)":["/usr/lib/python3.6/multiprocessing/pool.py",150],"name (/usr/lib/python3.6/multiprocessing/process.py:146)":["/usr/lib/python3.6/multiprocessing/process.py",146],"name (/usr/lib/python3.6/multiprocessing/process.py:150)":["/usr/lib/python3.6/multiprocessing/process.py",150],"daemon (/usr/lib/python3.6/multiprocessing/process.py:162)":["/usr/lib/python3.6/multiprocessing/process.py",162],"_cleanup (/usr/lib/python3.6/multiprocessing/process.py:52)":["/usr/lib/python3.6/multiprocessing/process.py",52],"Popen (/usr/lib/python3.6/multiprocessing/popen_fork.py:13)":["/usr/lib/python3.6/multiprocessing/popen_fork.py",13],"<module> (/usr/lib/python3.6/multiprocessing/popen_fork.py:1)":["/usr/lib/python3.6/multiprocessing/popen_fork.py",1],"_flush_std_streams (/usr/lib/python3.6/multiprocessing/util.py:395)":["/usr/lib/python3.6/multiprocessing/util.py",395],"__init__ (/usr/lib/python3.6/multiprocessing/util.py:151)":["/usr/lib/python3.6/multiprocessing/util.py",151],"_launch (/usr/lib/python3.6/multiprocessing/popen_fork.py:63)":["/usr/lib/python3.6/multiprocessing/popen_fork.py",63],"__init__ (/usr/lib/python3.6/multiprocessing/popen_fork.py:16)":["/usr/lib/python3.6/multiprocessing/popen_fork.py",16],"_Popen (/usr/lib/python3.6/multiprocessing/context.py:274)":["/usr/lib/python3.6/multiprocessing/context.py",274],"start (/usr/lib/python3.6/multiprocessing/process.py:95)":["/usr/lib/python3.6/multiprocessing/process.py",95],"poll (/usr/lib/python3.6/multiprocessing/popen_fork.py:24)":["/usr/lib/python3.6/multiprocessing/popen_fork.py",24],"_repopulate_pool (/usr/lib/python3.6/multiprocessing/pool.py:225)":["/usr/lib/python3.6/multiprocessing/pool.py",225],"_newname (/usr/lib/python3.6/threading.py:727)":["/usr/lib/python3.6/threading.py",727],"current_thread (/usr/lib/python3.6/threading.py:1230)":["/usr/lib/python3.6/threading.py",1230],"daemon (/usr/lib/python3.6/threading.py:1120)":["/usr/lib/python3.6/threading.py",1120],"__init__ (/usr/lib/python3.6/threading.py:498)":["/usr/lib/python3.6/threading.py",498],"__init__ (/usr/lib/python3.6/threading.py:757)":["/usr/lib/python3.6/threading.py",757],"is_set (/usr/lib/python3.6/threading.py:506)":["/usr/lib/python3.6/threading.py",506],"daemon (/usr/lib/python3.6/threading.py:1136)":["/usr/lib/python3.6/threading.py",1136],"__enter__ (/usr/lib/python3.6/threading.py:239)":["/usr/lib/python3.6/threading.py",239],"_is_owned (/usr/lib/python3.6/threading.py:254)":["/usr/lib/python3.6/threading.py",254],"_release_save (/usr/lib/python3.6/threading.py:248)":["/usr/lib/python3.6/threading.py",248],"exitcode (/usr/lib/python3.6/multiprocessing/process.py:181)":["/usr/lib/python3.6/multiprocessing/process.py",181],"_join_exited_workers (/usr/lib/python3.6/multiprocessing/pool.py:210)":["/usr/lib/python3.6/multiprocessing/pool.py",210],"_maintain_pool (/usr/lib/python3.6/multiprocessing/pool.py:242)":["/usr/lib/python3.6/multiprocessing/pool.py",242],"_acquire_restore (/usr/lib/python3.6/threading.py:251)":["/usr/lib/python3.6/threading.py",251],"wait (/usr/lib/python3.6/threading.py:263)":["/usr/lib/python3.6/threading.py",263],"__exit__ (/usr/lib/python3.6/threading.py:242)":["/usr/lib/python3.6/threading.py",242],"wait (/usr/lib/python3.6/threading.py:533)":["/usr/lib/python3.6/threading.py",533],"start (/usr/lib/python3.6/threading.py:828)":["/usr/lib/python3.6/threading.py",828],"_qsize (/usr/lib/python3.6/queue.py:202)":["/usr/lib/python3.6/queue.py",202],"__init__ (/usr/lib/python3.6/multiprocessing/pool.py:153)":["/usr/lib/python3.6/multiprocessing/pool.py",153],"Pool (/usr/lib/python3.6/multiprocessing/context.py:114)":["/usr/lib/python3.6/multiprocessing/context.py",114],"__enter__ (/usr/lib/python3.6/multiprocessing/pool.py:607)":["/usr/lib/python3.6/multiprocessing/pool.py",607],"__init__ (/usr/lib/python3.6/multiprocessing/pool.py:619)":["/usr/lib/python3.6/multiprocessing/pool.py",619],"__init__ (/usr/lib/python3.6/multiprocessing/pool.py:663)":["/usr/lib/python3.6/multiprocessing/pool.py",663],"_put (/usr/lib/python3.6/queue.py:206)":["/usr/lib/python3.6/queue.py",206],"notify (/usr/lib/python3.6/threading.py:334)":["/usr/lib/python3.6/threading.py",334],"put (/usr/lib/python3.6/queue.py:115)":["/usr/lib/python3.6/queue.py",115],"_map_async (/usr/lib/python3.6/multiprocessing/pool.py:368)":["/usr/lib/python3.6/multiprocessing/pool.py",368],"_get (/usr/lib/python3.6/queue.py:210)":["/usr/lib/python3.6/queue.py",210],"get (/usr/lib/python3.6/queue.py:147)":["/usr/lib/python3.6/queue.py",147],"_get_tasks (/usr/lib/python3.6/multiprocessing/pool.py:517)":["/usr/lib/python3.6/multiprocessing/pool.py",517],"_guarded_task_generation (/usr/lib/python3.6/multiprocessing/pool.py:284)":["/usr/lib/python3.6/multiprocessing/pool.py",284],"send (/usr/lib/python3.6/multiprocessing/connection.py:202)":["/usr/lib/python3.6/multiprocessing/connection.py",202],"recv (/usr/lib/python3.6/multiprocessing/connection.py:246)":["/usr/lib/python3.6/multiprocessing/connection.py",246],"_set (/usr/lib/python3.6/multiprocessing/pool.py:676)":["/usr/lib/python3.6/multiprocessing/pool.py",676],"notify_all (/usr/lib/python3.6/threading.py:357)":["/usr/lib/python3.6/threading.py",357],"set (/usr/lib/python3.6/threading.py:512)":["/usr/lib/python3.6/threading.py",512],"wait (/usr/lib/python3.6/multiprocessing/pool.py:634)":["/usr/lib/python3.6/multiprocessing/pool.py",634],"ready (/usr/lib/python3.6/multiprocessing/pool.py:627)":["/usr/lib/python3.6/multiprocessing/pool.py",627],"get (/usr/lib/python3.6/multiprocessing/pool.py:637)":["/usr/lib/python3.6/multiprocessing/pool.py",637],"map (/usr/lib/python3.6/multiprocessing/pool.py:261)":["/usr/lib/python3.6/multiprocessing/pool.py",261],"__init__ (/usr/lib/python3.6/multiprocessing/pool.py:704)":["/usr/lib/python3.6/multiprocessing/pool.py",704],"imap_unordered (/usr/lib/python3.6/multiprocessing/pool.py:322)":["/usr/lib/python3.6/multiprocessing/pool.py",322],"__iter__ (/usr/lib/python3.6/multiprocessing/pool.py:714)":["/usr/lib/python3.6/multiprocessing/pool.py",714],"_set_length (/usr/lib/python3.6/multiprocessing/pool.py:755)":["/usr/lib/python3.6/multiprocessing/pool.py",755],"_set (/usr/lib/python3.6/multiprocessing/pool.py:768)":["/usr/lib/python3.6/multiprocessing/pool.py",768],"next (/usr/lib/python3.6/multiprocessing/pool.py:717)":["/usr/lib/python3.6/multiprocessing/pool.py",717],"apply_async (/usr/lib/python3.6/multiprocessing/pool.py:349)":["/usr/lib/python3.6/multiprocessing/pool.py",349],"_set (/usr/lib/python3.6/multiprocessing/pool.py:646)":["/usr/lib/python3.6/multiprocessing/pool.py",646],"<listcomp> (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:23)":["/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py",23],"<listcomp> (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:24)":["/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py",24],"_handle_workers (/usr/lib/python3.6/multiprocessing/pool.py:398)":["/usr/lib/python3.6/multiprocessing/pool.py",398],"run (/usr/lib/python3.6/threading.py:853)":["/usr/lib/python3.6/threading.py",853],"_handle_tasks (/usr/lib/python3.6/multiprocessing/pool.py:411)":["/usr/lib/python3.6/multiprocessing/pool.py",411],"__init__ (/usr/lib/python3.6/selectors.py:62)":["/usr/lib/python3.6/selectors.py",62],"__init__ (/usr/lib/python3.6/selectors.py:208)":["/usr/lib/python3.6/selectors.py",208],"__init__ (/usr/lib/python3.6/selectors.py:346)":["/usr/lib/python3.6/selectors.py",346],"__enter__ (/usr/lib/python3.6/selectors.py:198)":["/usr/lib/python3.6/selectors.py",198],"fileno (/usr/lib/python3.6/multiprocessing/connection.py:168)":["/usr/lib/python3.6/multiprocessing/connection.py",168],"_fileobj_to_fd (/usr/lib/python3.6/selectors.py:20)":["/usr/lib/python3.6/selectors.py",20],"_fileobj_lookup (/usr/lib/python3.6/selectors.py:214)":["/usr/lib/python3.6/selectors.py",214],"register (/usr/lib/python3.6/selectors.py:233)":["/usr/lib/python3.6/selectors.py",233],"register (/usr/lib/python3.6/selectors.py:350)":["/usr/lib/python3.6/selectors.py",350],"select (/usr/lib/python3.6/selectors.py:365)":["/usr/lib/python3.6/selectors.py",365],"close (/usr/lib/python3.6/selectors.py:268)":["/usr/lib/python3.6/selectors.py",268],"__exit__ (/usr/lib/python3.6/selectors.py:201)":["/usr/lib/python3.6/selectors.py",201],"wait (/usr/lib/python3.6/multiprocessing/connection.py:897)":["/usr/lib/python3.6/multiprocessing/connection.py",897],"_poll (/usr/lib/python3.6/multiprocessing/connection.py:413)":["/usr/lib/python3.6/multiprocessing/connection.py",413],"poll (/usr/lib/python3.6/multiprocessing/connection.py:253)":["/usr/lib/python3.6/multiprocessing/connection.py",253],"_handle_results (/usr/lib/python3.6/multiprocessing/pool.py:457)":["/usr/lib/python3.6/multiprocessing/pool.py",457],"_stop (/usr/lib/python3.6/threading.py:966)":["/usr/lib/python3.6/threading.py",966],"_wait_for_tstate_lock (/usr/lib/python3.6/threading.py:1062)":["/usr/lib/python3.6/threading.py",1062],"is_alive (/usr/lib/python3.6/threading.py:1104)":["/usr/lib/python3.6/threading.py",1104],"_help_stuff_finish (/usr/lib/python3.6/multiprocessing/pool.py:552)":["/usr/lib/python3.6/multiprocessing/pool.py",552],"join (/usr/lib/python3.6/threading.py:1024)":["/usr/lib/python3.6/threading.py",1024],"terminate (/usr/lib/python3.6/multiprocessing/popen_fork.py:53)":["/usr/lib/python3.6/multiprocessing/popen_fork.py",53],"terminate (/usr/lib/python3.6/multiprocessing/process.py:112)":["/usr/lib/python3.6/multiprocessing/process.py",112],"is_alive (/usr/lib/python3.6/multiprocessing/process.py:128)":["/usr/lib/python3.6/multiprocessing/process.py",128],"ident (/usr/lib/python3.6/multiprocessing/process.py:190)":["/usr/lib/python3.6/multiprocessing/process.py",190],"wait (/usr/lib/python3.6/multiprocessing/popen_fork.py:43)":["/usr/lib/python3.6/multiprocessing/popen_fork.py",43],"join (/usr/lib/python3.6/multiprocessing/process.py:118)":["/usr/lib/python3.6/multiprocessing/process.py",118],"_terminate_pool (/usr/lib/python3.6/multiprocessing/pool.py:561)":["/usr/lib/python3.6/multiprocessing/pool.py",561],"__call__ (/usr/lib/python3.6/multiprocessing/util.py:167)":["/usr/lib/python3.6/multiprocessing/util.py",167],"terminate (/usr/lib/python3.6/multiprocessing/pool.py:537)":["/usr/lib/python3.6/multiprocessing/pool.py",537],"__exit__ (/usr/lib/python3.6/multiprocessing/pool.py:610)":["/usr/lib/python3.6/multiprocessing/pool.py",610],"<module> (/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py:1)":["/home/gaogaotiantian/programs/codesnap/example/src/multi_process_pool.py",1]}}}